<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/elastic/item/item_get.proto

namespace Dstore\Elastic\Item\Item_get;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.elastic.item.item_get.Response.Facet</code>
 */
class Response_Facet extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>string field_name = 1;</code>
     */
    private $field_name = '';
    /**
     * <code>repeated .dstore.elastic.item.item_get.Response.Facet.FacetValue facet_value = 2;</code>
     */
    private $facet_value;
    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_from = 10;</code>
     */
    private $range_from = 0.0;
    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_to = 11;</code>
     */
    private $range_to = 0.0;

    public function __construct() {
        \GPBMetadata\Dstore\Elastic\Item\ItemGet::initOnce();
        parent::__construct();
    }

    /**
     * <code>string field_name = 1;</code>
     */
    public function getFieldName()
    {
        return $this->field_name;
    }

    /**
     * <code>string field_name = 1;</code>
     */
    public function setFieldName($var)
    {
        GPBUtil::checkString($var, True);
        $this->field_name = $var;
    }

    /**
     * <code>repeated .dstore.elastic.item.item_get.Response.Facet.FacetValue facet_value = 2;</code>
     */
    public function getFacetValue()
    {
        return $this->facet_value;
    }

    /**
     * <code>repeated .dstore.elastic.item.item_get.Response.Facet.FacetValue facet_value = 2;</code>
     */
    public function setFacetValue(&$var)
    {
        GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Dstore\Elastic\Item\Item_get\Response_Facet_FacetValue::class);
        $this->facet_value = $var;
    }

    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_from = 10;</code>
     */
    public function getRangeFrom()
    {
        return $this->range_from;
    }

    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_from = 10;</code>
     */
    public function setRangeFrom($var)
    {
        GPBUtil::checkDouble($var);
        $this->range_from = $var;
    }

    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_to = 11;</code>
     */
    public function getRangeTo()
    {
        return $this->range_to;
    }

    /**
     * <pre>
     * Only filled when using a range-facet
     * </pre>
     *
     * <code>double range_to = 11;</code>
     */
    public function setRangeTo($var)
    {
        GPBUtil::checkDouble($var);
        $this->range_to = $var;
    }

}

