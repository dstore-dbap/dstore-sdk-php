<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/elastic/elastic.proto

namespace Dstore\Elastic;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.elastic.Query</code>
 */
class Query extends \Google\Protobuf\Internal\Message
{
    protected $query;

    public function __construct() {
        \GPBMetadata\Dstore\Elastic\Elastic::initOnce();
        parent::__construct();
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Terms terms_query = 1;</code>
     */
    public function getTermsQuery()
    {
        return $this->readOneof(1);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Terms terms_query = 1;</code>
     */
    public function setTermsQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Elastic\Query_Terms::class);
        $this->writeOneof(1, $var);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-type-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Type type_query = 2;</code>
     */
    public function getTypeQuery()
    {
        return $this->readOneof(2);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-type-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Type type_query = 2;</code>
     */
    public function setTypeQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Elastic\Query_Type::class);
        $this->writeOneof(2, $var);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.SimpleQueryString simple_query_string_query = 3;</code>
     */
    public function getSimpleQueryStringQuery()
    {
        return $this->readOneof(3);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.SimpleQueryString simple_query_string_query = 3;</code>
     */
    public function setSimpleQueryStringQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Elastic\Query_SimpleQueryString::class);
        $this->writeOneof(3, $var);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Range range_query = 4;</code>
     */
    public function getRangeQuery()
    {
        return $this->readOneof(4);
    }

    /**
     * <pre>
     * see: https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html
     * </pre>
     *
     * <code>.dstore.elastic.Query.Range range_query = 4;</code>
     */
    public function setRangeQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Elastic\Query_Range::class);
        $this->writeOneof(4, $var);
    }

    /**
     * <pre>
     * not yet supported in FacetedNavigation
     * </pre>
     *
     * <code>.dstore.elastic.BoolQuery bool_query = 20;</code>
     */
    public function getBoolQuery()
    {
        return $this->readOneof(20);
    }

    /**
     * <pre>
     * not yet supported in FacetedNavigation
     * </pre>
     *
     * <code>.dstore.elastic.BoolQuery bool_query = 20;</code>
     */
    public function setBoolQuery(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Elastic\BoolQuery::class);
        $this->writeOneof(20, $var);
    }

    public function getQuery()
    {
        return $this->query;
    }

}

