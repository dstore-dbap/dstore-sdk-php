<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetGroupSurcharges_Ad.proto

namespace Dstore\Engine\Om_GetGroupSurcharges_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetGroupSurcharges_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Ist der Rabatt/Aufschlag "SurchargeValue" ein absoluter Wert ("0") oder eine relative (d.h. Prozent-) Angabe ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue relative = 10001;</code>
     */
    private $relative = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10002;</code>
     */
    private $unit_symbol = null;
    /**
     * <pre>
     * Der zur Gruppe "GroupID" für das Element "TreeNodeID" hinterlegte Rabatt/Aufschlag. Ein negativer Wert bedeutet, daß es sich um einen Rabatt handelt (z.B. wenn die Rabatt--/Aufschlagsart "Sonder-Rabatt" o.ä. ist).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10003;</code>
     */
    private $surcharge_value = null;
    /**
     * <pre>
     * ID einer Personen-Gruppe, für die (zum Element "TreeNodeID") der Aufschlag "SurchargeValue" hinterlegt ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10004;</code>
     */
    private $group_id = null;
    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10005;</code>
     */
    private $group_description = null;
    /**
     * <pre>
     * Bezeichnung des Artikel-Elementes "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10006;</code>
     */
    private $node_description = null;
    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10007;</code>
     */
    private $active = null;
    /**
     * <pre>
     * ID einer Währungs-Einheit (wenn "Relative = 0") oder der Prozent-Einheit (wenn "Relative = 1" ist) - also die Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10008;</code>
     */
    private $unit_id = null;
    /**
     * <pre>
     * Der Parameter hat nur Bedeutung, wenn "Relative = 0" ist. Er gibt an, ob der Rabatt/Aufschlag "SurchargeValue" als Brutto- oder Nettobetrag angegeben ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue brutto = 10009;</code>
     */
    private $brutto = null;
    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, zu dem (für die Gruppe "GroupID") der Aufschlag "SurchargeValue" hinterlegt ist. Dieser gilt dann auch für alle NACHFOLGER (bis auf die, denen direkt eine andere "SurchargeTypeID" zugwiesen ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10010;</code>
     */
    private $tree_node_id = null;
    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10011;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10012;</code>
     */
    private $surcharge_type_description = null;
    /**
     * <pre>
     * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10013;</code>
     */
    private $surcharge_type_id = null;
    /**
     * <pre>
     * ID der Hierarchie der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_id = 10014;</code>
     */
    private $level_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetGroupSurchargesAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Ist der Rabatt/Aufschlag "SurchargeValue" ein absoluter Wert ("0") oder eine relative (d.h. Prozent-) Angabe ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue relative = 10001;</code>
     */
    public function getRelative()
    {
        return $this->relative;
    }

    /**
     * <pre>
     * Ist der Rabatt/Aufschlag "SurchargeValue" ein absoluter Wert ("0") oder eine relative (d.h. Prozent-) Angabe ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue relative = 10001;</code>
     */
    public function setRelative(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->relative = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10002;</code>
     */
    public function getUnitSymbol()
    {
        return $this->unit_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10002;</code>
     */
    public function setUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unit_symbol = $var;
    }

    /**
     * <pre>
     * Der zur Gruppe "GroupID" für das Element "TreeNodeID" hinterlegte Rabatt/Aufschlag. Ein negativer Wert bedeutet, daß es sich um einen Rabatt handelt (z.B. wenn die Rabatt--/Aufschlagsart "Sonder-Rabatt" o.ä. ist).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10003;</code>
     */
    public function getSurchargeValue()
    {
        return $this->surcharge_value;
    }

    /**
     * <pre>
     * Der zur Gruppe "GroupID" für das Element "TreeNodeID" hinterlegte Rabatt/Aufschlag. Ein negativer Wert bedeutet, daß es sich um einen Rabatt handelt (z.B. wenn die Rabatt--/Aufschlagsart "Sonder-Rabatt" o.ä. ist).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10003;</code>
     */
    public function setSurchargeValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->surcharge_value = $var;
    }

    /**
     * <pre>
     * ID einer Personen-Gruppe, für die (zum Element "TreeNodeID") der Aufschlag "SurchargeValue" hinterlegt ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10004;</code>
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * <pre>
     * ID einer Personen-Gruppe, für die (zum Element "TreeNodeID") der Aufschlag "SurchargeValue" hinterlegt ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10004;</code>
     */
    public function setGroupId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->group_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10005;</code>
     */
    public function getGroupDescription()
    {
        return $this->group_description;
    }

    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10005;</code>
     */
    public function setGroupDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->group_description = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Artikel-Elementes "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10006;</code>
     */
    public function getNodeDescription()
    {
        return $this->node_description;
    }

    /**
     * <pre>
     * Bezeichnung des Artikel-Elementes "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10006;</code>
     */
    public function setNodeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->node_description = $var;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10007;</code>
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10007;</code>
     */
    public function setActive(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->active = $var;
    }

    /**
     * <pre>
     * ID einer Währungs-Einheit (wenn "Relative = 0") oder der Prozent-Einheit (wenn "Relative = 1" ist) - also die Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10008;</code>
     */
    public function getUnitId()
    {
        return $this->unit_id;
    }

    /**
     * <pre>
     * ID einer Währungs-Einheit (wenn "Relative = 0") oder der Prozent-Einheit (wenn "Relative = 1" ist) - also die Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10008;</code>
     */
    public function setUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->unit_id = $var;
    }

    /**
     * <pre>
     * Der Parameter hat nur Bedeutung, wenn "Relative = 0" ist. Er gibt an, ob der Rabatt/Aufschlag "SurchargeValue" als Brutto- oder Nettobetrag angegeben ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue brutto = 10009;</code>
     */
    public function getBrutto()
    {
        return $this->brutto;
    }

    /**
     * <pre>
     * Der Parameter hat nur Bedeutung, wenn "Relative = 0" ist. Er gibt an, ob der Rabatt/Aufschlag "SurchargeValue" als Brutto- oder Nettobetrag angegeben ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue brutto = 10009;</code>
     */
    public function setBrutto(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->brutto = $var;
    }

    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, zu dem (für die Gruppe "GroupID") der Aufschlag "SurchargeValue" hinterlegt ist. Dieser gilt dann auch für alle NACHFOLGER (bis auf die, denen direkt eine andere "SurchargeTypeID" zugwiesen ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10010;</code>
     */
    public function getTreeNodeId()
    {
        return $this->tree_node_id;
    }

    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, zu dem (für die Gruppe "GroupID") der Aufschlag "SurchargeValue" hinterlegt ist. Dieser gilt dann auch für alle NACHFOLGER (bis auf die, denen direkt eine andere "SurchargeTypeID" zugwiesen ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10010;</code>
     */
    public function setTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tree_node_id = $var;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10011;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10011;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10012;</code>
     */
    public function getSurchargeTypeDescription()
    {
        return $this->surcharge_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10012;</code>
     */
    public function setSurchargeTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->surcharge_type_description = $var;
    }

    /**
     * <pre>
     * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10013;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * ID einer Preis-Aufschlags/Rabatt-Art, wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10013;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

    /**
     * <pre>
     * ID der Hierarchie der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_id = 10014;</code>
     */
    public function getLevelId()
    {
        return $this->level_id;
    }

    /**
     * <pre>
     * ID der Hierarchie der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_id = 10014;</code>
     */
    public function setLevelId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->level_id = $var;
    }

}

