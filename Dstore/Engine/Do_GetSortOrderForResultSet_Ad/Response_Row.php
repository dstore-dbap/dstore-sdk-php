<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/do_GetSortOrderForResultSet_Ad.proto

namespace Dstore\Engine\Do_GetSortOrderForResultSet_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.do_GetSortOrderForResultSet_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Die Rückgabemenge wird nur geliefert, wenn der für "ParameterName" übergebene Wert dieser Bedingung genügt. Fast immer handelt es sich hier um eine Bedingung, die in SQL ausgewertet werden kann, zumindest aber mit Hilfe von regulären Ausdrücken.
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10001;</code>
     */
    private $condition = null;
    /**
     * <pre>
     * ID einer Bedingung, unter der die durch "&#64;ProcedureResultConditionID" bezeichnete Rückgabemenge nach den "ResultColumnName"s sortiert wird. "0" bedeutet, daß die Rückgabemenge an keine Bedingung gebunden ist. (siehe Beschreibung !)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_condition_id = 10002;</code>
     */
    private $sort_condition_id = null;
    /**
     * <pre>
     * Name eines Parameters der Prozedur "&#64;ProcedureName". Die Art der Sortierung hängt vom Wert, der für diesen Parameter angegeben ist, ab. Der Wert muß der Bedingung "Condition" genügen. ("NULL" bei der speziellen Bedingung "ProcedureResultConditionID = 0".)
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10003;</code>
     */
    private $parameter_name = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ResultColumnName" innerhalb aller Spalten, nach denen sortiert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10004;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * "0" : Absteigende Sortierung nach "ResultColumnName""1" : Aufsteigende Sortierung nach "ResultColumnName"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ascending_sort_order = 10005;</code>
     */
    private $ascending_sort_order = null;
    /**
     * <pre>
     * Name einer Rückgabespalte der durch "&#64;ProcedureResultConditionID" gekennzeichneten Ergebnismenge, nach der sortiert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue result_column_name = 10006;</code>
     */
    private $result_column_name = null;
    /**
     * <pre>
     * Bezeichnung der Sortierungs-Bedingung "SortConditionID". Derzeit entweder "Parameterunabhängige Sortierung" oder aber &lt;Bezeichnung der Rückgabemenge "&#64;ProcedureResultConditionID"&gt;_&lt;fortlaufende Nummer&gt;.
     * </pre>
     *
     * <code>.dstore.values.StringValue sort_condition_description = 10007;</code>
     */
    private $sort_condition_description = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\DoGetSortOrderForResultSetAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Die Rückgabemenge wird nur geliefert, wenn der für "ParameterName" übergebene Wert dieser Bedingung genügt. Fast immer handelt es sich hier um eine Bedingung, die in SQL ausgewertet werden kann, zumindest aber mit Hilfe von regulären Ausdrücken.
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10001;</code>
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * <pre>
     * Die Rückgabemenge wird nur geliefert, wenn der für "ParameterName" übergebene Wert dieser Bedingung genügt. Fast immer handelt es sich hier um eine Bedingung, die in SQL ausgewertet werden kann, zumindest aber mit Hilfe von regulären Ausdrücken.
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10001;</code>
     */
    public function setCondition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition = $var;
    }

    /**
     * <pre>
     * ID einer Bedingung, unter der die durch "&#64;ProcedureResultConditionID" bezeichnete Rückgabemenge nach den "ResultColumnName"s sortiert wird. "0" bedeutet, daß die Rückgabemenge an keine Bedingung gebunden ist. (siehe Beschreibung !)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_condition_id = 10002;</code>
     */
    public function getSortConditionId()
    {
        return $this->sort_condition_id;
    }

    /**
     * <pre>
     * ID einer Bedingung, unter der die durch "&#64;ProcedureResultConditionID" bezeichnete Rückgabemenge nach den "ResultColumnName"s sortiert wird. "0" bedeutet, daß die Rückgabemenge an keine Bedingung gebunden ist. (siehe Beschreibung !)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_condition_id = 10002;</code>
     */
    public function setSortConditionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_condition_id = $var;
    }

    /**
     * <pre>
     * Name eines Parameters der Prozedur "&#64;ProcedureName". Die Art der Sortierung hängt vom Wert, der für diesen Parameter angegeben ist, ab. Der Wert muß der Bedingung "Condition" genügen. ("NULL" bei der speziellen Bedingung "ProcedureResultConditionID = 0".)
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10003;</code>
     */
    public function getParameterName()
    {
        return $this->parameter_name;
    }

    /**
     * <pre>
     * Name eines Parameters der Prozedur "&#64;ProcedureName". Die Art der Sortierung hängt vom Wert, der für diesen Parameter angegeben ist, ab. Der Wert muß der Bedingung "Condition" genügen. ("NULL" bei der speziellen Bedingung "ProcedureResultConditionID = 0".)
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10003;</code>
     */
    public function setParameterName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->parameter_name = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ResultColumnName" innerhalb aller Spalten, nach denen sortiert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10004;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ResultColumnName" innerhalb aller Spalten, nach denen sortiert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10004;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * "0" : Absteigende Sortierung nach "ResultColumnName""1" : Aufsteigende Sortierung nach "ResultColumnName"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ascending_sort_order = 10005;</code>
     */
    public function getAscendingSortOrder()
    {
        return $this->ascending_sort_order;
    }

    /**
     * <pre>
     * "0" : Absteigende Sortierung nach "ResultColumnName""1" : Aufsteigende Sortierung nach "ResultColumnName"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ascending_sort_order = 10005;</code>
     */
    public function setAscendingSortOrder(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->ascending_sort_order = $var;
    }

    /**
     * <pre>
     * Name einer Rückgabespalte der durch "&#64;ProcedureResultConditionID" gekennzeichneten Ergebnismenge, nach der sortiert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue result_column_name = 10006;</code>
     */
    public function getResultColumnName()
    {
        return $this->result_column_name;
    }

    /**
     * <pre>
     * Name einer Rückgabespalte der durch "&#64;ProcedureResultConditionID" gekennzeichneten Ergebnismenge, nach der sortiert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue result_column_name = 10006;</code>
     */
    public function setResultColumnName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->result_column_name = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Sortierungs-Bedingung "SortConditionID". Derzeit entweder "Parameterunabhängige Sortierung" oder aber &lt;Bezeichnung der Rückgabemenge "&#64;ProcedureResultConditionID"&gt;_&lt;fortlaufende Nummer&gt;.
     * </pre>
     *
     * <code>.dstore.values.StringValue sort_condition_description = 10007;</code>
     */
    public function getSortConditionDescription()
    {
        return $this->sort_condition_description;
    }

    /**
     * <pre>
     * Bezeichnung der Sortierungs-Bedingung "SortConditionID". Derzeit entweder "Parameterunabhängige Sortierung" oder aber &lt;Bezeichnung der Rückgabemenge "&#64;ProcedureResultConditionID"&gt;_&lt;fortlaufende Nummer&gt;.
     * </pre>
     *
     * <code>.dstore.values.StringValue sort_condition_description = 10007;</code>
     */
    public function setSortConditionDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->sort_condition_description = $var;
    }

}

