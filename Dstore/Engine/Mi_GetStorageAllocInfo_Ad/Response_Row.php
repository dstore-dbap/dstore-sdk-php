<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetStorageAllocInfo_Ad.proto

namespace Dstore\Engine\Mi_GetStorageAllocInfo_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10001;</code>
     */
    private $table_name = null;
    /**
     * <pre>
     * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue index_size_mb = 10002;</code>
     */
    private $index_size_mb = null;
    /**
     * <pre>
     * Anzahl Indizes der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_indexes = 10003;</code>
     */
    private $number_of_indexes = null;
    /**
     * <pre>
     * Anzahl Datensätze in der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_rows = 10004;</code>
     */
    private $number_of_rows = null;
    /**
     * <pre>
     * Gesamte Größe der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue table_size_mb = 10005;</code>
     */
    private $table_size_mb = null;
    /**
     * <pre>
     * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue data_size_mb = 10006;</code>
     */
    private $data_size_mb = null;
    /**
     * <pre>
     * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mballocated = 20001;</code>
     */
    private $mballocated = null;
    /**
     * <pre>
     * Name eines Segments in der Datenbank "DBName"
     * </pre>
     *
     * <code>.dstore.values.StringValue segment_name = 20002;</code>
     */
    private $segment_name = null;
    /**
     * <pre>
     * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbused = 20003;</code>
     */
    private $mbused = null;
    /**
     * <pre>
     * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue free_space_in_percent = 20004;</code>
     */
    private $free_space_in_percent = null;
    /**
     * <pre>
     * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 20005;</code>
     */
    private $d_b_name = null;
    /**
     * <pre>
     * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbfree = 20006;</code>
     */
    private $mbfree = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetStorageAllocInfoAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10001;</code>
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * <pre>
     * Name einer Tabelle, auf die sich die weiteren Spalten beziehen (für die also der Speicher-Verbrauch bestimmt wurde)
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10001;</code>
     */
    public function setTableName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->table_name = $var;
    }

    /**
     * <pre>
     * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue index_size_mb = 10002;</code>
     */
    public function getIndexSizeMb()
    {
        return $this->index_size_mb;
    }

    /**
     * <pre>
     * Speicherverbrauch für die Indizes der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue index_size_mb = 10002;</code>
     */
    public function setIndexSizeMb(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->index_size_mb = $var;
    }

    /**
     * <pre>
     * Anzahl Indizes der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_indexes = 10003;</code>
     */
    public function getNumberOfIndexes()
    {
        return $this->number_of_indexes;
    }

    /**
     * <pre>
     * Anzahl Indizes der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_indexes = 10003;</code>
     */
    public function setNumberOfIndexes(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->number_of_indexes = $var;
    }

    /**
     * <pre>
     * Anzahl Datensätze in der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_rows = 10004;</code>
     */
    public function getNumberOfRows()
    {
        return $this->number_of_rows;
    }

    /**
     * <pre>
     * Anzahl Datensätze in der Tabelle "TableName"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue number_of_rows = 10004;</code>
     */
    public function setNumberOfRows(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->number_of_rows = $var;
    }

    /**
     * <pre>
     * Gesamte Größe der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue table_size_mb = 10005;</code>
     */
    public function getTableSizeMb()
    {
        return $this->table_size_mb;
    }

    /**
     * <pre>
     * Gesamte Größe der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue table_size_mb = 10005;</code>
     */
    public function setTableSizeMb(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->table_size_mb = $var;
    }

    /**
     * <pre>
     * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue data_size_mb = 10006;</code>
     */
    public function getDataSizeMb()
    {
        return $this->data_size_mb;
    }

    /**
     * <pre>
     * Speicherverbrauch für die Daten der Tabelle "TableName" in MB
     * </pre>
     *
     * <code>.dstore.values.DecimalValue data_size_mb = 10006;</code>
     */
    public function setDataSizeMb(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->data_size_mb = $var;
    }

    /**
     * <pre>
     * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mballocated = 20001;</code>
     */
    public function getMballocated()
    {
        return $this->mballocated;
    }

    /**
     * <pre>
     * Wieviel MB für "SegmentName" alloziert sind, sprich die Größe des Segments
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mballocated = 20001;</code>
     */
    public function setMballocated(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->mballocated = $var;
    }

    /**
     * <pre>
     * Name eines Segments in der Datenbank "DBName"
     * </pre>
     *
     * <code>.dstore.values.StringValue segment_name = 20002;</code>
     */
    public function getSegmentName()
    {
        return $this->segment_name;
    }

    /**
     * <pre>
     * Name eines Segments in der Datenbank "DBName"
     * </pre>
     *
     * <code>.dstore.values.StringValue segment_name = 20002;</code>
     */
    public function setSegmentName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->segment_name = $var;
    }

    /**
     * <pre>
     * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbused = 20003;</code>
     */
    public function getMbused()
    {
        return $this->mbused;
    }

    /**
     * <pre>
     * Wieviel MB "SegmentName" derzeit tatsächlich belegt.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies "MB_allocated" ABZÜGLICH für "rollbacks" reserviertem Speicher und Anzahl freier Pages im Log-Segment.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbused = 20003;</code>
     */
    public function setMbused(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->mbused = $var;
    }

    /**
     * <pre>
     * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue free_space_in_percent = 20004;</code>
     */
    public function getFreeSpaceInPercent()
    {
        return $this->free_space_in_percent;
    }

    /**
     * <pre>
     * Wieviel Prozent von "SegmentName" noch frei sind (also das Verhältnis von "MB_free" zu "MB_allocated" in Prozent)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue free_space_in_percent = 20004;</code>
     */
    public function setFreeSpaceInPercent(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->free_space_in_percent = $var;
    }

    /**
     * <pre>
     * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 20005;</code>
     */
    public function getDBName()
    {
        return $this->d_b_name;
    }

    /**
     * <pre>
     * Name der in "&#64;GetStorageAllocInfoFor" angegebenen Datenbank
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 20005;</code>
     */
    public function setDBName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->d_b_name = $var;
    }

    /**
     * <pre>
     * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbfree = 20006;</code>
     */
    public function getMbfree()
    {
        return $this->mbfree;
    }

    /**
     * <pre>
     * Wieviel MB von "SegmentName" noch belegt werden können.Anmerkung : Im Falle des Log-Segments ("SegmentName = 'log only'") ist dies die Anzahl freier Pages im Log-Segment ABZÜGLICH für "rollbacks" reserviertem Speicher.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue mbfree = 20006;</code>
     */
    public function setMbfree(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->mbfree = $var;
    }

}

