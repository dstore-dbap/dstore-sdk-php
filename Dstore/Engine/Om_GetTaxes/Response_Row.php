<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetTaxes.proto

namespace Dstore\Engine\Om_GetTaxes;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetTaxes.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.StringValue tax_type = 10001;</code>
     */
    private $tax_type = null;
    /**
     * <pre>
     * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tax_type_id = 10002;</code>
     */
    private $tax_type_id = null;
    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    private $valid_to = null;
    /**
     * <pre>
     * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
     * </pre>
     *
     * <code>.dstore.values.DecimalValue tax_rate = 10004;</code>
     */
    private $tax_rate = null;
    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    private $valid_from = null;
    /**
     * <pre>
     * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10006;</code>
     */
    private $surcharge_type_id = null;
    /**
     * <pre>
     * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10007;</code>
     */
    private $surcharge_type_category_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetTaxes::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.StringValue tax_type = 10001;</code>
     */
    public function getTaxType()
    {
        return $this->tax_type;
    }

    /**
     * <pre>
     * Fest codierte Werte : "PaymentTax" ("TaxTypeID = 1"), "ShippingTax" ("TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.StringValue tax_type = 10001;</code>
     */
    public function setTaxType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->tax_type = $var;
    }

    /**
     * <pre>
     * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tax_type_id = 10002;</code>
     */
    public function getTaxTypeId()
    {
        return $this->tax_type_id;
    }

    /**
     * <pre>
     * Fest codierte Werte : "1" für Steuern für Zahlungskosten, "2" für Versandkosten
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tax_type_id = 10002;</code>
     */
    public function setTaxTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tax_type_id = $var;
    }

    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    public function getValidTo()
    {
        return $this->valid_to;
    }

    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt BIS zu diesem Zeitpunkt ("&gt; &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    public function setValidTo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_to = $var;
    }

    /**
     * <pre>
     * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
     * </pre>
     *
     * <code>.dstore.values.DecimalValue tax_rate = 10004;</code>
     */
    public function getTaxRate()
    {
        return $this->tax_rate;
    }

    /**
     * <pre>
     * Der Steuersatz zur Steuerart "TaxTypeID", der im Zeitraum "ValidFrom" bis "ValidTo" für die Aufschlagsart "SurchargeTypeID" gültig ist - es handelt sich immer um eine Prozent-Angabe
     * </pre>
     *
     * <code>.dstore.values.DecimalValue tax_rate = 10004;</code>
     */
    public function setTaxRate(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->tax_rate = $var;
    }

    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }

    /**
     * <pre>
     * Der Steuersatz "TaxRate" gilt AB diesem Zeitpunkt ("&lt;= &#64;Date" falls angegeben)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    public function setValidFrom(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_from = $var;
    }

    /**
     * <pre>
     * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10006;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * ID einer Aufschlagsart, zu dem der Steuersatz "TaxRate" im Zeitraum "ValidFrom" bis "ValidTo" hinterlegt ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10006;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

    /**
     * <pre>
     * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10007;</code>
     */
    public function getSurchargeTypeCategoryId()
    {
        return $this->surcharge_type_category_id;
    }

    /**
     * <pre>
     * ID einer Kategorie für Aufschlagsarten ("4" für "Zahlungskosten" wenn "TaxTypeID = 1", "3" für "Versandkosten" wenn "TaxTypeID = 2")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10007;</code>
     */
    public function setSurchargeTypeCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_category_id = $var;
    }

}

