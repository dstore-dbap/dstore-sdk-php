<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetRegisteredProcedures_Ad.proto

namespace Dstore\Engine\Mi_GetRegisteredProcedures_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetRegisteredProcedures_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID einer registrierten Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10001;</code>
     */
    private $procedure_id = null;
    /**
     * <pre>
     * Es können Einschränkungen bzgl. der Parameter beim Aufruf der Prozedur konfiguriert werden (z.B. mit "mi_ModifyProcExRestForUser_Ad"), sofern hier nicht "0" steht. Ansonsten ist eine Überprüfung möglich - sie ist entweder inaktiv ("1") oder aktiv ("2").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue check_for_execution_restrictions = 10002;</code>
     */
    private $check_for_execution_restrictions = null;
    /**
     * <pre>
     * Sofern jeder Aufruf der Prozedur grundsätzlich protokolliert werden kann (falls nicht, steht hier "0"), gibt der Wert an, was protokolliert werden soll (s. Beschreibung). "1" bedeutet, daß eine Protokollierung nicht durchgeführt wird, aber möglich ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue log_executions = 10003;</code>
     */
    private $log_executions = null;
    /**
     * <pre>
     * Name der Prozedur
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    private $procedure_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetRegisteredProceduresAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID einer registrierten Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10001;</code>
     */
    public function getProcedureId()
    {
        return $this->procedure_id;
    }

    /**
     * <pre>
     * ID einer registrierten Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10001;</code>
     */
    public function setProcedureId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->procedure_id = $var;
    }

    /**
     * <pre>
     * Es können Einschränkungen bzgl. der Parameter beim Aufruf der Prozedur konfiguriert werden (z.B. mit "mi_ModifyProcExRestForUser_Ad"), sofern hier nicht "0" steht. Ansonsten ist eine Überprüfung möglich - sie ist entweder inaktiv ("1") oder aktiv ("2").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue check_for_execution_restrictions = 10002;</code>
     */
    public function getCheckForExecutionRestrictions()
    {
        return $this->check_for_execution_restrictions;
    }

    /**
     * <pre>
     * Es können Einschränkungen bzgl. der Parameter beim Aufruf der Prozedur konfiguriert werden (z.B. mit "mi_ModifyProcExRestForUser_Ad"), sofern hier nicht "0" steht. Ansonsten ist eine Überprüfung möglich - sie ist entweder inaktiv ("1") oder aktiv ("2").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue check_for_execution_restrictions = 10002;</code>
     */
    public function setCheckForExecutionRestrictions(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->check_for_execution_restrictions = $var;
    }

    /**
     * <pre>
     * Sofern jeder Aufruf der Prozedur grundsätzlich protokolliert werden kann (falls nicht, steht hier "0"), gibt der Wert an, was protokolliert werden soll (s. Beschreibung). "1" bedeutet, daß eine Protokollierung nicht durchgeführt wird, aber möglich ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue log_executions = 10003;</code>
     */
    public function getLogExecutions()
    {
        return $this->log_executions;
    }

    /**
     * <pre>
     * Sofern jeder Aufruf der Prozedur grundsätzlich protokolliert werden kann (falls nicht, steht hier "0"), gibt der Wert an, was protokolliert werden soll (s. Beschreibung). "1" bedeutet, daß eine Protokollierung nicht durchgeführt wird, aber möglich ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue log_executions = 10003;</code>
     */
    public function setLogExecutions(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->log_executions = $var;
    }

    /**
     * <pre>
     * Name der Prozedur
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    public function getProcedureName()
    {
        return $this->procedure_name;
    }

    /**
     * <pre>
     * Name der Prozedur
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    public function setProcedureName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->procedure_name = $var;
    }

}

