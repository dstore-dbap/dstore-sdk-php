<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/co_SearchMembers_Pu.proto

namespace Dstore\Engine\Co_SearchMembers_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.co_SearchMembers_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Was enthält "Value1" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value1" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value1_restricted_by_pattern = 10001;</code>
     */
    private $value1_restricted_by_pattern = null;
    /**
     * <pre>
     * Falls "&#64;CommunityBinaryCategoryID" angegeben wurde, steht hier die kleinste "BinaryID", die dem Mitglied "CommunityMemberID" in der Kategorie "&#64;CommunityBinaryCategoryID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_id = 10002;</code>
     */
    private $binary_id = null;
    /**
     * <pre>
     * Wie "Value1RestrictedByPattern" - nur eben auf "Value2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue value2_restricted_by_pattern = 10003;</code>
     */
    private $value2_restricted_by_pattern = null;
    /**
     * <pre>
     * ID eines gefunden Community-Mitglieds
     * </pre>
     *
     * <code>.dstore.values.IntegerValue community_member_id = 10004;</code>
     */
    private $community_member_id = null;
    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID3"
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10005;</code>
     */
    private $value3 = null;
    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 0" ist, ist dieser Wert immer "NULL". Andernfalls kann hier zwar auch "NULL" stehen, dies bedeutet aber dann, daß das Mitglied "offline" ist - ansonsten steht dort der Status aus "CurrentlyUsersOnline".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue online_status = 10006;</code>
     */
    private $online_status = null;
    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID1"
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10007;</code>
     */
    private $value1 = null;
    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID2"
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10008;</code>
     */
    private $value2 = null;
    /**
     * <pre>
     * Was enthält "Value3" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value3" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value3_restricted_by_pattern = 10009;</code>
     */
    private $value3_restricted_by_pattern = null;
    /**
     * <pre>
     * Eigenschaft von "CommunityMemberID" zu dem durch den Schlüssel "IdentifyingCharacteristicID" aus "CommunitySettings" hinterlegten Merkmal. Es trifft "Nickname = &#64;SearchString" bzw. "lower(Nickname) like &#64;SearchString" zu.
     * </pre>
     *
     * <code>.dstore.values.StringValue nickname = 10010;</code>
     */
    private $nickname = null;
    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 1" ist, dann steht hier immer der Wert "0" ("NULL" ist beim Datentyp "bit" nicht möglich). Ansonsten bedeutet ein Wert von "1", daß das Mitglied "CommunityMemberID" gerade "online" ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_online = 10011;</code>
     */
    private $is_online = null;
    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "&gt;="- "&gt;"- "&lt;="- "&lt;"- "&lt;&gt;"- "SOUNDEX"- "LIKE (cs)" (case-sensitive Like-Suche)- "LIKE (ci)" (case-insensitive Like-Suche)- "HAS NO PROPERTY" ("Condition1" ist dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 20001;</code>
     */
    private $operator1 = null;
    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "HAS NO PROPERTY" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 20002;</code>
     */
    private $condition1 = null;
    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist ("NULL", falls "Operator2" auch "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 20003;</code>
     */
    private $condition2 = null;
    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Nur NICHT "NULL", wenn eine in "&#64;ConditionList" angegebene Bedingung die Form "(Wert1|Wert2)", "(Wert1|Wert2]", "[Wert1|Wert2)" oder "[Wert1|Wert2] hat. Mögliche Werte sind dann :- "&lt;="- "&lt;"
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 20004;</code>
     */
    private $operator2 = null;
    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20005;</code>
     */
    private $characteristic_description = null;
    /**
     * <pre>
     * Geschätzte Anzahl Personen, die die Bedingung(en) erfüllen. Ist "CharacteristicID = 0", steht hier die entscheidende Abschätzung (die zu "-760" führte), wieviele Personen wohl ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue estimated_rows_affected = 20006;</code>
     */
    private $estimated_rows_affected = null;
    /**
     * <pre>
     * ID des Merkmals, in dem gesucht werden soll (entweder die "IdentifyingCharacteristicID" oder eine in "&#64;CharacteristicIDList" übergebene ID). "0" bedeutet, daß "EstimatedRowsAffected" die (geschätzte) Anzahl Personen enthält, die ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 20007;</code>
     */
    private $characteristic_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\CoSearchMembersPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Was enthält "Value1" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value1" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value1_restricted_by_pattern = 10001;</code>
     */
    public function getValue1RestrictedByPattern()
    {
        return $this->value1_restricted_by_pattern;
    }

    /**
     * <pre>
     * Was enthält "Value1" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value1" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value1_restricted_by_pattern = 10001;</code>
     */
    public function setValue1RestrictedByPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value1_restricted_by_pattern = $var;
    }

    /**
     * <pre>
     * Falls "&#64;CommunityBinaryCategoryID" angegeben wurde, steht hier die kleinste "BinaryID", die dem Mitglied "CommunityMemberID" in der Kategorie "&#64;CommunityBinaryCategoryID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_id = 10002;</code>
     */
    public function getBinaryId()
    {
        return $this->binary_id;
    }

    /**
     * <pre>
     * Falls "&#64;CommunityBinaryCategoryID" angegeben wurde, steht hier die kleinste "BinaryID", die dem Mitglied "CommunityMemberID" in der Kategorie "&#64;CommunityBinaryCategoryID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_id = 10002;</code>
     */
    public function setBinaryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->binary_id = $var;
    }

    /**
     * <pre>
     * Wie "Value1RestrictedByPattern" - nur eben auf "Value2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue value2_restricted_by_pattern = 10003;</code>
     */
    public function getValue2RestrictedByPattern()
    {
        return $this->value2_restricted_by_pattern;
    }

    /**
     * <pre>
     * Wie "Value1RestrictedByPattern" - nur eben auf "Value2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue value2_restricted_by_pattern = 10003;</code>
     */
    public function setValue2RestrictedByPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value2_restricted_by_pattern = $var;
    }

    /**
     * <pre>
     * ID eines gefunden Community-Mitglieds
     * </pre>
     *
     * <code>.dstore.values.IntegerValue community_member_id = 10004;</code>
     */
    public function getCommunityMemberId()
    {
        return $this->community_member_id;
    }

    /**
     * <pre>
     * ID eines gefunden Community-Mitglieds
     * </pre>
     *
     * <code>.dstore.values.IntegerValue community_member_id = 10004;</code>
     */
    public function setCommunityMemberId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->community_member_id = $var;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID3"
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10005;</code>
     */
    public function getValue3()
    {
        return $this->value3;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID3"
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10005;</code>
     */
    public function setValue3(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value3 = $var;
    }

    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 0" ist, ist dieser Wert immer "NULL". Andernfalls kann hier zwar auch "NULL" stehen, dies bedeutet aber dann, daß das Mitglied "offline" ist - ansonsten steht dort der Status aus "CurrentlyUsersOnline".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue online_status = 10006;</code>
     */
    public function getOnlineStatus()
    {
        return $this->online_status;
    }

    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 0" ist, ist dieser Wert immer "NULL". Andernfalls kann hier zwar auch "NULL" stehen, dies bedeutet aber dann, daß das Mitglied "offline" ist - ansonsten steht dort der Status aus "CurrentlyUsersOnline".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue online_status = 10006;</code>
     */
    public function setOnlineStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->online_status = $var;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID1"
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10007;</code>
     */
    public function getValue1()
    {
        return $this->value1;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID1"
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10007;</code>
     */
    public function setValue1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value1 = $var;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID2"
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10008;</code>
     */
    public function getValue2()
    {
        return $this->value2;
    }

    /**
     * <pre>
     * Eigenschaft des Mitglieds "CommunityMemberID" zum Merkmal "&#64;OutputCharacteristicID2"
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10008;</code>
     */
    public function setValue2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value2 = $var;
    }

    /**
     * <pre>
     * Was enthält "Value3" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value3" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value3_restricted_by_pattern = 10009;</code>
     */
    public function getValue3RestrictedByPattern()
    {
        return $this->value3_restricted_by_pattern;
    }

    /**
     * <pre>
     * Was enthält "Value3" (womöglich wegen Zugriffsbeschränkungen nur einen Teil) ?- NULL : den vollständigen Wert- "#left(&lt;n&gt;)#" : nur die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : nur die LETZTEN n ZeichenAnmerkung : "n = 0" möglich, "Value3" ist dann NULL
     * </pre>
     *
     * <code>.dstore.values.StringValue value3_restricted_by_pattern = 10009;</code>
     */
    public function setValue3RestrictedByPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value3_restricted_by_pattern = $var;
    }

    /**
     * <pre>
     * Eigenschaft von "CommunityMemberID" zu dem durch den Schlüssel "IdentifyingCharacteristicID" aus "CommunitySettings" hinterlegten Merkmal. Es trifft "Nickname = &#64;SearchString" bzw. "lower(Nickname) like &#64;SearchString" zu.
     * </pre>
     *
     * <code>.dstore.values.StringValue nickname = 10010;</code>
     */
    public function getNickname()
    {
        return $this->nickname;
    }

    /**
     * <pre>
     * Eigenschaft von "CommunityMemberID" zu dem durch den Schlüssel "IdentifyingCharacteristicID" aus "CommunitySettings" hinterlegten Merkmal. Es trifft "Nickname = &#64;SearchString" bzw. "lower(Nickname) like &#64;SearchString" zu.
     * </pre>
     *
     * <code>.dstore.values.StringValue nickname = 10010;</code>
     */
    public function setNickname(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->nickname = $var;
    }

    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 1" ist, dann steht hier immer der Wert "0" ("NULL" ist beim Datentyp "bit" nicht möglich). Ansonsten bedeutet ein Wert von "1", daß das Mitglied "CommunityMemberID" gerade "online" ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_online = 10011;</code>
     */
    public function getIsOnline()
    {
        return $this->is_online;
    }

    /**
     * <pre>
     * Falls "&#64;OnlineStatusInsteadOfIsOnline = 1" ist, dann steht hier immer der Wert "0" ("NULL" ist beim Datentyp "bit" nicht möglich). Ansonsten bedeutet ein Wert von "1", daß das Mitglied "CommunityMemberID" gerade "online" ist.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_online = 10011;</code>
     */
    public function setIsOnline(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->is_online = $var;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "&gt;="- "&gt;"- "&lt;="- "&lt;"- "&lt;&gt;"- "SOUNDEX"- "LIKE (cs)" (case-sensitive Like-Suche)- "LIKE (ci)" (case-insensitive Like-Suche)- "HAS NO PROPERTY" ("Condition1" ist dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 20001;</code>
     */
    public function getOperator1()
    {
        return $this->operator1;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "&gt;="- "&gt;"- "&lt;="- "&lt;"- "&lt;&gt;"- "SOUNDEX"- "LIKE (cs)" (case-sensitive Like-Suche)- "LIKE (ci)" (case-insensitive Like-Suche)- "HAS NO PROPERTY" ("Condition1" ist dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 20001;</code>
     */
    public function setOperator1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->operator1 = $var;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "HAS NO PROPERTY" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 20002;</code>
     */
    public function getCondition1()
    {
        return $this->condition1;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "HAS NO PROPERTY" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 20002;</code>
     */
    public function setCondition1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition1 = $var;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist ("NULL", falls "Operator2" auch "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 20003;</code>
     */
    public function getCondition2()
    {
        return $this->condition2;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist ("NULL", falls "Operator2" auch "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 20003;</code>
     */
    public function setCondition2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition2 = $var;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Nur NICHT "NULL", wenn eine in "&#64;ConditionList" angegebene Bedingung die Form "(Wert1|Wert2)", "(Wert1|Wert2]", "[Wert1|Wert2)" oder "[Wert1|Wert2] hat. Mögliche Werte sind dann :- "&lt;="- "&lt;"
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 20004;</code>
     */
    public function getOperator2()
    {
        return $this->operator2;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Nur NICHT "NULL", wenn eine in "&#64;ConditionList" angegebene Bedingung die Form "(Wert1|Wert2)", "(Wert1|Wert2]", "[Wert1|Wert2)" oder "[Wert1|Wert2] hat. Mögliche Werte sind dann :- "&lt;="- "&lt;"
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 20004;</code>
     */
    public function setOperator2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->operator2 = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20005;</code>
     */
    public function getCharacteristicDescription()
    {
        return $this->characteristic_description;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20005;</code>
     */
    public function setCharacteristicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->characteristic_description = $var;
    }

    /**
     * <pre>
     * Geschätzte Anzahl Personen, die die Bedingung(en) erfüllen. Ist "CharacteristicID = 0", steht hier die entscheidende Abschätzung (die zu "-760" führte), wieviele Personen wohl ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue estimated_rows_affected = 20006;</code>
     */
    public function getEstimatedRowsAffected()
    {
        return $this->estimated_rows_affected;
    }

    /**
     * <pre>
     * Geschätzte Anzahl Personen, die die Bedingung(en) erfüllen. Ist "CharacteristicID = 0", steht hier die entscheidende Abschätzung (die zu "-760" führte), wieviele Personen wohl ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue estimated_rows_affected = 20006;</code>
     */
    public function setEstimatedRowsAffected(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->estimated_rows_affected = $var;
    }

    /**
     * <pre>
     * ID des Merkmals, in dem gesucht werden soll (entweder die "IdentifyingCharacteristicID" oder eine in "&#64;CharacteristicIDList" übergebene ID). "0" bedeutet, daß "EstimatedRowsAffected" die (geschätzte) Anzahl Personen enthält, die ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 20007;</code>
     */
    public function getCharacteristicId()
    {
        return $this->characteristic_id;
    }

    /**
     * <pre>
     * ID des Merkmals, in dem gesucht werden soll (entweder die "IdentifyingCharacteristicID" oder eine in "&#64;CharacteristicIDList" übergebene ID). "0" bedeutet, daß "EstimatedRowsAffected" die (geschätzte) Anzahl Personen enthält, die ALLE Bedingungen erfüllen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 20007;</code>
     */
    public function setCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->characteristic_id = $var;
    }

}

