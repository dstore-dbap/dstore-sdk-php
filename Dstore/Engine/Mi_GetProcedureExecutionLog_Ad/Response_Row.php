<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetProcedureExecutionLog_Ad.proto

namespace Dstore\Engine\Mi_GetProcedureExecutionLog_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetProcedureExecutionLog_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Zeitpunkt des Aufrufs der Prozedur
     * </pre>
     *
     * <code>.dstore.values.TimestampValue execution_date_and_time = 10001;</code>
     */
    private $execution_date_and_time = null;
    /**
     * <pre>
     * Ein Wert, der den protokollierten Datensatz in der Tabelle "ProcedureExecutionLog" eindeutig macht (hat also keine weitere Bedeutung; er wird benötigt, um z.B. die Parameter zu diesem Aufruf in "ProcedureExecutionParameters" speichern zu können)
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_value = 10002;</code>
     */
    private $unique_value = null;
    /**
     * <pre>
     * ID eines im "dStore" registrierten Benutzers (aus der Tabelle "UserInfo"), der die Prozedur ausgeführt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_by_user_id = 10003;</code>
     */
    private $executed_by_user_id = null;
    /**
     * <pre>
     * Name des Benutzers "ExecutedByUserID"
     * </pre>
     *
     * <code>.dstore.values.StringValue executed_by_user_name = 10004;</code>
     */
    private $executed_by_user_name = null;
    /**
     * <pre>
     * Auf welcher intern vom ASE verwalteten "Engine" lief der Prozeß "ServerProcessID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue engine_number = 10005;</code>
     */
    private $engine_number = null;
    /**
     * <pre>
     * Welchen "Return-Code" der Aufruf lieferte (z.B. "0" für "erfolgreich")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue return_code = 10006;</code>
     */
    private $return_code = null;
    /**
     * <pre>
     * "ExecutionDateAndTime" als "string" im Format "17.08.2001 17:45:10:510"
     * </pre>
     *
     * <code>.dstore.values.StringValue execution_date_and_time_char = 10007;</code>
     */
    private $execution_date_and_time_char = null;
    /**
     * <pre>
     * Die Server-Prozeß-ID, unter der der Aufruf ausgeführt wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10008;</code>
     */
    private $server_process_id = null;
    /**
     * <pre>
     * Ausführungsdauer des Aufrufs in Millisekunden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue execution_timems = 10009;</code>
     */
    private $execution_timems = null;
    /**
     * <pre>
     * Die Prozedur wurde von diesem Programm aufgerufen
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10010;</code>
     */
    private $program_name = null;
    /**
     * <pre>
     * Auf welchem "NestingLevel" wurde die Prozedur ausgeführt ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_on_nesting_level = 10011;</code>
     */
    private $executed_on_nesting_level = null;
    /**
     * <pre>
     * Der Aufruf erfolgte von diesem "Host"
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10012;</code>
     */
    private $host_name = null;
    /**
     * <pre>
     * Wert, der in "ParameterName" zum Aufrufzeitpunkt angegeben war. Bei einem "Pseudo-Parameter" steht hier der Wert einer Spalte eines Datensatzes der Tabelle, in der zusätzliche Daten übergeben wurden (s. Beschreibung).
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_value = 20004;</code>
     */
    private $parameter_value = null;
    /**
     * <pre>
     * Parameter der durch "&#64;ProcedureID" angegebenen Prozedur ("NULL", wenn es keine geloggten Parameter zum Prozeduraufruf gibt) oder ein Pseudo-Parameter ("&#64;&lt;Abkürzung einer Tabelle, in der Daten übergeben werden können&gt;_&lt;Spalten-Name&gt;_&lt;Datensatznummer&gt;")
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 20005;</code>
     */
    private $parameter_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetProcedureExecutionLogAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Zeitpunkt des Aufrufs der Prozedur
     * </pre>
     *
     * <code>.dstore.values.TimestampValue execution_date_and_time = 10001;</code>
     */
    public function getExecutionDateAndTime()
    {
        return $this->execution_date_and_time;
    }

    /**
     * <pre>
     * Zeitpunkt des Aufrufs der Prozedur
     * </pre>
     *
     * <code>.dstore.values.TimestampValue execution_date_and_time = 10001;</code>
     */
    public function setExecutionDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->execution_date_and_time = $var;
    }

    /**
     * <pre>
     * Ein Wert, der den protokollierten Datensatz in der Tabelle "ProcedureExecutionLog" eindeutig macht (hat also keine weitere Bedeutung; er wird benötigt, um z.B. die Parameter zu diesem Aufruf in "ProcedureExecutionParameters" speichern zu können)
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_value = 10002;</code>
     */
    public function getUniqueValue()
    {
        return $this->unique_value;
    }

    /**
     * <pre>
     * Ein Wert, der den protokollierten Datensatz in der Tabelle "ProcedureExecutionLog" eindeutig macht (hat also keine weitere Bedeutung; er wird benötigt, um z.B. die Parameter zu diesem Aufruf in "ProcedureExecutionParameters" speichern zu können)
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_value = 10002;</code>
     */
    public function setUniqueValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unique_value = $var;
    }

    /**
     * <pre>
     * ID eines im "dStore" registrierten Benutzers (aus der Tabelle "UserInfo"), der die Prozedur ausgeführt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_by_user_id = 10003;</code>
     */
    public function getExecutedByUserId()
    {
        return $this->executed_by_user_id;
    }

    /**
     * <pre>
     * ID eines im "dStore" registrierten Benutzers (aus der Tabelle "UserInfo"), der die Prozedur ausgeführt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_by_user_id = 10003;</code>
     */
    public function setExecutedByUserId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->executed_by_user_id = $var;
    }

    /**
     * <pre>
     * Name des Benutzers "ExecutedByUserID"
     * </pre>
     *
     * <code>.dstore.values.StringValue executed_by_user_name = 10004;</code>
     */
    public function getExecutedByUserName()
    {
        return $this->executed_by_user_name;
    }

    /**
     * <pre>
     * Name des Benutzers "ExecutedByUserID"
     * </pre>
     *
     * <code>.dstore.values.StringValue executed_by_user_name = 10004;</code>
     */
    public function setExecutedByUserName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->executed_by_user_name = $var;
    }

    /**
     * <pre>
     * Auf welcher intern vom ASE verwalteten "Engine" lief der Prozeß "ServerProcessID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue engine_number = 10005;</code>
     */
    public function getEngineNumber()
    {
        return $this->engine_number;
    }

    /**
     * <pre>
     * Auf welcher intern vom ASE verwalteten "Engine" lief der Prozeß "ServerProcessID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue engine_number = 10005;</code>
     */
    public function setEngineNumber(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->engine_number = $var;
    }

    /**
     * <pre>
     * Welchen "Return-Code" der Aufruf lieferte (z.B. "0" für "erfolgreich")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue return_code = 10006;</code>
     */
    public function getReturnCode()
    {
        return $this->return_code;
    }

    /**
     * <pre>
     * Welchen "Return-Code" der Aufruf lieferte (z.B. "0" für "erfolgreich")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue return_code = 10006;</code>
     */
    public function setReturnCode(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->return_code = $var;
    }

    /**
     * <pre>
     * "ExecutionDateAndTime" als "string" im Format "17.08.2001 17:45:10:510"
     * </pre>
     *
     * <code>.dstore.values.StringValue execution_date_and_time_char = 10007;</code>
     */
    public function getExecutionDateAndTimeChar()
    {
        return $this->execution_date_and_time_char;
    }

    /**
     * <pre>
     * "ExecutionDateAndTime" als "string" im Format "17.08.2001 17:45:10:510"
     * </pre>
     *
     * <code>.dstore.values.StringValue execution_date_and_time_char = 10007;</code>
     */
    public function setExecutionDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->execution_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID, unter der der Aufruf ausgeführt wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10008;</code>
     */
    public function getServerProcessId()
    {
        return $this->server_process_id;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID, unter der der Aufruf ausgeführt wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10008;</code>
     */
    public function setServerProcessId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->server_process_id = $var;
    }

    /**
     * <pre>
     * Ausführungsdauer des Aufrufs in Millisekunden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue execution_timems = 10009;</code>
     */
    public function getExecutionTimems()
    {
        return $this->execution_timems;
    }

    /**
     * <pre>
     * Ausführungsdauer des Aufrufs in Millisekunden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue execution_timems = 10009;</code>
     */
    public function setExecutionTimems(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->execution_timems = $var;
    }

    /**
     * <pre>
     * Die Prozedur wurde von diesem Programm aufgerufen
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10010;</code>
     */
    public function getProgramName()
    {
        return $this->program_name;
    }

    /**
     * <pre>
     * Die Prozedur wurde von diesem Programm aufgerufen
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10010;</code>
     */
    public function setProgramName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->program_name = $var;
    }

    /**
     * <pre>
     * Auf welchem "NestingLevel" wurde die Prozedur ausgeführt ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_on_nesting_level = 10011;</code>
     */
    public function getExecutedOnNestingLevel()
    {
        return $this->executed_on_nesting_level;
    }

    /**
     * <pre>
     * Auf welchem "NestingLevel" wurde die Prozedur ausgeführt ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue executed_on_nesting_level = 10011;</code>
     */
    public function setExecutedOnNestingLevel(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->executed_on_nesting_level = $var;
    }

    /**
     * <pre>
     * Der Aufruf erfolgte von diesem "Host"
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10012;</code>
     */
    public function getHostName()
    {
        return $this->host_name;
    }

    /**
     * <pre>
     * Der Aufruf erfolgte von diesem "Host"
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10012;</code>
     */
    public function setHostName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->host_name = $var;
    }

    /**
     * <pre>
     * Wert, der in "ParameterName" zum Aufrufzeitpunkt angegeben war. Bei einem "Pseudo-Parameter" steht hier der Wert einer Spalte eines Datensatzes der Tabelle, in der zusätzliche Daten übergeben wurden (s. Beschreibung).
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_value = 20004;</code>
     */
    public function getParameterValue()
    {
        return $this->parameter_value;
    }

    /**
     * <pre>
     * Wert, der in "ParameterName" zum Aufrufzeitpunkt angegeben war. Bei einem "Pseudo-Parameter" steht hier der Wert einer Spalte eines Datensatzes der Tabelle, in der zusätzliche Daten übergeben wurden (s. Beschreibung).
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_value = 20004;</code>
     */
    public function setParameterValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->parameter_value = $var;
    }

    /**
     * <pre>
     * Parameter der durch "&#64;ProcedureID" angegebenen Prozedur ("NULL", wenn es keine geloggten Parameter zum Prozeduraufruf gibt) oder ein Pseudo-Parameter ("&#64;&lt;Abkürzung einer Tabelle, in der Daten übergeben werden können&gt;_&lt;Spalten-Name&gt;_&lt;Datensatznummer&gt;")
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 20005;</code>
     */
    public function getParameterName()
    {
        return $this->parameter_name;
    }

    /**
     * <pre>
     * Parameter der durch "&#64;ProcedureID" angegebenen Prozedur ("NULL", wenn es keine geloggten Parameter zum Prozeduraufruf gibt) oder ein Pseudo-Parameter ("&#64;&lt;Abkürzung einer Tabelle, in der Daten übergeben werden können&gt;_&lt;Spalten-Name&gt;_&lt;Datensatznummer&gt;")
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 20005;</code>
     */
    public function setParameterName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->parameter_name = $var;
    }

}

