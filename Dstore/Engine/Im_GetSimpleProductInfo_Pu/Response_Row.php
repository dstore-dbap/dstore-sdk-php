<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/im_GetSimpleProductInfo_Pu.proto

namespace Dstore\Engine\Im_GetSimpleProductInfo_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.im_GetSimpleProductInfo_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * "&#64;ProductTreeNodeID" oder die "TreeNodeID" eines direkten Nachfolgers
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10001;</code>
     */
    private $tree_node_id = null;
    /**
     * <pre>
     * ID eines in "&#64;InformationIDList" angegebenen Merkmals.Hinweis : Jede "TreeNodeID - NodeCharacteristicID"-Kombination ist eindeutig, eine Sortierung findet ausdrücklich NICHT statt, es werden nur Datensätze geliefert, bei denen "Value" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10002;</code>
     */
    private $node_characteristic_id = null;
    /**
     * <pre>
     * Aktuelle, direkte, nicht rekursiv ausgewertete und auch nicht "formatierte" Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes ("NodeID") zum Merkmal "NodeCharacteristicID". Hinweis : Datums-Eigenschaften haben daher dasFormat "mm.dd.yyyy" !
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10003;</code>
     */
    private $value = null;
    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    private $value_id = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "Value" innerhalb aller Werte zum Merkmal "NodeCharacteristicID", wobei gilt : eine größere "SortNo" bedeutet eine höhere Priorisierung (d.h. es muß quasi eine absteigende Sortierung angewandt werden).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * "ValueDetails", die zur aktuellen, direkten (nicht rekursiv ausgewerteten) Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes zum Merkmal "NodeCharacteristicID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 20001;</code>
     */
    private $details = null;
    /**
     * <pre>
     * ID einer Eigenschaft von "Binaries", die in "&#64;InformationIDList" angegeben wurde. Hinweis : Zu einer "TreeNodeID - BinaryCharacteristicValueID"-Kombination kann es MEHRERE Datensätze geben, eine Sortierung findet ausdrücklich NICHT statt !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_property_value_id = 30001;</code>
     */
    private $binary_property_value_id = null;
    /**
     * <pre>
     * ID eines "Binaries", das dem zur "TreeNodeID" zugehörigen Artikel-Element zugewiesen ist und die Eigenschaft "BinaryPropertyValueID" besitzt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_code_id = 30002;</code>
     */
    private $binary_code_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\ImGetSimpleProductInfoPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * "&#64;ProductTreeNodeID" oder die "TreeNodeID" eines direkten Nachfolgers
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10001;</code>
     */
    public function getTreeNodeId()
    {
        return $this->tree_node_id;
    }

    /**
     * <pre>
     * "&#64;ProductTreeNodeID" oder die "TreeNodeID" eines direkten Nachfolgers
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10001;</code>
     */
    public function setTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tree_node_id = $var;
    }

    /**
     * <pre>
     * ID eines in "&#64;InformationIDList" angegebenen Merkmals.Hinweis : Jede "TreeNodeID - NodeCharacteristicID"-Kombination ist eindeutig, eine Sortierung findet ausdrücklich NICHT statt, es werden nur Datensätze geliefert, bei denen "Value" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10002;</code>
     */
    public function getNodeCharacteristicId()
    {
        return $this->node_characteristic_id;
    }

    /**
     * <pre>
     * ID eines in "&#64;InformationIDList" angegebenen Merkmals.Hinweis : Jede "TreeNodeID - NodeCharacteristicID"-Kombination ist eindeutig, eine Sortierung findet ausdrücklich NICHT statt, es werden nur Datensätze geliefert, bei denen "Value" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10002;</code>
     */
    public function setNodeCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_characteristic_id = $var;
    }

    /**
     * <pre>
     * Aktuelle, direkte, nicht rekursiv ausgewertete und auch nicht "formatierte" Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes ("NodeID") zum Merkmal "NodeCharacteristicID". Hinweis : Datums-Eigenschaften haben daher dasFormat "mm.dd.yyyy" !
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10003;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     * Aktuelle, direkte, nicht rekursiv ausgewertete und auch nicht "formatierte" Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes ("NodeID") zum Merkmal "NodeCharacteristicID". Hinweis : Datums-Eigenschaften haben daher dasFormat "mm.dd.yyyy" !
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10003;</code>
     */
    public function setValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value = $var;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    public function getValueId()
    {
        return $this->value_id;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    public function setValueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->value_id = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "Value" innerhalb aller Werte zum Merkmal "NodeCharacteristicID", wobei gilt : eine größere "SortNo" bedeutet eine höhere Priorisierung (d.h. es muß quasi eine absteigende Sortierung angewandt werden).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "Value" innerhalb aller Werte zum Merkmal "NodeCharacteristicID", wobei gilt : eine größere "SortNo" bedeutet eine höhere Priorisierung (d.h. es muß quasi eine absteigende Sortierung angewandt werden).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * "ValueDetails", die zur aktuellen, direkten (nicht rekursiv ausgewerteten) Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes zum Merkmal "NodeCharacteristicID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 20001;</code>
     */
    public function getDetails()
    {
        return $this->details;
    }

    /**
     * <pre>
     * "ValueDetails", die zur aktuellen, direkten (nicht rekursiv ausgewerteten) Eigenschaft des zur "TreeNodeID" zugehörigen Artikel-Elementes zum Merkmal "NodeCharacteristicID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 20001;</code>
     */
    public function setDetails(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->details = $var;
    }

    /**
     * <pre>
     * ID einer Eigenschaft von "Binaries", die in "&#64;InformationIDList" angegeben wurde. Hinweis : Zu einer "TreeNodeID - BinaryCharacteristicValueID"-Kombination kann es MEHRERE Datensätze geben, eine Sortierung findet ausdrücklich NICHT statt !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_property_value_id = 30001;</code>
     */
    public function getBinaryPropertyValueId()
    {
        return $this->binary_property_value_id;
    }

    /**
     * <pre>
     * ID einer Eigenschaft von "Binaries", die in "&#64;InformationIDList" angegeben wurde. Hinweis : Zu einer "TreeNodeID - BinaryCharacteristicValueID"-Kombination kann es MEHRERE Datensätze geben, eine Sortierung findet ausdrücklich NICHT statt !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_property_value_id = 30001;</code>
     */
    public function setBinaryPropertyValueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->binary_property_value_id = $var;
    }

    /**
     * <pre>
     * ID eines "Binaries", das dem zur "TreeNodeID" zugehörigen Artikel-Element zugewiesen ist und die Eigenschaft "BinaryPropertyValueID" besitzt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_code_id = 30002;</code>
     */
    public function getBinaryCodeId()
    {
        return $this->binary_code_id;
    }

    /**
     * <pre>
     * ID eines "Binaries", das dem zur "TreeNodeID" zugehörigen Artikel-Element zugewiesen ist und die Eigenschaft "BinaryPropertyValueID" besitzt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue binary_code_id = 30002;</code>
     */
    public function setBinaryCodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->binary_code_id = $var;
    }

}

