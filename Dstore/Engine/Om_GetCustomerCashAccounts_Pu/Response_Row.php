<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetCustomerCashAccounts_Pu.proto

namespace Dstore\Engine\Om_GetCustomerCashAccounts_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetCustomerCashAccounts_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Status des Kontos (vom Typ "CashAccountTypeID") von "PersonID" :- "0" : Das Konto ist gültig und aktiv- "1" : Das Konto ist für ABbuchungen gesperrt, aber ZUbuchungen sind erlaubt- "2":  Das Konto ist inaktiv (es sind KEINE Transaktionen erlaubt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_status = 10001;</code>
     */
    private $account_status = null;
    /**
     * <pre>
     * Die Bezeichnung des Kontotyps
     * </pre>
     *
     * <code>.dstore.values.StringValue cash_account_type = 10002;</code>
     */
    private $cash_account_type = null;
    /**
     * <pre>
     * ID der identifizierten Person (der das Konto vom Typ "CashAccountTypeID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * Die ID eines Kontotyps. Anmerkung : Eine Person kann immer nur ein Konto eines Typs besitzen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue cash_account_type_id = 10004;</code>
     */
    private $cash_account_type_id = null;
    /**
     * <pre>
     * Der Minimalbetrag auf den der Stand des Kontos (vom Typ "CashAccountTypeID") von "PersonID" fallen darf
     * </pre>
     *
     * <code>.dstore.values.DecimalValue min_account_balance = 10005;</code>
     */
    private $min_account_balance = null;
    /**
     * <pre>
     * ID einer Währung ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der das Konto geführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10006;</code>
     */
    private $currency_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetCustomerCashAccountsPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Status des Kontos (vom Typ "CashAccountTypeID") von "PersonID" :- "0" : Das Konto ist gültig und aktiv- "1" : Das Konto ist für ABbuchungen gesperrt, aber ZUbuchungen sind erlaubt- "2":  Das Konto ist inaktiv (es sind KEINE Transaktionen erlaubt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_status = 10001;</code>
     */
    public function getAccountStatus()
    {
        return $this->account_status;
    }

    /**
     * <pre>
     * Status des Kontos (vom Typ "CashAccountTypeID") von "PersonID" :- "0" : Das Konto ist gültig und aktiv- "1" : Das Konto ist für ABbuchungen gesperrt, aber ZUbuchungen sind erlaubt- "2":  Das Konto ist inaktiv (es sind KEINE Transaktionen erlaubt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_status = 10001;</code>
     */
    public function setAccountStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->account_status = $var;
    }

    /**
     * <pre>
     * Die Bezeichnung des Kontotyps
     * </pre>
     *
     * <code>.dstore.values.StringValue cash_account_type = 10002;</code>
     */
    public function getCashAccountType()
    {
        return $this->cash_account_type;
    }

    /**
     * <pre>
     * Die Bezeichnung des Kontotyps
     * </pre>
     *
     * <code>.dstore.values.StringValue cash_account_type = 10002;</code>
     */
    public function setCashAccountType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->cash_account_type = $var;
    }

    /**
     * <pre>
     * ID der identifizierten Person (der das Konto vom Typ "CashAccountTypeID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID der identifizierten Person (der das Konto vom Typ "CashAccountTypeID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * Die ID eines Kontotyps. Anmerkung : Eine Person kann immer nur ein Konto eines Typs besitzen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue cash_account_type_id = 10004;</code>
     */
    public function getCashAccountTypeId()
    {
        return $this->cash_account_type_id;
    }

    /**
     * <pre>
     * Die ID eines Kontotyps. Anmerkung : Eine Person kann immer nur ein Konto eines Typs besitzen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue cash_account_type_id = 10004;</code>
     */
    public function setCashAccountTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->cash_account_type_id = $var;
    }

    /**
     * <pre>
     * Der Minimalbetrag auf den der Stand des Kontos (vom Typ "CashAccountTypeID") von "PersonID" fallen darf
     * </pre>
     *
     * <code>.dstore.values.DecimalValue min_account_balance = 10005;</code>
     */
    public function getMinAccountBalance()
    {
        return $this->min_account_balance;
    }

    /**
     * <pre>
     * Der Minimalbetrag auf den der Stand des Kontos (vom Typ "CashAccountTypeID") von "PersonID" fallen darf
     * </pre>
     *
     * <code>.dstore.values.DecimalValue min_account_balance = 10005;</code>
     */
    public function setMinAccountBalance(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->min_account_balance = $var;
    }

    /**
     * <pre>
     * ID einer Währung ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der das Konto geführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10006;</code>
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * <pre>
     * ID einer Währung ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der das Konto geführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10006;</code>
     */
    public function setCurrencyId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->currency_id = $var;
    }

}

