<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetCampaignPeriods_Ad.proto

namespace Dstore\Engine\Om_GetCampaignPeriods_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetCampaignPeriods_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID einer Verkaufs-Aktion (identisch mit "&#64;CampaignID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_id = 10001;</code>
     */
    private $campaign_id = null;
    /**
     * <pre>
     * Ende des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_end_date_and_time = 10002;</code>
     */
    private $period_end_date_and_time = null;
    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10003;</code>
     */
    private $period_definition_name = null;
    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition, aufgrund der der Zeitraum "PeriodStartDateAndTime" bis "PeriodEndDateAndTime" generiert wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10004;</code>
     */
    private $period_definition_id = null;
    /**
     * <pre>
     * "PeriodEndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_end_date_and_time_char = 10005;</code>
     */
    private $period_end_date_and_time_char = null;
    /**
     * <pre>
     * Summe von Status-Werten für den Gültigkeitszeitraum (s. "om_GetCamPeriodStatusValues_Ad"), wie z.B. "132", was "vom Benutzer geänderter Zeitraum" ("4") und "aktiv" ("128") bedeutet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_status = 10006;</code>
     */
    private $period_status = null;
    /**
     * <pre>
     * Beginn des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_start_date_and_time = 10007;</code>
     */
    private $period_start_date_and_time = null;
    /**
     * <pre>
     * "PeriodStartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_start_date_and_time_char = 10008;</code>
     */
    private $period_start_date_and_time_char = null;
    /**
     * <pre>
     * Status der Verkaufs-Aktion "CampaignID" (derzeit nur "0" - für "inaktiv" - und "1" - für "aktiv" - möglich. Weitere Status wie "aktiv, nur Test" in Zukunft möglich)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue active = 20001;</code>
     */
    private $active = null;
    /**
     * <pre>
     * Beschreibung (kann Kommentar, Zeitraum etc. enthalten) der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_description = 20003;</code>
     */
    private $campaign_description = null;
    /**
     * <pre>
     * ID des "Typs" (von Verkaufs-Aktionen), der "CampaignID" angehört. Anmerkung : Typen sind dazu da, den (dStore-)Benutzer-Kreis zu definieren, von dem die Aktion nur verwendet werden darf (s. "om_GetCampaignTypeRules_Ad").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_type_id = 20004;</code>
     */
    private $campaign_type_id = null;
    /**
     * <pre>
     * Bezeichnung der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_name = 20007;</code>
     */
    private $campaign_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetCampaignPeriodsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID einer Verkaufs-Aktion (identisch mit "&#64;CampaignID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_id = 10001;</code>
     */
    public function getCampaignId()
    {
        return $this->campaign_id;
    }

    /**
     * <pre>
     * ID einer Verkaufs-Aktion (identisch mit "&#64;CampaignID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_id = 10001;</code>
     */
    public function setCampaignId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->campaign_id = $var;
    }

    /**
     * <pre>
     * Ende des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_end_date_and_time = 10002;</code>
     */
    public function getPeriodEndDateAndTime()
    {
        return $this->period_end_date_and_time;
    }

    /**
     * <pre>
     * Ende des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_end_date_and_time = 10002;</code>
     */
    public function setPeriodEndDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->period_end_date_and_time = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10003;</code>
     */
    public function getPeriodDefinitionName()
    {
        return $this->period_definition_name;
    }

    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10003;</code>
     */
    public function setPeriodDefinitionName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->period_definition_name = $var;
    }

    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition, aufgrund der der Zeitraum "PeriodStartDateAndTime" bis "PeriodEndDateAndTime" generiert wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10004;</code>
     */
    public function getPeriodDefinitionId()
    {
        return $this->period_definition_id;
    }

    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition, aufgrund der der Zeitraum "PeriodStartDateAndTime" bis "PeriodEndDateAndTime" generiert wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10004;</code>
     */
    public function setPeriodDefinitionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->period_definition_id = $var;
    }

    /**
     * <pre>
     * "PeriodEndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_end_date_and_time_char = 10005;</code>
     */
    public function getPeriodEndDateAndTimeChar()
    {
        return $this->period_end_date_and_time_char;
    }

    /**
     * <pre>
     * "PeriodEndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_end_date_and_time_char = 10005;</code>
     */
    public function setPeriodEndDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->period_end_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Summe von Status-Werten für den Gültigkeitszeitraum (s. "om_GetCamPeriodStatusValues_Ad"), wie z.B. "132", was "vom Benutzer geänderter Zeitraum" ("4") und "aktiv" ("128") bedeutet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_status = 10006;</code>
     */
    public function getPeriodStatus()
    {
        return $this->period_status;
    }

    /**
     * <pre>
     * Summe von Status-Werten für den Gültigkeitszeitraum (s. "om_GetCamPeriodStatusValues_Ad"), wie z.B. "132", was "vom Benutzer geänderter Zeitraum" ("4") und "aktiv" ("128") bedeutet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_status = 10006;</code>
     */
    public function setPeriodStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->period_status = $var;
    }

    /**
     * <pre>
     * Beginn des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_start_date_and_time = 10007;</code>
     */
    public function getPeriodStartDateAndTime()
    {
        return $this->period_start_date_and_time;
    }

    /**
     * <pre>
     * Beginn des Gültigkeitszeitraums
     * </pre>
     *
     * <code>.dstore.values.TimestampValue period_start_date_and_time = 10007;</code>
     */
    public function setPeriodStartDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->period_start_date_and_time = $var;
    }

    /**
     * <pre>
     * "PeriodStartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_start_date_and_time_char = 10008;</code>
     */
    public function getPeriodStartDateAndTimeChar()
    {
        return $this->period_start_date_and_time_char;
    }

    /**
     * <pre>
     * "PeriodStartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_start_date_and_time_char = 10008;</code>
     */
    public function setPeriodStartDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->period_start_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Status der Verkaufs-Aktion "CampaignID" (derzeit nur "0" - für "inaktiv" - und "1" - für "aktiv" - möglich. Weitere Status wie "aktiv, nur Test" in Zukunft möglich)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue active = 20001;</code>
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * <pre>
     * Status der Verkaufs-Aktion "CampaignID" (derzeit nur "0" - für "inaktiv" - und "1" - für "aktiv" - möglich. Weitere Status wie "aktiv, nur Test" in Zukunft möglich)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue active = 20001;</code>
     */
    public function setActive(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->active = $var;
    }

    /**
     * <pre>
     * Beschreibung (kann Kommentar, Zeitraum etc. enthalten) der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_description = 20003;</code>
     */
    public function getCampaignDescription()
    {
        return $this->campaign_description;
    }

    /**
     * <pre>
     * Beschreibung (kann Kommentar, Zeitraum etc. enthalten) der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_description = 20003;</code>
     */
    public function setCampaignDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->campaign_description = $var;
    }

    /**
     * <pre>
     * ID des "Typs" (von Verkaufs-Aktionen), der "CampaignID" angehört. Anmerkung : Typen sind dazu da, den (dStore-)Benutzer-Kreis zu definieren, von dem die Aktion nur verwendet werden darf (s. "om_GetCampaignTypeRules_Ad").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_type_id = 20004;</code>
     */
    public function getCampaignTypeId()
    {
        return $this->campaign_type_id;
    }

    /**
     * <pre>
     * ID des "Typs" (von Verkaufs-Aktionen), der "CampaignID" angehört. Anmerkung : Typen sind dazu da, den (dStore-)Benutzer-Kreis zu definieren, von dem die Aktion nur verwendet werden darf (s. "om_GetCampaignTypeRules_Ad").
     * </pre>
     *
     * <code>.dstore.values.IntegerValue campaign_type_id = 20004;</code>
     */
    public function setCampaignTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->campaign_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_name = 20007;</code>
     */
    public function getCampaignName()
    {
        return $this->campaign_name;
    }

    /**
     * <pre>
     * Bezeichnung der Verkaufs-Aktion "CampaignID"
     * </pre>
     *
     * <code>.dstore.values.StringValue campaign_name = 20007;</code>
     */
    public function setCampaignName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->campaign_name = $var;
    }

}

