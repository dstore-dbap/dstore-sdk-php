<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/pm_GetGroupsForOnePerson_Pu.proto

namespace Dstore\Engine\Pm_GetGroupsForOnePerson_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.pm_GetGroupsForOnePerson_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10001;</code>
     */
    private $group_description = null;
    /**
     * <pre>
     * ID einer (Gruppen-)Bedingung (siehe "pm_GetGroupConditions_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10002;</code>
     */
    private $condition_id = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "GroupID" innerhalb aller Gruppen (hohe Nummer = hohe Priorität)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10003;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * ID eines Personen-Typs. Es können nur Personen diesen Typs in der Gruppe "GroupID" sein. Ausnahme : Der spezielle Personentyp mit der ID "0" ("Personentyp unabhängig") - in diesem Fall ist die Gruppe nicht nur einem einzigen Personentyp vorbehalten.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10004;</code>
     */
    private $person_type_id = null;
    /**
     * <pre>
     * ID einer Personen-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10005;</code>
     */
    private $group_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\PmGetGroupsForOnePersonPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10001;</code>
     */
    public function getGroupDescription()
    {
        return $this->group_description;
    }

    /**
     * <pre>
     * Bezeichnung der Gruppe "GroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue group_description = 10001;</code>
     */
    public function setGroupDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->group_description = $var;
    }

    /**
     * <pre>
     * ID einer (Gruppen-)Bedingung (siehe "pm_GetGroupConditions_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10002;</code>
     */
    public function getConditionId()
    {
        return $this->condition_id;
    }

    /**
     * <pre>
     * ID einer (Gruppen-)Bedingung (siehe "pm_GetGroupConditions_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10002;</code>
     */
    public function setConditionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->condition_id = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "GroupID" innerhalb aller Gruppen (hohe Nummer = hohe Priorität)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10003;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "GroupID" innerhalb aller Gruppen (hohe Nummer = hohe Priorität)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10003;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * ID eines Personen-Typs. Es können nur Personen diesen Typs in der Gruppe "GroupID" sein. Ausnahme : Der spezielle Personentyp mit der ID "0" ("Personentyp unabhängig") - in diesem Fall ist die Gruppe nicht nur einem einzigen Personentyp vorbehalten.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10004;</code>
     */
    public function getPersonTypeId()
    {
        return $this->person_type_id;
    }

    /**
     * <pre>
     * ID eines Personen-Typs. Es können nur Personen diesen Typs in der Gruppe "GroupID" sein. Ausnahme : Der spezielle Personentyp mit der ID "0" ("Personentyp unabhängig") - in diesem Fall ist die Gruppe nicht nur einem einzigen Personentyp vorbehalten.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10004;</code>
     */
    public function setPersonTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_type_id = $var;
    }

    /**
     * <pre>
     * ID einer Personen-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10005;</code>
     */
    public function getGroupId()
    {
        return $this->group_id;
    }

    /**
     * <pre>
     * ID einer Personen-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue group_id = 10005;</code>
     */
    public function setGroupId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->group_id = $var;
    }

}

