<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetPrepaidCodes_Ad.proto

namespace Dstore\Engine\Om_GetPrepaidCodes_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetPrepaidCodes_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID des Auftrags, durch den der Code erzeugt wurde Anmerkung : Hier kann und wird für sehr alte Codes "NULL" stehen, da die Aufträge (Tabelle "Orders") nur begrenzt im dStore gespeichert werden (s. "Settings"-Eintrag "MaxMonthsInBillsAndOrders") !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue generated_by_order_id = 10001;</code>
     */
    private $generated_by_order_id = null;
    /**
     * <pre>
     * Wann der Code generiert wurde. S. Anmerkung zu "GeneratedByOrderID".
     * </pre>
     *
     * <code>.dstore.values.TimestampValue generated_at_date_and_time = 10002;</code>
     */
    private $generated_at_date_and_time = null;
    /**
     * <pre>
     * Die ID einer Transaction, die für die Einlösung des Codes verwendet wurde (s. "om_GetCashAccTransactions_Ad"). Nicht eingelöste Codes ("CodeAlreadyUsed = 0") haben hier natürlich den Wert "NULL".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_for_transaction_id = 10003;</code>
     */
    private $used_for_transaction_id = null;
    /**
     * <pre>
     * Gibt an, ob "PrepaidCode" schon eingelöst wurde ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue code_already_used = 10004;</code>
     */
    private $code_already_used = null;
    /**
     * <pre>
     * Ein Prepaid-Code
     * </pre>
     *
     * <code>.dstore.values.StringValue prepaid_code = 10005;</code>
     */
    private $prepaid_code = null;
    /**
     * <pre>
     * Der "Geldwert" des Codes in der durch "CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue prepaid_value = 10006;</code>
     */
    private $prepaid_value = null;
    /**
     * <pre>
     * Der Zeitpunkt bis zu dem der Code gültig ist, also eingelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.TimestampValue code_valid_until = 10007;</code>
     */
    private $code_valid_until = null;
    /**
     * <pre>
     * Die ID der Währung  ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der "PrepaidValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10008;</code>
     */
    private $currency_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetPrepaidCodesAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID des Auftrags, durch den der Code erzeugt wurde Anmerkung : Hier kann und wird für sehr alte Codes "NULL" stehen, da die Aufträge (Tabelle "Orders") nur begrenzt im dStore gespeichert werden (s. "Settings"-Eintrag "MaxMonthsInBillsAndOrders") !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue generated_by_order_id = 10001;</code>
     */
    public function getGeneratedByOrderId()
    {
        return $this->generated_by_order_id;
    }

    /**
     * <pre>
     * ID des Auftrags, durch den der Code erzeugt wurde Anmerkung : Hier kann und wird für sehr alte Codes "NULL" stehen, da die Aufträge (Tabelle "Orders") nur begrenzt im dStore gespeichert werden (s. "Settings"-Eintrag "MaxMonthsInBillsAndOrders") !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue generated_by_order_id = 10001;</code>
     */
    public function setGeneratedByOrderId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->generated_by_order_id = $var;
    }

    /**
     * <pre>
     * Wann der Code generiert wurde. S. Anmerkung zu "GeneratedByOrderID".
     * </pre>
     *
     * <code>.dstore.values.TimestampValue generated_at_date_and_time = 10002;</code>
     */
    public function getGeneratedAtDateAndTime()
    {
        return $this->generated_at_date_and_time;
    }

    /**
     * <pre>
     * Wann der Code generiert wurde. S. Anmerkung zu "GeneratedByOrderID".
     * </pre>
     *
     * <code>.dstore.values.TimestampValue generated_at_date_and_time = 10002;</code>
     */
    public function setGeneratedAtDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->generated_at_date_and_time = $var;
    }

    /**
     * <pre>
     * Die ID einer Transaction, die für die Einlösung des Codes verwendet wurde (s. "om_GetCashAccTransactions_Ad"). Nicht eingelöste Codes ("CodeAlreadyUsed = 0") haben hier natürlich den Wert "NULL".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_for_transaction_id = 10003;</code>
     */
    public function getUsedForTransactionId()
    {
        return $this->used_for_transaction_id;
    }

    /**
     * <pre>
     * Die ID einer Transaction, die für die Einlösung des Codes verwendet wurde (s. "om_GetCashAccTransactions_Ad"). Nicht eingelöste Codes ("CodeAlreadyUsed = 0") haben hier natürlich den Wert "NULL".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_for_transaction_id = 10003;</code>
     */
    public function setUsedForTransactionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->used_for_transaction_id = $var;
    }

    /**
     * <pre>
     * Gibt an, ob "PrepaidCode" schon eingelöst wurde ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue code_already_used = 10004;</code>
     */
    public function getCodeAlreadyUsed()
    {
        return $this->code_already_used;
    }

    /**
     * <pre>
     * Gibt an, ob "PrepaidCode" schon eingelöst wurde ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue code_already_used = 10004;</code>
     */
    public function setCodeAlreadyUsed(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->code_already_used = $var;
    }

    /**
     * <pre>
     * Ein Prepaid-Code
     * </pre>
     *
     * <code>.dstore.values.StringValue prepaid_code = 10005;</code>
     */
    public function getPrepaidCode()
    {
        return $this->prepaid_code;
    }

    /**
     * <pre>
     * Ein Prepaid-Code
     * </pre>
     *
     * <code>.dstore.values.StringValue prepaid_code = 10005;</code>
     */
    public function setPrepaidCode(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->prepaid_code = $var;
    }

    /**
     * <pre>
     * Der "Geldwert" des Codes in der durch "CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue prepaid_value = 10006;</code>
     */
    public function getPrepaidValue()
    {
        return $this->prepaid_value;
    }

    /**
     * <pre>
     * Der "Geldwert" des Codes in der durch "CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue prepaid_value = 10006;</code>
     */
    public function setPrepaidValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->prepaid_value = $var;
    }

    /**
     * <pre>
     * Der Zeitpunkt bis zu dem der Code gültig ist, also eingelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.TimestampValue code_valid_until = 10007;</code>
     */
    public function getCodeValidUntil()
    {
        return $this->code_valid_until;
    }

    /**
     * <pre>
     * Der Zeitpunkt bis zu dem der Code gültig ist, also eingelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.TimestampValue code_valid_until = 10007;</code>
     */
    public function setCodeValidUntil(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->code_valid_until = $var;
    }

    /**
     * <pre>
     * Die ID der Währung  ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der "PrepaidValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10008;</code>
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * <pre>
     * Die ID der Währung  ("UnitID" aus der Kategorie "Währung", mögliche Werte s. "mi_GetUnits"), in der "PrepaidValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10008;</code>
     */
    public function setCurrencyId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->currency_id = $var;
    }

}

