<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetCashAccTransactTypes_Ad.proto

namespace Dstore\Engine\Om_GetCashAccTransactTypes_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetCashAccTransactTypes_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Die Bezeichnung der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.StringValue transaction_type = 10001;</code>
     */
    private $transaction_type = null;
    /**
     * <pre>
     * Gibt an, ob Transaktionen dieses Typs vom Inhaber eines Kontos getätigt werden können oder ob dies nur administrativ möglich ist. Mögliche Werte :- "0" : Kontoinhaber können das NICHT- "1" : Kontoinhaber DÜRFEN das
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_holder_transactions = 10002;</code>
     */
    private $account_holder_transactions = null;
    /**
     * <pre>
     * Die ID der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.IntegerValue transaction_type_id = 10003;</code>
     */
    private $transaction_type_id = null;
    /**
     * <pre>
     * Gibt an, welches Vorzeichen Transaktionen dieser Transaktionsart haben :- "0" : Negative Vorzeichen (ABbuchungen)- "1" : Positive Vorzeichen (ZUbuchungen)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue positive_transaction_values = 10004;</code>
     */
    private $positive_transaction_values = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetCashAccTransactTypesAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Die Bezeichnung der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.StringValue transaction_type = 10001;</code>
     */
    public function getTransactionType()
    {
        return $this->transaction_type;
    }

    /**
     * <pre>
     * Die Bezeichnung der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.StringValue transaction_type = 10001;</code>
     */
    public function setTransactionType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->transaction_type = $var;
    }

    /**
     * <pre>
     * Gibt an, ob Transaktionen dieses Typs vom Inhaber eines Kontos getätigt werden können oder ob dies nur administrativ möglich ist. Mögliche Werte :- "0" : Kontoinhaber können das NICHT- "1" : Kontoinhaber DÜRFEN das
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_holder_transactions = 10002;</code>
     */
    public function getAccountHolderTransactions()
    {
        return $this->account_holder_transactions;
    }

    /**
     * <pre>
     * Gibt an, ob Transaktionen dieses Typs vom Inhaber eines Kontos getätigt werden können oder ob dies nur administrativ möglich ist. Mögliche Werte :- "0" : Kontoinhaber können das NICHT- "1" : Kontoinhaber DÜRFEN das
     * </pre>
     *
     * <code>.dstore.values.IntegerValue account_holder_transactions = 10002;</code>
     */
    public function setAccountHolderTransactions(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->account_holder_transactions = $var;
    }

    /**
     * <pre>
     * Die ID der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.IntegerValue transaction_type_id = 10003;</code>
     */
    public function getTransactionTypeId()
    {
        return $this->transaction_type_id;
    }

    /**
     * <pre>
     * Die ID der Transaktionsart
     * </pre>
     *
     * <code>.dstore.values.IntegerValue transaction_type_id = 10003;</code>
     */
    public function setTransactionTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->transaction_type_id = $var;
    }

    /**
     * <pre>
     * Gibt an, welches Vorzeichen Transaktionen dieser Transaktionsart haben :- "0" : Negative Vorzeichen (ABbuchungen)- "1" : Positive Vorzeichen (ZUbuchungen)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue positive_transaction_values = 10004;</code>
     */
    public function getPositiveTransactionValues()
    {
        return $this->positive_transaction_values;
    }

    /**
     * <pre>
     * Gibt an, welches Vorzeichen Transaktionen dieser Transaktionsart haben :- "0" : Negative Vorzeichen (ABbuchungen)- "1" : Positive Vorzeichen (ZUbuchungen)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue positive_transaction_values = 10004;</code>
     */
    public function setPositiveTransactionValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->positive_transaction_values = $var;
    }

}

