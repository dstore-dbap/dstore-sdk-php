<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetCurrentLocks_Ad.proto

namespace Dstore\Engine\Mi_GetCurrentLocks_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetCurrentLocks_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID der Page (der Tabelle "TableName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue page_id = 10001;</code>
     */
    private $page_id = null;
    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10002;</code>
     */
    private $login_name = null;
    /**
     * <pre>
     * Name der Tabelle (in der Datenbank "DatabaseName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10003;</code>
     */
    private $table_name = null;
    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10004;</code>
     */
    private $process_status = null;
    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10005;</code>
     */
    private $command = null;
    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10006;</code>
     */
    private $blocking_process_id = null;
    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10007;</code>
     */
    private $server_process_id = null;
    /**
     * <pre>
     * Name der Datenbank, auf der der Prozeß gerade aktiv ist
     * </pre>
     *
     * <code>.dstore.values.StringValue database_name = 10008;</code>
     */
    private $database_name = null;
    /**
     * <pre>
     * Durch was wurde der Lock verursacht (Cursor, Non Cursor etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_class = 10009;</code>
     */
    private $lock_class = null;
    /**
     * <pre>
     * Art des Locks ("Sh_table", "Ex_page", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_type = 10010;</code>
     */
    private $lock_type = null;
    /**
     * <pre>
     * Name des Host-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10011;</code>
     */
    private $host_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetCurrentLocksAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID der Page (der Tabelle "TableName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue page_id = 10001;</code>
     */
    public function getPageId()
    {
        return $this->page_id;
    }

    /**
     * <pre>
     * ID der Page (der Tabelle "TableName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue page_id = 10001;</code>
     */
    public function setPageId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->page_id = $var;
    }

    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10002;</code>
     */
    public function getLoginName()
    {
        return $this->login_name;
    }

    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10002;</code>
     */
    public function setLoginName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->login_name = $var;
    }

    /**
     * <pre>
     * Name der Tabelle (in der Datenbank "DatabaseName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10003;</code>
     */
    public function getTableName()
    {
        return $this->table_name;
    }

    /**
     * <pre>
     * Name der Tabelle (in der Datenbank "DatabaseName"), die gerade ge"locked" ist/wird
     * </pre>
     *
     * <code>.dstore.values.StringValue table_name = 10003;</code>
     */
    public function setTableName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->table_name = $var;
    }

    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10004;</code>
     */
    public function getProcessStatus()
    {
        return $this->process_status;
    }

    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10004;</code>
     */
    public function setProcessStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->process_status = $var;
    }

    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10005;</code>
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10005;</code>
     */
    public function setCommand(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->command = $var;
    }

    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10006;</code>
     */
    public function getBlockingProcessId()
    {
        return $this->blocking_process_id;
    }

    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10006;</code>
     */
    public function setBlockingProcessId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->blocking_process_id = $var;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10007;</code>
     */
    public function getServerProcessId()
    {
        return $this->server_process_id;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10007;</code>
     */
    public function setServerProcessId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->server_process_id = $var;
    }

    /**
     * <pre>
     * Name der Datenbank, auf der der Prozeß gerade aktiv ist
     * </pre>
     *
     * <code>.dstore.values.StringValue database_name = 10008;</code>
     */
    public function getDatabaseName()
    {
        return $this->database_name;
    }

    /**
     * <pre>
     * Name der Datenbank, auf der der Prozeß gerade aktiv ist
     * </pre>
     *
     * <code>.dstore.values.StringValue database_name = 10008;</code>
     */
    public function setDatabaseName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->database_name = $var;
    }

    /**
     * <pre>
     * Durch was wurde der Lock verursacht (Cursor, Non Cursor etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_class = 10009;</code>
     */
    public function getLockClass()
    {
        return $this->lock_class;
    }

    /**
     * <pre>
     * Durch was wurde der Lock verursacht (Cursor, Non Cursor etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_class = 10009;</code>
     */
    public function setLockClass(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->lock_class = $var;
    }

    /**
     * <pre>
     * Art des Locks ("Sh_table", "Ex_page", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_type = 10010;</code>
     */
    public function getLockType()
    {
        return $this->lock_type;
    }

    /**
     * <pre>
     * Art des Locks ("Sh_table", "Ex_page", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue lock_type = 10010;</code>
     */
    public function setLockType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->lock_type = $var;
    }

    /**
     * <pre>
     * Name des Host-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10011;</code>
     */
    public function getHostName()
    {
        return $this->host_name;
    }

    /**
     * <pre>
     * Name des Host-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10011;</code>
     */
    public function setHostName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->host_name = $var;
    }

}

