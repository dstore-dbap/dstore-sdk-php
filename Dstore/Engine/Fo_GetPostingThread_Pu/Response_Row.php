<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/fo_GetPostingThread_Pu.proto

namespace Dstore\Engine\Fo_GetPostingThread_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.fo_GetPostingThread_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Wurde das Posting vor "HoursAfterPostingsAreRegardedAsRead" (Eintrag in "ForumSettings") Stunden verfaßt ODER gibt es zur Person, die diese Prozedur aufruft, einen Eintrag in "ReadPostingsPerPerson", steht hier der Wert "1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue already_read = 10001;</code>
     */
    private $already_read = null;
    /**
     * <pre>
     * Hier erscheint der Beitrag selbst, falls er weniger als 256 Zeichen enthält UND "UseSmallBody" in "ForumSettings" auf "1" gesetzt UND "&#64;IncludePostingBodies = 1" ist. D.h. mindestens EINE der Rückgabespalten "SmallBody" und "Body" ist IMMER "NULL".
     * </pre>
     *
     * <code>.dstore.values.StringValue small_body = 10002;</code>
     */
    private $small_body = null;
    /**
     * <pre>
     * ID eines Postings
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10003;</code>
     */
    private $posting_id = null;
    /**
     * <pre>
     * Auf welcher "Ebene" befindet sich "PostingID" im zurückgegebenen "Thread". (Für das Wurzel-Element steht hier "1", für die direkten Antworten die "2" usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10004;</code>
     */
    private $level_no = null;
    /**
     * <pre>
     * ID des Postings, auf das "PostingID" eine Antwort darstellt. Falls gleich "PostingID", handelt es sich um einen Haupt-Beitrag, sprich "MainPosting"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue reply_to_posting_id = 10005;</code>
     */
    private $reply_to_posting_id = null;
    /**
     * <pre>
     * Der Titel des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue subject = 10006;</code>
     */
    private $subject = null;
    /**
     * <pre>
     * Wieviele Antworten hat "PostingID" (inkl. Antworten auf Antworten usw.). Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identifizierte Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue postings_in_thread = 10007;</code>
     */
    private $postings_in_thread = null;
    /**
     * <pre>
     * eMail des Verfassers "Author"
     * </pre>
     *
     * <code>.dstore.values.StringValue e_mail_of_author = 10008;</code>
     */
    private $e_mail_of_author = null;
    /**
     * <pre>
     * (Person)ID des Verfassers "Author" - "0" bedeutet, daß der Verfasser anonym ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10009;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * Ist der "Teil-Baum", der mit "PostingID" beginnt "aufgeklappt", d.h. werden Nachfolger (sprich "Antworten") angezeigt ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_expanded = 10010;</code>
     */
    private $is_expanded = null;
    /**
     * <pre>
     * ID des Haupt-Beitrages zu "PostingID" (also sozusagen das Wurzel-Element des gesamten "Threads" zu dem "PostingID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue main_posting_id = 10011;</code>
     */
    private $main_posting_id = null;
    /**
     * <pre>
     * Sind "Binaries" zu dem Posting "PostingID" vorhanden ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_binaries = 10012;</code>
     */
    private $has_binaries = null;
    /**
     * <pre>
     * Sichtbarkeits-Status des Postings "PostingID" - mögliche Werte : siehe "fo_GetPostingVisibilities"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visible = 10013;</code>
     */
    private $visible = null;
    /**
     * <pre>
     * Name des Verfassers des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue author = 10014;</code>
     */
    private $author = null;
    /**
     * <pre>
     * Gibt es wenigstens eine Antwort auf "PostingID" ? Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. unbestätigt sind, falls "&#64;GetOwnNotApprovedPosting = 1" und der Autor die identifizierte Person ist !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_successors = 10015;</code>
     */
    private $has_successors = null;
    /**
     * <pre>
     * Wann wurde der Beitrag "PostingID" erstellt ? (Format : "15.03.2001 20:48:13")
     * </pre>
     *
     * <code>.dstore.values.StringValue post_date = 10016;</code>
     */
    private $post_date = null;
    /**
     * <pre>
     * Wieviele (für die identif. Person) "neue" (s. "AlreadyRead") Postings gibt es im Thread. Es zählen nur Beiträge, die einen "&#64;Visibility" entspr. "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identif. Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue new_postings_in_thread = 10017;</code>
     */
    private $new_postings_in_thread = null;
    /**
     * <pre>
     * Der Beitrag selbst - immer "NULL" falls "&#64;IncludePostingBodies = 0" oder wenn "SmallBody" NICHT "NULL" ist
     * </pre>
     *
     * <code>.dstore.values.StringValue body = 10018;</code>
     */
    private $body = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\FoGetPostingThreadPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Wurde das Posting vor "HoursAfterPostingsAreRegardedAsRead" (Eintrag in "ForumSettings") Stunden verfaßt ODER gibt es zur Person, die diese Prozedur aufruft, einen Eintrag in "ReadPostingsPerPerson", steht hier der Wert "1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue already_read = 10001;</code>
     */
    public function getAlreadyRead()
    {
        return $this->already_read;
    }

    /**
     * <pre>
     * Wurde das Posting vor "HoursAfterPostingsAreRegardedAsRead" (Eintrag in "ForumSettings") Stunden verfaßt ODER gibt es zur Person, die diese Prozedur aufruft, einen Eintrag in "ReadPostingsPerPerson", steht hier der Wert "1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue already_read = 10001;</code>
     */
    public function setAlreadyRead(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->already_read = $var;
    }

    /**
     * <pre>
     * Hier erscheint der Beitrag selbst, falls er weniger als 256 Zeichen enthält UND "UseSmallBody" in "ForumSettings" auf "1" gesetzt UND "&#64;IncludePostingBodies = 1" ist. D.h. mindestens EINE der Rückgabespalten "SmallBody" und "Body" ist IMMER "NULL".
     * </pre>
     *
     * <code>.dstore.values.StringValue small_body = 10002;</code>
     */
    public function getSmallBody()
    {
        return $this->small_body;
    }

    /**
     * <pre>
     * Hier erscheint der Beitrag selbst, falls er weniger als 256 Zeichen enthält UND "UseSmallBody" in "ForumSettings" auf "1" gesetzt UND "&#64;IncludePostingBodies = 1" ist. D.h. mindestens EINE der Rückgabespalten "SmallBody" und "Body" ist IMMER "NULL".
     * </pre>
     *
     * <code>.dstore.values.StringValue small_body = 10002;</code>
     */
    public function setSmallBody(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->small_body = $var;
    }

    /**
     * <pre>
     * ID eines Postings
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10003;</code>
     */
    public function getPostingId()
    {
        return $this->posting_id;
    }

    /**
     * <pre>
     * ID eines Postings
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10003;</code>
     */
    public function setPostingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->posting_id = $var;
    }

    /**
     * <pre>
     * Auf welcher "Ebene" befindet sich "PostingID" im zurückgegebenen "Thread". (Für das Wurzel-Element steht hier "1", für die direkten Antworten die "2" usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10004;</code>
     */
    public function getLevelNo()
    {
        return $this->level_no;
    }

    /**
     * <pre>
     * Auf welcher "Ebene" befindet sich "PostingID" im zurückgegebenen "Thread". (Für das Wurzel-Element steht hier "1", für die direkten Antworten die "2" usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10004;</code>
     */
    public function setLevelNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->level_no = $var;
    }

    /**
     * <pre>
     * ID des Postings, auf das "PostingID" eine Antwort darstellt. Falls gleich "PostingID", handelt es sich um einen Haupt-Beitrag, sprich "MainPosting"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue reply_to_posting_id = 10005;</code>
     */
    public function getReplyToPostingId()
    {
        return $this->reply_to_posting_id;
    }

    /**
     * <pre>
     * ID des Postings, auf das "PostingID" eine Antwort darstellt. Falls gleich "PostingID", handelt es sich um einen Haupt-Beitrag, sprich "MainPosting"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue reply_to_posting_id = 10005;</code>
     */
    public function setReplyToPostingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->reply_to_posting_id = $var;
    }

    /**
     * <pre>
     * Der Titel des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue subject = 10006;</code>
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * <pre>
     * Der Titel des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue subject = 10006;</code>
     */
    public function setSubject(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->subject = $var;
    }

    /**
     * <pre>
     * Wieviele Antworten hat "PostingID" (inkl. Antworten auf Antworten usw.). Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identifizierte Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue postings_in_thread = 10007;</code>
     */
    public function getPostingsInThread()
    {
        return $this->postings_in_thread;
    }

    /**
     * <pre>
     * Wieviele Antworten hat "PostingID" (inkl. Antworten auf Antworten usw.). Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identifizierte Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue postings_in_thread = 10007;</code>
     */
    public function setPostingsInThread(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->postings_in_thread = $var;
    }

    /**
     * <pre>
     * eMail des Verfassers "Author"
     * </pre>
     *
     * <code>.dstore.values.StringValue e_mail_of_author = 10008;</code>
     */
    public function getEMailOfAuthor()
    {
        return $this->e_mail_of_author;
    }

    /**
     * <pre>
     * eMail des Verfassers "Author"
     * </pre>
     *
     * <code>.dstore.values.StringValue e_mail_of_author = 10008;</code>
     */
    public function setEMailOfAuthor(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->e_mail_of_author = $var;
    }

    /**
     * <pre>
     * (Person)ID des Verfassers "Author" - "0" bedeutet, daß der Verfasser anonym ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10009;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * (Person)ID des Verfassers "Author" - "0" bedeutet, daß der Verfasser anonym ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10009;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * Ist der "Teil-Baum", der mit "PostingID" beginnt "aufgeklappt", d.h. werden Nachfolger (sprich "Antworten") angezeigt ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_expanded = 10010;</code>
     */
    public function getIsExpanded()
    {
        return $this->is_expanded;
    }

    /**
     * <pre>
     * Ist der "Teil-Baum", der mit "PostingID" beginnt "aufgeklappt", d.h. werden Nachfolger (sprich "Antworten") angezeigt ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_expanded = 10010;</code>
     */
    public function setIsExpanded(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->is_expanded = $var;
    }

    /**
     * <pre>
     * ID des Haupt-Beitrages zu "PostingID" (also sozusagen das Wurzel-Element des gesamten "Threads" zu dem "PostingID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue main_posting_id = 10011;</code>
     */
    public function getMainPostingId()
    {
        return $this->main_posting_id;
    }

    /**
     * <pre>
     * ID des Haupt-Beitrages zu "PostingID" (also sozusagen das Wurzel-Element des gesamten "Threads" zu dem "PostingID" gehört)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue main_posting_id = 10011;</code>
     */
    public function setMainPostingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->main_posting_id = $var;
    }

    /**
     * <pre>
     * Sind "Binaries" zu dem Posting "PostingID" vorhanden ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_binaries = 10012;</code>
     */
    public function getHasBinaries()
    {
        return $this->has_binaries;
    }

    /**
     * <pre>
     * Sind "Binaries" zu dem Posting "PostingID" vorhanden ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_binaries = 10012;</code>
     */
    public function setHasBinaries(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->has_binaries = $var;
    }

    /**
     * <pre>
     * Sichtbarkeits-Status des Postings "PostingID" - mögliche Werte : siehe "fo_GetPostingVisibilities"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visible = 10013;</code>
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * <pre>
     * Sichtbarkeits-Status des Postings "PostingID" - mögliche Werte : siehe "fo_GetPostingVisibilities"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visible = 10013;</code>
     */
    public function setVisible(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->visible = $var;
    }

    /**
     * <pre>
     * Name des Verfassers des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue author = 10014;</code>
     */
    public function getAuthor()
    {
        return $this->author;
    }

    /**
     * <pre>
     * Name des Verfassers des Beitrags "PostingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue author = 10014;</code>
     */
    public function setAuthor(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->author = $var;
    }

    /**
     * <pre>
     * Gibt es wenigstens eine Antwort auf "PostingID" ? Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. unbestätigt sind, falls "&#64;GetOwnNotApprovedPosting = 1" und der Autor die identifizierte Person ist !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_successors = 10015;</code>
     */
    public function getHasSuccessors()
    {
        return $this->has_successors;
    }

    /**
     * <pre>
     * Gibt es wenigstens eine Antwort auf "PostingID" ? Dabei zählen nur Beiträge, die einen "&#64;Visibility" entsprechenden "Sichtbarkeits-Status" haben bzw. unbestätigt sind, falls "&#64;GetOwnNotApprovedPosting = 1" und der Autor die identifizierte Person ist !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue has_successors = 10015;</code>
     */
    public function setHasSuccessors(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->has_successors = $var;
    }

    /**
     * <pre>
     * Wann wurde der Beitrag "PostingID" erstellt ? (Format : "15.03.2001 20:48:13")
     * </pre>
     *
     * <code>.dstore.values.StringValue post_date = 10016;</code>
     */
    public function getPostDate()
    {
        return $this->post_date;
    }

    /**
     * <pre>
     * Wann wurde der Beitrag "PostingID" erstellt ? (Format : "15.03.2001 20:48:13")
     * </pre>
     *
     * <code>.dstore.values.StringValue post_date = 10016;</code>
     */
    public function setPostDate(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->post_date = $var;
    }

    /**
     * <pre>
     * Wieviele (für die identif. Person) "neue" (s. "AlreadyRead") Postings gibt es im Thread. Es zählen nur Beiträge, die einen "&#64;Visibility" entspr. "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identif. Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue new_postings_in_thread = 10017;</code>
     */
    public function getNewPostingsInThread()
    {
        return $this->new_postings_in_thread;
    }

    /**
     * <pre>
     * Wieviele (für die identif. Person) "neue" (s. "AlreadyRead") Postings gibt es im Thread. Es zählen nur Beiträge, die einen "&#64;Visibility" entspr. "Sichtbarkeits-Status" haben bzw. (falls "&#64;GetOwnNotApprovedPosting = 1") deren Autor die identif. Person ist!
     * </pre>
     *
     * <code>.dstore.values.IntegerValue new_postings_in_thread = 10017;</code>
     */
    public function setNewPostingsInThread(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->new_postings_in_thread = $var;
    }

    /**
     * <pre>
     * Der Beitrag selbst - immer "NULL" falls "&#64;IncludePostingBodies = 0" oder wenn "SmallBody" NICHT "NULL" ist
     * </pre>
     *
     * <code>.dstore.values.StringValue body = 10018;</code>
     */
    public function getBody()
    {
        return $this->body;
    }

    /**
     * <pre>
     * Der Beitrag selbst - immer "NULL" falls "&#64;IncludePostingBodies = 0" oder wenn "SmallBody" NICHT "NULL" ist
     * </pre>
     *
     * <code>.dstore.values.StringValue body = 10018;</code>
     */
    public function setBody(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->body = $var;
    }

}

