<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetCampaignBundlePricing_Ad.proto

namespace Dstore\Engine\Om_GetCampaignBundlePricing_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetCampaignBundlePricing_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bestimmt je nach "BundlePricingTypeID", ob der Festpreis (ID "0") in brutto oder netto angegeben ist bzw. (alle anderen IDs) welcher Preis (ob brutto oder netto) bei der Bestimmung "günstigster/teuerster Artikel" herangezogen werden soll
     * </pre>
     *
     * <code>.dstore.values.BooleanValue net_based_pricing = 10001;</code>
     */
    private $net_based_pricing = null;
    /**
     * <pre>
     * ID eines Bundle-Preis-Benefits für Verkaufs-Aktionen - natürlich identisch mit "&#64;BenefitID" wenn angegeben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue benefit_id = 10002;</code>
     */
    private $benefit_id = null;
    /**
     * <pre>
     * ID der Art, wie der (Ziel-)Preis für das Bundle "BenefitID" bestimmt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue bundle_pricing_type_id = 10003;</code>
     */
    private $bundle_pricing_type_id = null;
    /**
     * <pre>
     * Summe aller "Quantity"-Werte der "ItemSetID"s, die "BenefitID" zugeordnet sind (redundante Information aus Performance-Gründen für die Bestimmung, ob im Warenkorb das Bundle "BenefitID" vorliegt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue total_quantity = 10004;</code>
     */
    private $total_quantity = null;
    /**
     * <pre>
     * Bei "BundlePricingTypeID = 0" der Festpreis, bei "BundlePricingTypeID IN (1,2)" der prozentuale Rabatt und sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue bundle_price_or_discount = 10005;</code>
     */
    private $bundle_price_or_discount = null;
    /**
     * <pre>
     * ID der Artikel-Bedingung, die das Set "ItemSetID" definiert. Die genaue Definition der Bedingung erhält man durch "im_GetItemConditions_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_condition_id = 20002;</code>
     */
    private $item_condition_id = null;
    /**
     * <pre>
     * ID eines Sets von Artikeln (durch die Bedingung "ItemConditionID" definiert), die Bestandteil des Bundles "BenefitID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_set_id = 20006;</code>
     */
    private $item_set_id = null;
    /**
     * <pre>
     * Gibt an, wieviele Artikel aus dem Set "ItemSetID" gewählt werden müssen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20007;</code>
     */
    private $quantity = null;
    /**
     * <pre>
     * Nur relevant wenn "Quantity &gt; 1" ! Darf der Kunde denselben Artikel mehrfach auswählen ("0") oder nicht ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue distinct_items_only = 20008;</code>
     */
    private $distinct_items_only = null;
    /**
     * <pre>
     * Bezeichnung der Artikel-Bedingung "ItemConditionID"
     * </pre>
     *
     * <code>.dstore.values.StringValue item_condition_description = 20009;</code>
     */
    private $item_condition_description = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ItemSetID" innerhalb aller "BenefitID" zugeordneten Sets
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 20010;</code>
     */
    private $sort_no = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetCampaignBundlePricingAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bestimmt je nach "BundlePricingTypeID", ob der Festpreis (ID "0") in brutto oder netto angegeben ist bzw. (alle anderen IDs) welcher Preis (ob brutto oder netto) bei der Bestimmung "günstigster/teuerster Artikel" herangezogen werden soll
     * </pre>
     *
     * <code>.dstore.values.BooleanValue net_based_pricing = 10001;</code>
     */
    public function getNetBasedPricing()
    {
        return $this->net_based_pricing;
    }

    /**
     * <pre>
     * Bestimmt je nach "BundlePricingTypeID", ob der Festpreis (ID "0") in brutto oder netto angegeben ist bzw. (alle anderen IDs) welcher Preis (ob brutto oder netto) bei der Bestimmung "günstigster/teuerster Artikel" herangezogen werden soll
     * </pre>
     *
     * <code>.dstore.values.BooleanValue net_based_pricing = 10001;</code>
     */
    public function setNetBasedPricing(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->net_based_pricing = $var;
    }

    /**
     * <pre>
     * ID eines Bundle-Preis-Benefits für Verkaufs-Aktionen - natürlich identisch mit "&#64;BenefitID" wenn angegeben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue benefit_id = 10002;</code>
     */
    public function getBenefitId()
    {
        return $this->benefit_id;
    }

    /**
     * <pre>
     * ID eines Bundle-Preis-Benefits für Verkaufs-Aktionen - natürlich identisch mit "&#64;BenefitID" wenn angegeben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue benefit_id = 10002;</code>
     */
    public function setBenefitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->benefit_id = $var;
    }

    /**
     * <pre>
     * ID der Art, wie der (Ziel-)Preis für das Bundle "BenefitID" bestimmt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue bundle_pricing_type_id = 10003;</code>
     */
    public function getBundlePricingTypeId()
    {
        return $this->bundle_pricing_type_id;
    }

    /**
     * <pre>
     * ID der Art, wie der (Ziel-)Preis für das Bundle "BenefitID" bestimmt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue bundle_pricing_type_id = 10003;</code>
     */
    public function setBundlePricingTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->bundle_pricing_type_id = $var;
    }

    /**
     * <pre>
     * Summe aller "Quantity"-Werte der "ItemSetID"s, die "BenefitID" zugeordnet sind (redundante Information aus Performance-Gründen für die Bestimmung, ob im Warenkorb das Bundle "BenefitID" vorliegt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue total_quantity = 10004;</code>
     */
    public function getTotalQuantity()
    {
        return $this->total_quantity;
    }

    /**
     * <pre>
     * Summe aller "Quantity"-Werte der "ItemSetID"s, die "BenefitID" zugeordnet sind (redundante Information aus Performance-Gründen für die Bestimmung, ob im Warenkorb das Bundle "BenefitID" vorliegt)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue total_quantity = 10004;</code>
     */
    public function setTotalQuantity(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->total_quantity = $var;
    }

    /**
     * <pre>
     * Bei "BundlePricingTypeID = 0" der Festpreis, bei "BundlePricingTypeID IN (1,2)" der prozentuale Rabatt und sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue bundle_price_or_discount = 10005;</code>
     */
    public function getBundlePriceOrDiscount()
    {
        return $this->bundle_price_or_discount;
    }

    /**
     * <pre>
     * Bei "BundlePricingTypeID = 0" der Festpreis, bei "BundlePricingTypeID IN (1,2)" der prozentuale Rabatt und sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue bundle_price_or_discount = 10005;</code>
     */
    public function setBundlePriceOrDiscount(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->bundle_price_or_discount = $var;
    }

    /**
     * <pre>
     * ID der Artikel-Bedingung, die das Set "ItemSetID" definiert. Die genaue Definition der Bedingung erhält man durch "im_GetItemConditions_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_condition_id = 20002;</code>
     */
    public function getItemConditionId()
    {
        return $this->item_condition_id;
    }

    /**
     * <pre>
     * ID der Artikel-Bedingung, die das Set "ItemSetID" definiert. Die genaue Definition der Bedingung erhält man durch "im_GetItemConditions_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_condition_id = 20002;</code>
     */
    public function setItemConditionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->item_condition_id = $var;
    }

    /**
     * <pre>
     * ID eines Sets von Artikeln (durch die Bedingung "ItemConditionID" definiert), die Bestandteil des Bundles "BenefitID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_set_id = 20006;</code>
     */
    public function getItemSetId()
    {
        return $this->item_set_id;
    }

    /**
     * <pre>
     * ID eines Sets von Artikeln (durch die Bedingung "ItemConditionID" definiert), die Bestandteil des Bundles "BenefitID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue item_set_id = 20006;</code>
     */
    public function setItemSetId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->item_set_id = $var;
    }

    /**
     * <pre>
     * Gibt an, wieviele Artikel aus dem Set "ItemSetID" gewählt werden müssen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20007;</code>
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * <pre>
     * Gibt an, wieviele Artikel aus dem Set "ItemSetID" gewählt werden müssen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20007;</code>
     */
    public function setQuantity(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->quantity = $var;
    }

    /**
     * <pre>
     * Nur relevant wenn "Quantity &gt; 1" ! Darf der Kunde denselben Artikel mehrfach auswählen ("0") oder nicht ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue distinct_items_only = 20008;</code>
     */
    public function getDistinctItemsOnly()
    {
        return $this->distinct_items_only;
    }

    /**
     * <pre>
     * Nur relevant wenn "Quantity &gt; 1" ! Darf der Kunde denselben Artikel mehrfach auswählen ("0") oder nicht ("1") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue distinct_items_only = 20008;</code>
     */
    public function setDistinctItemsOnly(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->distinct_items_only = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Artikel-Bedingung "ItemConditionID"
     * </pre>
     *
     * <code>.dstore.values.StringValue item_condition_description = 20009;</code>
     */
    public function getItemConditionDescription()
    {
        return $this->item_condition_description;
    }

    /**
     * <pre>
     * Bezeichnung der Artikel-Bedingung "ItemConditionID"
     * </pre>
     *
     * <code>.dstore.values.StringValue item_condition_description = 20009;</code>
     */
    public function setItemConditionDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->item_condition_description = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ItemSetID" innerhalb aller "BenefitID" zugeordneten Sets
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 20010;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ItemSetID" innerhalb aller "BenefitID" zugeordneten Sets
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 20010;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

}

