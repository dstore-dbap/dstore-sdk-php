<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_SearchOrderNo_Ad.proto

namespace Dstore\Engine\Om_SearchOrderNo_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_SearchOrderNo_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Eingangsdatum der Bestellung als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time = 10001;</code>
     */
    private $order_date_and_time = null;
    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Zahlungsart "PaymentTypeID". NICHT VERWENDEN, wird zukünftig durch "NetPaymentCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue payment_cost = 10002;</code>
     */
    private $payment_cost = null;
    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time = 10003;</code>
     */
    private $delivery_date_and_time = null;
    /**
     * <pre>
     * Netto-Versandkosten (entspricht "ShippingCost")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10004;</code>
     */
    private $net_shipping_cost = null;
    /**
     * <pre>
     * Hier steht natürlich immer "&#64;OrderNo". Hintergrund für diese Rückgabespalte ist, daß intern die gleiche Prozedur wie z.B. für "om_GetOrders_Ad" verwendet wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_no = 10005;</code>
     */
    private $order_no = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10006;</code>
     */
    private $netto_sum = null;
    /**
     * <pre>
     * ID des "dStore"-Benutzers (der in "UserInfo" registriert ist) der den Auftrag zuletzt bearbeitet hat. Wird z.Zt. nur gepflegt beim Anlegen eines Auftrags und beim Ändern d. Auftraggebers durch "om_AcknowledgeOrders_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue last_edited_by_user_id = 10007;</code>
     */
    private $last_edited_by_user_id = null;
    /**
     * <pre>
     * ID eines Auftrags mit "OrderNo = &#64;OrderNo"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10008;</code>
     */
    private $order_id = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10009;</code>
     */
    private $brutto_sum = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Versandkosten "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10010;</code>
     */
    private $precise_net_shipping_cost = null;
    /**
     * <pre>
     * Wie "CharacVal1RestrByPattern" - nur eben auf "CustomerCharacteristicValue2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val2_restr_by_pattern = 10011;</code>
     */
    private $charac_val2_restr_by_pattern = null;
    /**
     * <pre>
     * Netto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10012;</code>
     */
    private $net_sum = null;
    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10013;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * Bezeichnung der Abrechnungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10014;</code>
     */
    private $payment_type_description = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10015;</code>
     */
    private $precise_net_sum = null;
    /**
     * <pre>
     * Wieviele Positionen enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10016;</code>
     */
    private $position_count = null;
    /**
     * <pre>
     * ID des Status, den alle Auftragsspositionen aktuell haben, oder "NULL", falls die Positionen unterschiedliche Status besitzen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10017;</code>
     */
    private $order_state_id = null;
    /**
     * <pre>
     * ID einer Versandart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10018;</code>
     */
    private $shipping_type_id = null;
    /**
     * <pre>
     * ID des Personen-Typs von "PersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10019;</code>
     */
    private $person_type_id = null;
    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10020;</code>
     */
    private $net_payment_cost = null;
    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10021;</code>
     */
    private $delivery_person_id = null;
    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10022;</code>
     */
    private $shipping_type_description = null;
    /**
     * <pre>
     * Brutto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10023;</code>
     */
    private $gross_sum = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10024;</code>
     */
    private $unit_symbol = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Abrechnungsart-Kosten "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10025;</code>
     */
    private $precise_net_payment_cost = null;
    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 2. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value2 = 10026;</code>
     */
    private $customer_characteristic_value2 = null;
    /**
     * <pre>
     * Beschreibung des Status "OrderStateID" für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue public_description = 10027;</code>
     */
    private $public_description = null;
    /**
     * <pre>
     * ID einer Währung, in der die Kosten "ShippingCost", "PaymentCost", "NettoSum" und "BruttoSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10028;</code>
     */
    private $currency_id = null;
    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 1. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value1 = 10029;</code>
     */
    private $customer_characteristic_value1 = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10030;</code>
     */
    private $precise_gross_sum = null;
    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Versandart "ShippingTypeID". NICHT VERWENDEN, wird zukünftig durch "NetShippingCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue shipping_cost = 10031;</code>
     */
    private $shipping_cost = null;
    /**
     * <pre>
     * Was enthält "CustomerCharacteristicValue1" (womögl. wg. Zugriffsbeschr. nur einen Teil) ?- NULL : den vollst. Wert- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen("n = 0" =&gt; "CustomerCharacteristicValue1" dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val1_restr_by_pattern = 10032;</code>
     */
    private $charac_val1_restr_by_pattern = null;
    /**
     * <pre>
     * ID einer Zahlungsart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10033;</code>
     */
    private $payment_type_id = null;
    /**
     * <pre>
     * Bezeichnung des Status "OrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_state = 10034;</code>
     */
    private $order_state = null;
    /**
     * <pre>
     * Bezeichnung der "NodeID". Falls vorhanden, wird an dieser Stelle die Eigenschaft (des Elementes "NodeID") zum Merkmal "Produktbezeichnung" (in der Sprache "&#64;LanguageID") ausgegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 20004;</code>
     */
    private $description = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_content_sum = 20005;</code>
     */
    private $precise_net_content_sum = null;
    /**
     * <pre>
     * Nummer der Bestellung eines Fremdsystems, in das die Position exportiert wurde. Immer "NULL" falls "OrderNo" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue order_content_no = 20007;</code>
     */
    private $order_content_no = null;
    /**
     * <pre>
     * ID der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 20010;</code>
     */
    private $order_content_id = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 20012;</code>
     */
    private $currency_symbol = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_content_sum = 20014;</code>
     */
    private $netto_content_sum = null;
    /**
     * <pre>
     * Nummer der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_position = 20017;</code>
     */
    private $order_content_position = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_content_sum = 20018;</code>
     */
    private $net_content_sum = null;
    /**
     * <pre>
     * ID des Artikel-Elementes der Auftragsposition, das der Auftraggeber "PersonID" bestellt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 20019;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_content_sum = 20020;</code>
     */
    private $gross_content_sum = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_order_sum = 20023;</code>
     */
    private $precise_gross_order_sum = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_content_sum = 20024;</code>
     */
    private $precise_gross_content_sum = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_order_sum = 20025;</code>
     */
    private $gross_order_sum = null;
    /**
     * <pre>
     * Wurde die Position "OrderContentID" nachträglich geändert ? ("0" : Nein, "1" : Ja)Anmerkung : Eine Änderung der "OrderNo" wird übrigens NICHT berücksichtigt !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue order_content_was_modified = 20027;</code>
     */
    private $order_content_was_modified = null;
    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal "&#64;NodeCharacteristicID" (wenn "NULL" für "&#64;NodeCharacteristicID" angegeben wurde, steht hier auch "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue item_property = 20028;</code>
     */
    private $item_property = null;
    /**
     * <pre>
     * Wieviel wurde vom Artikel "NodeID" bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20031;</code>
     */
    private $quantity = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_order_sum = 20034;</code>
     */
    private $net_order_sum = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_content_sum = 20038;</code>
     */
    private $brutto_content_sum = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_order_sum = 20039;</code>
     */
    private $netto_order_sum = null;
    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal mit der ID "6" (also die Artikelnummer). Immer "NULL", wenn "&#64;IncludeItemNo = 0" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue item_no = 20040;</code>
     */
    private $item_no = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_order_sum = 20044;</code>
     */
    private $precise_net_order_sum = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_order_sum = 20046;</code>
     */
    private $brutto_order_sum = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmSearchOrderNoAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Eingangsdatum der Bestellung als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time = 10001;</code>
     */
    public function getOrderDateAndTime()
    {
        return $this->order_date_and_time;
    }

    /**
     * <pre>
     * Eingangsdatum der Bestellung als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time = 10001;</code>
     */
    public function setOrderDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->order_date_and_time = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Zahlungsart "PaymentTypeID". NICHT VERWENDEN, wird zukünftig durch "NetPaymentCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue payment_cost = 10002;</code>
     */
    public function getPaymentCost()
    {
        return $this->payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Zahlungsart "PaymentTypeID". NICHT VERWENDEN, wird zukünftig durch "NetPaymentCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue payment_cost = 10002;</code>
     */
    public function setPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->payment_cost = $var;
    }

    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time = 10003;</code>
     */
    public function getDeliveryDateAndTime()
    {
        return $this->delivery_date_and_time;
    }

    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin als String im Format "&#64;DateAndTimeFormat" (siehe Beschreibung). Falls "&#64;IncludeTime = 1", dann ist zusätzlich die Uhrzeit (Format '17:42:22') angegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time = 10003;</code>
     */
    public function setDeliveryDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->delivery_date_and_time = $var;
    }

    /**
     * <pre>
     * Netto-Versandkosten (entspricht "ShippingCost")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10004;</code>
     */
    public function getNetShippingCost()
    {
        return $this->net_shipping_cost;
    }

    /**
     * <pre>
     * Netto-Versandkosten (entspricht "ShippingCost")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10004;</code>
     */
    public function setNetShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_shipping_cost = $var;
    }

    /**
     * <pre>
     * Hier steht natürlich immer "&#64;OrderNo". Hintergrund für diese Rückgabespalte ist, daß intern die gleiche Prozedur wie z.B. für "om_GetOrders_Ad" verwendet wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_no = 10005;</code>
     */
    public function getOrderNo()
    {
        return $this->order_no;
    }

    /**
     * <pre>
     * Hier steht natürlich immer "&#64;OrderNo". Hintergrund für diese Rückgabespalte ist, daß intern die gleiche Prozedur wie z.B. für "om_GetOrders_Ad" verwendet wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue order_no = 10005;</code>
     */
    public function setOrderNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->order_no = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10006;</code>
     */
    public function getNettoSum()
    {
        return $this->netto_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10006;</code>
     */
    public function setNettoSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_sum = $var;
    }

    /**
     * <pre>
     * ID des "dStore"-Benutzers (der in "UserInfo" registriert ist) der den Auftrag zuletzt bearbeitet hat. Wird z.Zt. nur gepflegt beim Anlegen eines Auftrags und beim Ändern d. Auftraggebers durch "om_AcknowledgeOrders_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue last_edited_by_user_id = 10007;</code>
     */
    public function getLastEditedByUserId()
    {
        return $this->last_edited_by_user_id;
    }

    /**
     * <pre>
     * ID des "dStore"-Benutzers (der in "UserInfo" registriert ist) der den Auftrag zuletzt bearbeitet hat. Wird z.Zt. nur gepflegt beim Anlegen eines Auftrags und beim Ändern d. Auftraggebers durch "om_AcknowledgeOrders_Ad".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue last_edited_by_user_id = 10007;</code>
     */
    public function setLastEditedByUserId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->last_edited_by_user_id = $var;
    }

    /**
     * <pre>
     * ID eines Auftrags mit "OrderNo = &#64;OrderNo"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10008;</code>
     */
    public function getOrderId()
    {
        return $this->order_id;
    }

    /**
     * <pre>
     * ID eines Auftrags mit "OrderNo = &#64;OrderNo"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10008;</code>
     */
    public function setOrderId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_id = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10009;</code>
     */
    public function getBruttoSum()
    {
        return $this->brutto_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10009;</code>
     */
    public function setBruttoSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_sum = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Versandkosten "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10010;</code>
     */
    public function getPreciseNetShippingCost()
    {
        return $this->precise_net_shipping_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Versandkosten "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10010;</code>
     */
    public function setPreciseNetShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_shipping_cost = $var;
    }

    /**
     * <pre>
     * Wie "CharacVal1RestrByPattern" - nur eben auf "CustomerCharacteristicValue2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val2_restr_by_pattern = 10011;</code>
     */
    public function getCharacVal2RestrByPattern()
    {
        return $this->charac_val2_restr_by_pattern;
    }

    /**
     * <pre>
     * Wie "CharacVal1RestrByPattern" - nur eben auf "CustomerCharacteristicValue2" bezogen
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val2_restr_by_pattern = 10011;</code>
     */
    public function setCharacVal2RestrByPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->charac_val2_restr_by_pattern = $var;
    }

    /**
     * <pre>
     * Netto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10012;</code>
     */
    public function getNetSum()
    {
        return $this->net_sum;
    }

    /**
     * <pre>
     * Netto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10012;</code>
     */
    public function setNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_sum = $var;
    }

    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10013;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10013;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Abrechnungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10014;</code>
     */
    public function getPaymentTypeDescription()
    {
        return $this->payment_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der Abrechnungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10014;</code>
     */
    public function setPaymentTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_type_description = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10015;</code>
     */
    public function getPreciseNetSum()
    {
        return $this->precise_net_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10015;</code>
     */
    public function setPreciseNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_sum = $var;
    }

    /**
     * <pre>
     * Wieviele Positionen enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10016;</code>
     */
    public function getPositionCount()
    {
        return $this->position_count;
    }

    /**
     * <pre>
     * Wieviele Positionen enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10016;</code>
     */
    public function setPositionCount(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->position_count = $var;
    }

    /**
     * <pre>
     * ID des Status, den alle Auftragsspositionen aktuell haben, oder "NULL", falls die Positionen unterschiedliche Status besitzen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10017;</code>
     */
    public function getOrderStateId()
    {
        return $this->order_state_id;
    }

    /**
     * <pre>
     * ID des Status, den alle Auftragsspositionen aktuell haben, oder "NULL", falls die Positionen unterschiedliche Status besitzen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10017;</code>
     */
    public function setOrderStateId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_state_id = $var;
    }

    /**
     * <pre>
     * ID einer Versandart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10018;</code>
     */
    public function getShippingTypeId()
    {
        return $this->shipping_type_id;
    }

    /**
     * <pre>
     * ID einer Versandart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10018;</code>
     */
    public function setShippingTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->shipping_type_id = $var;
    }

    /**
     * <pre>
     * ID des Personen-Typs von "PersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10019;</code>
     */
    public function getPersonTypeId()
    {
        return $this->person_type_id;
    }

    /**
     * <pre>
     * ID des Personen-Typs von "PersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 10019;</code>
     */
    public function setPersonTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_type_id = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10020;</code>
     */
    public function getNetPaymentCost()
    {
        return $this->net_payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10020;</code>
     */
    public function setNetPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_payment_cost = $var;
    }

    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10021;</code>
     */
    public function getDeliveryPersonId()
    {
        return $this->delivery_person_id;
    }

    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10021;</code>
     */
    public function setDeliveryPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->delivery_person_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10022;</code>
     */
    public function getShippingTypeDescription()
    {
        return $this->shipping_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10022;</code>
     */
    public function setShippingTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->shipping_type_description = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10023;</code>
     */
    public function getGrossSum()
    {
        return $this->gross_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag der Bestellung "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10023;</code>
     */
    public function setGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_sum = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10024;</code>
     */
    public function getUnitSymbol()
    {
        return $this->unit_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10024;</code>
     */
    public function setUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unit_symbol = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Abrechnungsart-Kosten "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10025;</code>
     */
    public function getPreciseNetPaymentCost()
    {
        return $this->precise_net_payment_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Netto-Betrag für die Abrechnungsart-Kosten "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10025;</code>
     */
    public function setPreciseNetPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_payment_cost = $var;
    }

    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 2. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value2 = 10026;</code>
     */
    public function getCustomerCharacteristicValue2()
    {
        return $this->customer_characteristic_value2;
    }

    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 2. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value2 = 10026;</code>
     */
    public function setCustomerCharacteristicValue2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->customer_characteristic_value2 = $var;
    }

    /**
     * <pre>
     * Beschreibung des Status "OrderStateID" für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue public_description = 10027;</code>
     */
    public function getPublicDescription()
    {
        return $this->public_description;
    }

    /**
     * <pre>
     * Beschreibung des Status "OrderStateID" für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue public_description = 10027;</code>
     */
    public function setPublicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->public_description = $var;
    }

    /**
     * <pre>
     * ID einer Währung, in der die Kosten "ShippingCost", "PaymentCost", "NettoSum" und "BruttoSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10028;</code>
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * <pre>
     * ID einer Währung, in der die Kosten "ShippingCost", "PaymentCost", "NettoSum" und "BruttoSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10028;</code>
     */
    public function setCurrencyId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->currency_id = $var;
    }

    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 1. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value1 = 10029;</code>
     */
    public function getCustomerCharacteristicValue1()
    {
        return $this->customer_characteristic_value1;
    }

    /**
     * <pre>
     * Eigensch. von "PersonID" zum Merkmal mit der 1. ID, die in "PersonTypSettings" zu "PersonOutputCharacteristicIDsForOrderLists" (zum entspr. Typ) konf. ist und nicht für den Aufrufer kompl. lesend gesperrt ist. "NULL" wenn "&#64;ShowPersonCharacteristics = 0".
     * </pre>
     *
     * <code>.dstore.values.StringValue customer_characteristic_value1 = 10029;</code>
     */
    public function setCustomerCharacteristicValue1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->customer_characteristic_value1 = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10030;</code>
     */
    public function getPreciseGrossSum()
    {
        return $this->precise_gross_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10030;</code>
     */
    public function setPreciseGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_sum = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Versandart "ShippingTypeID". NICHT VERWENDEN, wird zukünftig durch "NetShippingCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue shipping_cost = 10031;</code>
     */
    public function getShippingCost()
    {
        return $this->shipping_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende Kosten (immer netto !) in der durch "CurrencyID" angegebenen Währung für die Versandart "ShippingTypeID". NICHT VERWENDEN, wird zukünftig durch "NetShippingCost" ersetzt !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue shipping_cost = 10031;</code>
     */
    public function setShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->shipping_cost = $var;
    }

    /**
     * <pre>
     * Was enthält "CustomerCharacteristicValue1" (womögl. wg. Zugriffsbeschr. nur einen Teil) ?- NULL : den vollst. Wert- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen("n = 0" =&gt; "CustomerCharacteristicValue1" dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val1_restr_by_pattern = 10032;</code>
     */
    public function getCharacVal1RestrByPattern()
    {
        return $this->charac_val1_restr_by_pattern;
    }

    /**
     * <pre>
     * Was enthält "CustomerCharacteristicValue1" (womögl. wg. Zugriffsbeschr. nur einen Teil) ?- NULL : den vollst. Wert- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen("n = 0" =&gt; "CustomerCharacteristicValue1" dann "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue charac_val1_restr_by_pattern = 10032;</code>
     */
    public function setCharacVal1RestrByPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->charac_val1_restr_by_pattern = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10033;</code>
     */
    public function getPaymentTypeId()
    {
        return $this->payment_type_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10033;</code>
     */
    public function setPaymentTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Status "OrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_state = 10034;</code>
     */
    public function getOrderState()
    {
        return $this->order_state;
    }

    /**
     * <pre>
     * Bezeichnung des Status "OrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_state = 10034;</code>
     */
    public function setOrderState(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->order_state = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "NodeID". Falls vorhanden, wird an dieser Stelle die Eigenschaft (des Elementes "NodeID") zum Merkmal "Produktbezeichnung" (in der Sprache "&#64;LanguageID") ausgegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 20004;</code>
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * <pre>
     * Bezeichnung der "NodeID". Falls vorhanden, wird an dieser Stelle die Eigenschaft (des Elementes "NodeID") zum Merkmal "Produktbezeichnung" (in der Sprache "&#64;LanguageID") ausgegeben.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 20004;</code>
     */
    public function setDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_content_sum = 20005;</code>
     */
    public function getPreciseNetContentSum()
    {
        return $this->precise_net_content_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_content_sum = 20005;</code>
     */
    public function setPreciseNetContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_content_sum = $var;
    }

    /**
     * <pre>
     * Nummer der Bestellung eines Fremdsystems, in das die Position exportiert wurde. Immer "NULL" falls "OrderNo" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue order_content_no = 20007;</code>
     */
    public function getOrderContentNo()
    {
        return $this->order_content_no;
    }

    /**
     * <pre>
     * Nummer der Bestellung eines Fremdsystems, in das die Position exportiert wurde. Immer "NULL" falls "OrderNo" NICHT "NULL" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue order_content_no = 20007;</code>
     */
    public function setOrderContentNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->order_content_no = $var;
    }

    /**
     * <pre>
     * ID der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 20010;</code>
     */
    public function getOrderContentId()
    {
        return $this->order_content_id;
    }

    /**
     * <pre>
     * ID der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 20010;</code>
     */
    public function setOrderContentId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_content_id = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 20012;</code>
     */
    public function getCurrencySymbol()
    {
        return $this->currency_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 20012;</code>
     */
    public function setCurrencySymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->currency_symbol = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_content_sum = 20014;</code>
     */
    public function getNettoContentSum()
    {
        return $this->netto_content_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_content_sum = 20014;</code>
     */
    public function setNettoContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_content_sum = $var;
    }

    /**
     * <pre>
     * Nummer der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_position = 20017;</code>
     */
    public function getOrderContentPosition()
    {
        return $this->order_content_position;
    }

    /**
     * <pre>
     * Nummer der Auftragsposition
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_position = 20017;</code>
     */
    public function setOrderContentPosition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_content_position = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_content_sum = 20018;</code>
     */
    public function getNetContentSum()
    {
        return $this->net_content_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_content_sum = 20018;</code>
     */
    public function setNetContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_content_sum = $var;
    }

    /**
     * <pre>
     * ID des Artikel-Elementes der Auftragsposition, das der Auftraggeber "PersonID" bestellt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 20019;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des Artikel-Elementes der Auftragsposition, das der Auftraggeber "PersonID" bestellt hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 20019;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_content_sum = 20020;</code>
     */
    public function getGrossContentSum()
    {
        return $this->gross_content_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_content_sum = 20020;</code>
     */
    public function setGrossContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_content_sum = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_order_sum = 20023;</code>
     */
    public function getPreciseGrossOrderSum()
    {
        return $this->precise_gross_order_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_order_sum = 20023;</code>
     */
    public function setPreciseGrossOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_order_sum = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_content_sum = 20024;</code>
     */
    public function getPreciseGrossContentSum()
    {
        return $this->precise_gross_content_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossContentSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_content_sum = 20024;</code>
     */
    public function setPreciseGrossContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_content_sum = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_order_sum = 20025;</code>
     */
    public function getGrossOrderSum()
    {
        return $this->gross_order_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_order_sum = 20025;</code>
     */
    public function setGrossOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_order_sum = $var;
    }

    /**
     * <pre>
     * Wurde die Position "OrderContentID" nachträglich geändert ? ("0" : Nein, "1" : Ja)Anmerkung : Eine Änderung der "OrderNo" wird übrigens NICHT berücksichtigt !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue order_content_was_modified = 20027;</code>
     */
    public function getOrderContentWasModified()
    {
        return $this->order_content_was_modified;
    }

    /**
     * <pre>
     * Wurde die Position "OrderContentID" nachträglich geändert ? ("0" : Nein, "1" : Ja)Anmerkung : Eine Änderung der "OrderNo" wird übrigens NICHT berücksichtigt !
     * </pre>
     *
     * <code>.dstore.values.BooleanValue order_content_was_modified = 20027;</code>
     */
    public function setOrderContentWasModified(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->order_content_was_modified = $var;
    }

    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal "&#64;NodeCharacteristicID" (wenn "NULL" für "&#64;NodeCharacteristicID" angegeben wurde, steht hier auch "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue item_property = 20028;</code>
     */
    public function getItemProperty()
    {
        return $this->item_property;
    }

    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal "&#64;NodeCharacteristicID" (wenn "NULL" für "&#64;NodeCharacteristicID" angegeben wurde, steht hier auch "NULL")
     * </pre>
     *
     * <code>.dstore.values.StringValue item_property = 20028;</code>
     */
    public function setItemProperty(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->item_property = $var;
    }

    /**
     * <pre>
     * Wieviel wurde vom Artikel "NodeID" bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20031;</code>
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * <pre>
     * Wieviel wurde vom Artikel "NodeID" bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 20031;</code>
     */
    public function setQuantity(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->quantity = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_order_sum = 20034;</code>
     */
    public function getNetOrderSum()
    {
        return $this->net_order_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_order_sum = 20034;</code>
     */
    public function setNetOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_order_sum = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_content_sum = 20038;</code>
     */
    public function getBruttoContentSum()
    {
        return $this->brutto_content_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für die Auftragsposition (also nicht der Stückpreis des Artikels "NodeID", sondern "Stückpreis * Quantity" !) - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_content_sum = 20038;</code>
     */
    public function setBruttoContentSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_content_sum = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_order_sum = 20039;</code>
     */
    public function getNettoOrderSum()
    {
        return $this->netto_order_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_order_sum = 20039;</code>
     */
    public function setNettoOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_order_sum = $var;
    }

    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal mit der ID "6" (also die Artikelnummer). Immer "NULL", wenn "&#64;IncludeItemNo = 0" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue item_no = 20040;</code>
     */
    public function getItemNo()
    {
        return $this->item_no;
    }

    /**
     * <pre>
     * Eigenschaft des Artikel-Elementes "NodeID" zum Merkmal mit der ID "6" (also die Artikelnummer). Immer "NULL", wenn "&#64;IncludeItemNo = 0" ist !
     * </pre>
     *
     * <code>.dstore.values.StringValue item_no = 20040;</code>
     */
    public function setItemNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->item_no = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_order_sum = 20044;</code>
     */
    public function getPreciseNetOrderSum()
    {
        return $this->precise_net_order_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetOrderSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_order_sum = 20044;</code>
     */
    public function setPreciseNetOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_order_sum = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_order_sum = 20046;</code>
     */
    public function getBruttoOrderSum()
    {
        return $this->brutto_order_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag - Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_order_sum = 20046;</code>
     */
    public function setBruttoOrderSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_order_sum = $var;
    }

}

