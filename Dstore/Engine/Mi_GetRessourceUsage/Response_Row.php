<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetRessourceUsage.proto

namespace Dstore\Engine\Mi_GetRessourceUsage;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetRessourceUsage.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Kummulierte CPU-Zeit in "ticks", die die Sitzung "&#64;&#64;spid" verbraucht hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue c_p_u = 10001;</code>
     */
    private $c_p_u = null;
    /**
     * <pre>
     * Anzahl Festplatten-Zugriffe (lesend und schreibend !), die die Sitzung "&#64;&#64;spid" verbraucht hat (i/o in Anzahl 2K-Pages)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue physical_i_o = 10002;</code>
     */
    private $physical_i_o = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetRessourceUsage::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Kummulierte CPU-Zeit in "ticks", die die Sitzung "&#64;&#64;spid" verbraucht hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue c_p_u = 10001;</code>
     */
    public function getCPU()
    {
        return $this->c_p_u;
    }

    /**
     * <pre>
     * Kummulierte CPU-Zeit in "ticks", die die Sitzung "&#64;&#64;spid" verbraucht hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue c_p_u = 10001;</code>
     */
    public function setCPU(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->c_p_u = $var;
    }

    /**
     * <pre>
     * Anzahl Festplatten-Zugriffe (lesend und schreibend !), die die Sitzung "&#64;&#64;spid" verbraucht hat (i/o in Anzahl 2K-Pages)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue physical_i_o = 10002;</code>
     */
    public function getPhysicalIO()
    {
        return $this->physical_i_o;
    }

    /**
     * <pre>
     * Anzahl Festplatten-Zugriffe (lesend und schreibend !), die die Sitzung "&#64;&#64;spid" verbraucht hat (i/o in Anzahl 2K-Pages)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue physical_i_o = 10002;</code>
     */
    public function setPhysicalIO(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->physical_i_o = $var;
    }

}

