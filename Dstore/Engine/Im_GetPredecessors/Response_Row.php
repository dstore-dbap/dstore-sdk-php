<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/im_GetPredecessors.proto

namespace Dstore\Engine\Im_GetPredecessors;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.im_GetPredecessors.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bezeichnung des Vorgänger-Elementes. Immer "NULL", falls "0" oder "NULL" für "&#64;GetNodeDescriptions" angegeben wird !
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10001;</code>
     */
    private $node_description = null;
    /**
     * <pre>
     * Nummer der Hierarchie des Vorgänger-Elementes - eine höhere Nummer bedeutet eine niedrigere Hierarchie. Ist "&#64;GetLevelNoInfo = 0" steht hier die Angabe, der wievielte Vorgänger "TreeNodeID" von "&#64;TreeNodeID" ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10002;</code>
     */
    private $level_no = null;
    /**
     * <pre>
     * ID eines Vorgänger-Elementes (von "&#64;TreeNodeID") im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10003;</code>
     */
    private $tree_node_id = null;
    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10004;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * ID eines Vorgänger-Elementes von "TreeNodeID" im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor = 20001;</code>
     */
    private $predecessor = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\ImGetPredecessors::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Vorgänger-Elementes. Immer "NULL", falls "0" oder "NULL" für "&#64;GetNodeDescriptions" angegeben wird !
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10001;</code>
     */
    public function getNodeDescription()
    {
        return $this->node_description;
    }

    /**
     * <pre>
     * Bezeichnung des Vorgänger-Elementes. Immer "NULL", falls "0" oder "NULL" für "&#64;GetNodeDescriptions" angegeben wird !
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10001;</code>
     */
    public function setNodeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->node_description = $var;
    }

    /**
     * <pre>
     * Nummer der Hierarchie des Vorgänger-Elementes - eine höhere Nummer bedeutet eine niedrigere Hierarchie. Ist "&#64;GetLevelNoInfo = 0" steht hier die Angabe, der wievielte Vorgänger "TreeNodeID" von "&#64;TreeNodeID" ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10002;</code>
     */
    public function getLevelNo()
    {
        return $this->level_no;
    }

    /**
     * <pre>
     * Nummer der Hierarchie des Vorgänger-Elementes - eine höhere Nummer bedeutet eine niedrigere Hierarchie. Ist "&#64;GetLevelNoInfo = 0" steht hier die Angabe, der wievielte Vorgänger "TreeNodeID" von "&#64;TreeNodeID" ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue level_no = 10002;</code>
     */
    public function setLevelNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->level_no = $var;
    }

    /**
     * <pre>
     * ID eines Vorgänger-Elementes (von "&#64;TreeNodeID") im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10003;</code>
     */
    public function getTreeNodeId()
    {
        return $this->tree_node_id;
    }

    /**
     * <pre>
     * ID eines Vorgänger-Elementes (von "&#64;TreeNodeID") im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10003;</code>
     */
    public function setTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tree_node_id = $var;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10004;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10004;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * ID eines Vorgänger-Elementes von "TreeNodeID" im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor = 20001;</code>
     */
    public function getPredecessor()
    {
        return $this->predecessor;
    }

    /**
     * <pre>
     * ID eines Vorgänger-Elementes von "TreeNodeID" im Artikelbaum
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor = 20001;</code>
     */
    public function setPredecessor(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->predecessor = $var;
    }

}

