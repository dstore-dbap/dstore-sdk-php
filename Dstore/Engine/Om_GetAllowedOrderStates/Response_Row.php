<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetAllowedOrderStates.proto

namespace Dstore\Engine\Om_GetAllowedOrderStates;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetAllowedOrderStates.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Öffentliche Beschreibung des Status "ToOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_public_description = 10001;</code>
     */
    private $to_public_description = null;
    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf vom Status "FromOrderStateID" in diesen Status wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_order_state_id = 10002;</code>
     */
    private $to_order_state_id = null;
    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    private $payment_for_shipping_id = null;
    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf von diesem Status in den Status "ToOrderStateID" wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_order_state_id = 10004;</code>
     */
    private $from_order_state_id = null;
    /**
     * <pre>
     * Öffentliche Beschreibung des Status "FromOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue from_public_description = 10005;</code>
     */
    private $from_public_description = null;
    /**
     * <pre>
     * ID einer Versandart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Versandart UND die Zahlungsart "PaymentTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10006;</code>
     */
    private $shipping_type_id = null;
    /**
     * <pre>
     * Bezeichnung des Status "ToOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_order_state = 10007;</code>
     */
    private $to_order_state = null;
    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    private $payment_for_shipping_description = null;
    /**
     * <pre>
     * ID einer Zahlungsart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Zahlungsart UND die Versandart "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    private $payment_type_id = null;
    /**
     * <pre>
     * Bezeichnung des Status "FromOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_order_state = 10010;</code>
     */
    private $from_order_state = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetAllowedOrderStates::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Öffentliche Beschreibung des Status "ToOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_public_description = 10001;</code>
     */
    public function getToPublicDescription()
    {
        return $this->to_public_description;
    }

    /**
     * <pre>
     * Öffentliche Beschreibung des Status "ToOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_public_description = 10001;</code>
     */
    public function setToPublicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->to_public_description = $var;
    }

    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf vom Status "FromOrderStateID" in diesen Status wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_order_state_id = 10002;</code>
     */
    public function getToOrderStateId()
    {
        return $this->to_order_state_id;
    }

    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf vom Status "FromOrderStateID" in diesen Status wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_order_state_id = 10002;</code>
     */
    public function setToOrderStateId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->to_order_state_id = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    public function getPaymentForShippingId()
    {
        return $this->payment_for_shipping_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    public function setPaymentForShippingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_for_shipping_id = $var;
    }

    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf von diesem Status in den Status "ToOrderStateID" wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_order_state_id = 10004;</code>
     */
    public function getFromOrderStateId()
    {
        return $this->from_order_state_id;
    }

    /**
     * <pre>
     * ID eines Auftrags(-Positions)-Status. Der Benutzer, der diese Prozedur aufruft, darf von diesem Status in den Status "ToOrderStateID" wechseln - wenn als Zahlungs-/Versandart des Auftrags "PaymentTypeID" bzw. "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_order_state_id = 10004;</code>
     */
    public function setFromOrderStateId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->from_order_state_id = $var;
    }

    /**
     * <pre>
     * Öffentliche Beschreibung des Status "FromOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue from_public_description = 10005;</code>
     */
    public function getFromPublicDescription()
    {
        return $this->from_public_description;
    }

    /**
     * <pre>
     * Öffentliche Beschreibung des Status "FromOrderStateID" (in der durch "&#64;LanguageID" angegebenen Sprache bzw. in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue from_public_description = 10005;</code>
     */
    public function setFromPublicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->from_public_description = $var;
    }

    /**
     * <pre>
     * ID einer Versandart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Versandart UND die Zahlungsart "PaymentTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10006;</code>
     */
    public function getShippingTypeId()
    {
        return $this->shipping_type_id;
    }

    /**
     * <pre>
     * ID einer Versandart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Versandart UND die Zahlungsart "PaymentTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10006;</code>
     */
    public function setShippingTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->shipping_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Status "ToOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_order_state = 10007;</code>
     */
    public function getToOrderState()
    {
        return $this->to_order_state;
    }

    /**
     * <pre>
     * Bezeichnung des Status "ToOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_order_state = 10007;</code>
     */
    public function setToOrderState(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->to_order_state = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function getPaymentForShippingDescription()
    {
        return $this->payment_for_shipping_description;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function setPaymentForShippingDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_for_shipping_description = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Zahlungsart UND die Versandart "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    public function getPaymentTypeId()
    {
        return $this->payment_type_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart. Der Benutzer, der diese Prozedur aufruft, darf einen Statuswechsel von "FromOrderStateID" nach "ToOrderStateID" nur durchführen, wenn zum Auftrag diese Zahlungsart UND die Versandart "ShippingTypeID" hinterlegt ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    public function setPaymentTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Status "FromOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_order_state = 10010;</code>
     */
    public function getFromOrderState()
    {
        return $this->from_order_state;
    }

    /**
     * <pre>
     * Bezeichnung des Status "FromOrderStateID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_order_state = 10010;</code>
     */
    public function setFromOrderState(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->from_order_state = $var;
    }

}

