<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/im_GetItemConditionGroups_Ad.proto

namespace Dstore\Engine\Im_GetItemConditionGroups_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.im_GetItemConditionGroups_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 10001;</code>
     */
    private $operator1 = null;
    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 10002;</code>
     */
    private $condition1 = null;
    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 10003;</code>
     */
    private $condition2 = null;
    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 10004;</code>
     */
    private $operator2 = null;
    /**
     * <pre>
     * Bezeichnung der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_group_description = 10005;</code>
     */
    private $condition_group_description = null;
    /**
     * <pre>
     * Gibt an, ob die der "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue combine_parts_with_a_n_d_operator = 10006;</code>
     */
    private $combine_parts_with_a_n_d_operator = null;
    /**
     * <pre>
     * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue recursive_evaluation = 10007;</code>
     */
    private $recursive_evaluation = null;
    /**
     * <pre>
     * ID eines (Artikel-)Bedingungs-Teils, das der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_part_id = 10008;</code>
     */
    private $condition_part_id = null;
    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
     * </pre>
     *
     * <code>.dstore.values.StringValue domain_tree_node_ids = 10009;</code>
     */
    private $domain_tree_node_ids = null;
    /**
     * <pre>
     * ID eines Merkmals. Um "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10010;</code>
     */
    private $node_characteristic_id = null;
    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" erstellt wurde
     * </pre>
     *
     * <code>.dstore.values.TimestampValue created_at_date_and_time = 10011;</code>
     */
    private $created_at_date_and_time = null;
    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Artikel-Bedingung verwendet ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_an_item_condition = 10012;</code>
     */
    private $used_in_an_item_condition = null;
    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Verkaufs-Aktion (eine sog. "Campaign") um zusätzliche Kriterien erweitert ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_campaign_item_cond_groups = 10013;</code>
     */
    private $used_in_campaign_item_cond_groups = null;
    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
     * </pre>
     *
     * <code>.dstore.values.StringValue level_ids = 10014;</code>
     */
    private $level_ids = null;
    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zuletzt geändert wurde (kann "NULL" sein)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue edited_at_date_and_time = 10015;</code>
     */
    private $edited_at_date_and_time = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ConditionPartID" innerhalb aller der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile
     * </pre>
     *
     * <code>.dstore.values.IntegerValue part_sort_no = 10016;</code>
     */
    private $part_sort_no = null;
    /**
     * <pre>
     * Bezeichnung des (Artikel-)Bedingungs-Teils "ConditionPartID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_part_description = 10017;</code>
     */
    private $condition_part_description = null;
    /**
     * <pre>
     * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherit_depth = 10018;</code>
     */
    private $inherit_depth = null;
    /**
     * <pre>
     * ID einer (Artikel-)Bedingungs-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_group_id = 20002;</code>
     */
    private $condition_group_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\ImGetItemConditionGroupsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 10001;</code>
     */
    public function getOperator1()
    {
        return $this->operator1;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition1". Mögliche Werte :- "="- "!=" / "&lt;&gt;"  - "~" / "!~" (LIKE / NOT LIKE)- "&gt;"- "&lt;"- "&gt;="- "&lt;="- "IN" / "!I" (in / NICHT in Menge von "Value"-Werten)- "E" / "!E" (IRGENDEINE / KEINE Eigenschaft)
     * </pre>
     *
     * <code>.dstore.values.StringValue operator1 = 10001;</code>
     */
    public function setOperator1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->operator1 = $var;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 10002;</code>
     */
    public function getCondition1()
    {
        return $this->condition1;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator1" anzuwenden ist ("NULL", falls "Operator1" den Wert "E" oder "!E" hat)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition1 = 10002;</code>
     */
    public function setCondition1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition1 = $var;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 10003;</code>
     */
    public function getCondition2()
    {
        return $this->condition2;
    }

    /**
     * <pre>
     * Bedingung, die in Verbindung mit "Operator2" anzuwenden ist (nur belegt, wenn "Operator2" den Wert "&lt;" oder "&lt;=" enthält)
     * </pre>
     *
     * <code>.dstore.values.StringValue condition2 = 10003;</code>
     */
    public function setCondition2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition2 = $var;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 10004;</code>
     */
    public function getOperator2()
    {
        return $this->operator2;
    }

    /**
     * <pre>
     * Operator für die Bedingung "Condition2". Mögliche Werte :- "&lt;" oder "&lt;=", falls "Operator1" "&gt;" oder "&gt;=" enthält- bel. Zeichen (Trennzeichen für Werte-Menge), falls "Operator1" "IN" oder "!I" enthält
     * </pre>
     *
     * <code>.dstore.values.StringValue operator2 = 10004;</code>
     */
    public function setOperator2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->operator2 = $var;
    }

    /**
     * <pre>
     * Bezeichnung der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_group_description = 10005;</code>
     */
    public function getConditionGroupDescription()
    {
        return $this->condition_group_description;
    }

    /**
     * <pre>
     * Bezeichnung der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_group_description = 10005;</code>
     */
    public function setConditionGroupDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition_group_description = $var;
    }

    /**
     * <pre>
     * Gibt an, ob die der "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue combine_parts_with_a_n_d_operator = 10006;</code>
     */
    public function getCombinePartsWithANDOperator()
    {
        return $this->combine_parts_with_a_n_d_operator;
    }

    /**
     * <pre>
     * Gibt an, ob die der "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile logisch mit UND verknüpft werden ("1") oder mit ODER ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue combine_parts_with_a_n_d_operator = 10006;</code>
     */
    public function setCombinePartsWithANDOperator(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->combine_parts_with_a_n_d_operator = $var;
    }

    /**
     * <pre>
     * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue recursive_evaluation = 10007;</code>
     */
    public function getRecursiveEvaluation()
    {
        return $this->recursive_evaluation;
    }

    /**
     * <pre>
     * Was soll zwecks Prüfung der Bedingung zu "NodeCharacteristicID" (wenn rekursiv) gewählt werden ?"0" : direkte Eigenschaft (also eine Merkmal-ID)"1" : rekursiv ausgewertete Eigenschaft"2" : zugehör. Beschreibung der Eigenschaft (also der Merkmal-ID)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue recursive_evaluation = 10007;</code>
     */
    public function setRecursiveEvaluation(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->recursive_evaluation = $var;
    }

    /**
     * <pre>
     * ID eines (Artikel-)Bedingungs-Teils, das der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_part_id = 10008;</code>
     */
    public function getConditionPartId()
    {
        return $this->condition_part_id;
    }

    /**
     * <pre>
     * ID eines (Artikel-)Bedingungs-Teils, das der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_part_id = 10008;</code>
     */
    public function setConditionPartId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->condition_part_id = $var;
    }

    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
     * </pre>
     *
     * <code>.dstore.values.StringValue domain_tree_node_ids = 10009;</code>
     */
    public function getDomainTreeNodeIds()
    {
        return $this->domain_tree_node_ids;
    }

    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum ein Vorgänger-Element besitzen, dessen "TreeNodeID" aus der hier angegebenen Menge von IDs kommt. Sonderfall ",," bedeutet "beliebiger Vorgänger".
     * </pre>
     *
     * <code>.dstore.values.StringValue domain_tree_node_ids = 10009;</code>
     */
    public function setDomainTreeNodeIds(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->domain_tree_node_ids = $var;
    }

    /**
     * <pre>
     * ID eines Merkmals. Um "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10010;</code>
     */
    public function getNodeCharacteristicId()
    {
        return $this->node_characteristic_id;
    }

    /**
     * <pre>
     * ID eines Merkmals. Um "ConditionPartID" zu erfüllen, muß ein Element im Artikelbaum eine Eigenschaft zu diesem Merkmal besitzen, die der Bedingung ("Operator1" etc.) genügt. Sonderfall "-1" : "KEINE Eigenschafts-Bedingung" (ist also immer erfüllt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10010;</code>
     */
    public function setNodeCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_characteristic_id = $var;
    }

    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" erstellt wurde
     * </pre>
     *
     * <code>.dstore.values.TimestampValue created_at_date_and_time = 10011;</code>
     */
    public function getCreatedAtDateAndTime()
    {
        return $this->created_at_date_and_time;
    }

    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" erstellt wurde
     * </pre>
     *
     * <code>.dstore.values.TimestampValue created_at_date_and_time = 10011;</code>
     */
    public function setCreatedAtDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->created_at_date_and_time = $var;
    }

    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Artikel-Bedingung verwendet ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_an_item_condition = 10012;</code>
     */
    public function getUsedInAnItemCondition()
    {
        return $this->used_in_an_item_condition;
    }

    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Artikel-Bedingung verwendet ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_an_item_condition = 10012;</code>
     */
    public function setUsedInAnItemCondition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->used_in_an_item_condition = $var;
    }

    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Verkaufs-Aktion (eine sog. "Campaign") um zusätzliche Kriterien erweitert ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_campaign_item_cond_groups = 10013;</code>
     */
    public function getUsedInCampaignItemCondGroups()
    {
        return $this->used_in_campaign_item_cond_groups;
    }

    /**
     * <pre>
     * Wird die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" in einer Verkaufs-Aktion (eine sog. "Campaign") um zusätzliche Kriterien erweitert ("1") oder nicht ("0") ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue used_in_campaign_item_cond_groups = 10013;</code>
     */
    public function setUsedInCampaignItemCondGroups(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->used_in_campaign_item_cond_groups = $var;
    }

    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
     * </pre>
     *
     * <code>.dstore.values.StringValue level_ids = 10014;</code>
     */
    public function getLevelIds()
    {
        return $this->level_ids;
    }

    /**
     * <pre>
     * Um den (Artikel-)Bedingungs-Teil "ConditionPartID" zu erfüllen, muß die Hierarchie ("LevelID") eines Artikel-Elementes aus der hier angegebenen Menge der Hierarchien ("LevelID"s) kommen. Sonderfall ",," bedeutet "beliebige Hierarchie".
     * </pre>
     *
     * <code>.dstore.values.StringValue level_ids = 10014;</code>
     */
    public function setLevelIds(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->level_ids = $var;
    }

    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zuletzt geändert wurde (kann "NULL" sein)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue edited_at_date_and_time = 10015;</code>
     */
    public function getEditedAtDateAndTime()
    {
        return $this->edited_at_date_and_time;
    }

    /**
     * <pre>
     * Zeitpunkt, an dem die (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zuletzt geändert wurde (kann "NULL" sein)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue edited_at_date_and_time = 10015;</code>
     */
    public function setEditedAtDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->edited_at_date_and_time = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ConditionPartID" innerhalb aller der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile
     * </pre>
     *
     * <code>.dstore.values.IntegerValue part_sort_no = 10016;</code>
     */
    public function getPartSortNo()
    {
        return $this->part_sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "ConditionPartID" innerhalb aller der (Artikel-)Bedingungs-Gruppe "&#64;ConditionGroupID" zugeordneten (Artikel-)Bedingungs-Teile
     * </pre>
     *
     * <code>.dstore.values.IntegerValue part_sort_no = 10016;</code>
     */
    public function setPartSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->part_sort_no = $var;
    }

    /**
     * <pre>
     * Bezeichnung des (Artikel-)Bedingungs-Teils "ConditionPartID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_part_description = 10017;</code>
     */
    public function getConditionPartDescription()
    {
        return $this->condition_part_description;
    }

    /**
     * <pre>
     * Bezeichnung des (Artikel-)Bedingungs-Teils "ConditionPartID"
     * </pre>
     *
     * <code>.dstore.values.StringValue condition_part_description = 10017;</code>
     */
    public function setConditionPartDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition_part_description = $var;
    }

    /**
     * <pre>
     * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherit_depth = 10018;</code>
     */
    public function getInheritDepth()
    {
        return $this->inherit_depth;
    }

    /**
     * <pre>
     * Welche Eigenschaften zu "NodeCharacteristicID" hinsichtlich Vererbung sollen bei Prüfung der Eigenschafts-Bedingung beachtet werden :"-1" : Alle"0" : unvererbte"1" : direkte u. einfach geerbte"2" : direkte u. einfach oder zweifach geerbteusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherit_depth = 10018;</code>
     */
    public function setInheritDepth(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->inherit_depth = $var;
    }

    /**
     * <pre>
     * ID einer (Artikel-)Bedingungs-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_group_id = 20002;</code>
     */
    public function getConditionGroupId()
    {
        return $this->condition_group_id;
    }

    /**
     * <pre>
     * ID einer (Artikel-)Bedingungs-Gruppe
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_group_id = 20002;</code>
     */
    public function setConditionGroupId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->condition_group_id = $var;
    }

}

