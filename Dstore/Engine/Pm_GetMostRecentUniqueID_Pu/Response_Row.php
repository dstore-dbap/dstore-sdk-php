<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/pm_GetMostRecentUniqueID_Pu.proto

namespace Dstore\Engine\Pm_GetMostRecentUniqueID_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.pm_GetMostRecentUniqueID_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID des "aktuellsten Besuchers" (siehe Beschreibung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visitor_id = 10001;</code>
     */
    private $visitor_id = null;
    /**
     * <pre>
     * Eindeutige ID des Besuchers "VisitorID". Diese wird meistens bei der Identifizierung oder für "Session"-Informationen benötigt, da sie erheblich mehr Sicherheit als die "VisitorID" bietet.
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_id = 10002;</code>
     */
    private $unique_id = null;
    /**
     * <pre>
     * ID der identifizierten Person
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * Seit wann ist der Besucher "VisitorID" der Person "PersonID" zugeordnet
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10004;</code>
     */
    private $valid_from = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\PmGetMostRecentUniqueIDPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID des "aktuellsten Besuchers" (siehe Beschreibung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visitor_id = 10001;</code>
     */
    public function getVisitorId()
    {
        return $this->visitor_id;
    }

    /**
     * <pre>
     * ID des "aktuellsten Besuchers" (siehe Beschreibung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue visitor_id = 10001;</code>
     */
    public function setVisitorId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->visitor_id = $var;
    }

    /**
     * <pre>
     * Eindeutige ID des Besuchers "VisitorID". Diese wird meistens bei der Identifizierung oder für "Session"-Informationen benötigt, da sie erheblich mehr Sicherheit als die "VisitorID" bietet.
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_id = 10002;</code>
     */
    public function getUniqueId()
    {
        return $this->unique_id;
    }

    /**
     * <pre>
     * Eindeutige ID des Besuchers "VisitorID". Diese wird meistens bei der Identifizierung oder für "Session"-Informationen benötigt, da sie erheblich mehr Sicherheit als die "VisitorID" bietet.
     * </pre>
     *
     * <code>.dstore.values.StringValue unique_id = 10002;</code>
     */
    public function setUniqueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unique_id = $var;
    }

    /**
     * <pre>
     * ID der identifizierten Person
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID der identifizierten Person
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10003;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * Seit wann ist der Besucher "VisitorID" der Person "PersonID" zugeordnet
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10004;</code>
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }

    /**
     * <pre>
     * Seit wann ist der Besucher "VisitorID" der Person "PersonID" zugeordnet
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10004;</code>
     */
    public function setValidFrom(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_from = $var;
    }

}

