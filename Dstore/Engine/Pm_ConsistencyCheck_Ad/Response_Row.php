<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto

namespace Dstore\Engine\Pm_ConsistencyCheck_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.pm_ConsistencyCheck_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_characteristic_id = 10001;</code>
     */
    private $person_characteristic_id = null;
    /**
     * <pre>
     * Die Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    private $value = null;
    /**
     * <pre>
     * ID der Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10003;</code>
     */
    private $value_id = null;
    /**
     * <pre>
     * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_by_person_type_bitmap = 10004;</code>
     */
    private $used_by_person_type_bitmap = null;
    /**
     * <pre>
     * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * Richtiger Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_used_by_person_type_btmp = 20001;</code>
     */
    private $correct_used_by_person_type_btmp = null;
    /**
     * <pre>
     * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_used_by_person_type_btmp = 20005;</code>
     */
    private $wrong_used_by_person_type_btmp = null;
    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_values = 30001;</code>
     */
    private $wrong_count_values = null;
    /**
     * <pre>
     * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.StringValue first_four_characters_lower_case = 30002;</code>
     */
    private $first_four_characters_lower_case = null;
    /**
     * <pre>
     * Richtiger Wert für "CountValues"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_values = 30004;</code>
     */
    private $correct_count_values = null;
    /**
     * <pre>
     * Richtiger Wert für "CountPersons"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_persons = 30005;</code>
     */
    private $correct_count_persons = null;
    /**
     * <pre>
     * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inconsistence_type = 30006;</code>
     */
    private $inconsistence_type = null;
    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_persons = 30007;</code>
     */
    private $wrong_count_persons = null;
    /**
     * <pre>
     * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 30008;</code>
     */
    private $person_type_id = null;
    /**
     * <pre>
     * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
     * </pre>
     *
     * <code>.dstore.values.StringValue valuelowercase = 40001;</code>
     */
    private $valuelowercase = null;
    /**
     * <pre>
     * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 40002;</code>
     */
    private $person_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\PmConsistencyCheckAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_characteristic_id = 10001;</code>
     */
    public function getPersonCharacteristicId()
    {
        return $this->person_characteristic_id;
    }

    /**
     * <pre>
     * ID des Merkmals zu dem die nicht referenzierte Eigenschaft gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_characteristic_id = 10001;</code>
     */
    public function setPersonCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_characteristic_id = $var;
    }

    /**
     * <pre>
     * Die Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     * Die Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    public function setValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value = $var;
    }

    /**
     * <pre>
     * ID der Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10003;</code>
     */
    public function getValueId()
    {
        return $this->value_id;
    }

    /**
     * <pre>
     * ID der Eigenschaft, die nicht mehr referenziert wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10003;</code>
     */
    public function setValueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->value_id = $var;
    }

    /**
     * <pre>
     * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_by_person_type_bitmap = 10004;</code>
     */
    public function getUsedByPersonTypeBitmap()
    {
        return $this->used_by_person_type_bitmap;
    }

    /**
     * <pre>
     * Bit-Muster, durch das angegeben ist, welche Personentypen die Eigenschaft verwenden (ist also falsch, wenn nicht "NULL" oder "0")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue used_by_person_type_bitmap = 10004;</code>
     */
    public function setUsedByPersonTypeBitmap(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->used_by_person_type_bitmap = $var;
    }

    /**
     * <pre>
     * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Reihenfolge in der Sortierung ALLER Eigenschaften zu dem Merkmal
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10005;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * Richtiger Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_used_by_person_type_btmp = 20001;</code>
     */
    public function getCorrectUsedByPersonTypeBtmp()
    {
        return $this->correct_used_by_person_type_btmp;
    }

    /**
     * <pre>
     * Richtiger Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_used_by_person_type_btmp = 20001;</code>
     */
    public function setCorrectUsedByPersonTypeBtmp(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->correct_used_by_person_type_btmp = $var;
    }

    /**
     * <pre>
     * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_used_by_person_type_btmp = 20005;</code>
     */
    public function getWrongUsedByPersonTypeBtmp()
    {
        return $this->wrong_used_by_person_type_btmp;
    }

    /**
     * <pre>
     * Alter (falscher) Wert von "UsedByPersonType_Bitmap"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_used_by_person_type_btmp = 20005;</code>
     */
    public function setWrongUsedByPersonTypeBtmp(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->wrong_used_by_person_type_btmp = $var;
    }

    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_values = 30001;</code>
     */
    public function getWrongCountValues()
    {
        return $this->wrong_count_values;
    }

    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert für "CountValues"; das ist die Anzahl verschiedener Eigenschaften, die von dem Personentyp verwendet werden und in den ersten vier Buchstaben (case-insensitiv) mit "FirstFourCharactersLowerCase" übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_values = 30001;</code>
     */
    public function setWrongCountValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->wrong_count_values = $var;
    }

    /**
     * <pre>
     * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.StringValue first_four_characters_lower_case = 30002;</code>
     */
    public function getFirstFourCharactersLowerCase()
    {
        return $this->first_four_characters_lower_case;
    }

    /**
     * <pre>
     * Repräsentiert alle Eigenschaften zu dem Merkmal, die von dem Personentyp verwendet werden, die in den ersten vier Buchstaben (case-insensitiv) mit diesem Wert übereinstimmen.
     * </pre>
     *
     * <code>.dstore.values.StringValue first_four_characters_lower_case = 30002;</code>
     */
    public function setFirstFourCharactersLowerCase(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->first_four_characters_lower_case = $var;
    }

    /**
     * <pre>
     * Richtiger Wert für "CountValues"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_values = 30004;</code>
     */
    public function getCorrectCountValues()
    {
        return $this->correct_count_values;
    }

    /**
     * <pre>
     * Richtiger Wert für "CountValues"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_values = 30004;</code>
     */
    public function setCorrectCountValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->correct_count_values = $var;
    }

    /**
     * <pre>
     * Richtiger Wert für "CountPersons"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_persons = 30005;</code>
     */
    public function getCorrectCountPersons()
    {
        return $this->correct_count_persons;
    }

    /**
     * <pre>
     * Richtiger Wert für "CountPersons"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue correct_count_persons = 30005;</code>
     */
    public function setCorrectCountPersons(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->correct_count_persons = $var;
    }

    /**
     * <pre>
     * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inconsistence_type = 30006;</code>
     */
    public function getInconsistenceType()
    {
        return $this->inconsistence_type;
    }

    /**
     * <pre>
     * Gibt die Art des Fehlers des Datensatzes an:"1" : falscher Wert"2" : fehlender Wert"3" : überfüssiger Wert
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inconsistence_type = 30006;</code>
     */
    public function setInconsistenceType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->inconsistence_type = $var;
    }

    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_persons = 30007;</code>
     */
    public function getWrongCountPersons()
    {
        return $this->wrong_count_persons;
    }

    /**
     * <pre>
     * Alter (falscher bzw. nicht vorhandener) Wert von "CountPersons", also der Anzahl Personen, die eine Eigenschaft haben, die durch "FirstFourCharactersLowerCase" repräsentiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue wrong_count_persons = 30007;</code>
     */
    public function setWrongCountPersons(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->wrong_count_persons = $var;
    }

    /**
     * <pre>
     * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 30008;</code>
     */
    public function getPersonTypeId()
    {
        return $this->person_type_id;
    }

    /**
     * <pre>
     * ID des Personentyps zu dem der fehlerhafte Datensatz gehört
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id = 30008;</code>
     */
    public function setPersonTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_type_id = $var;
    }

    /**
     * <pre>
     * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
     * </pre>
     *
     * <code>.dstore.values.StringValue valuelowercase = 40001;</code>
     */
    public function getValuelowercase()
    {
        return $this->valuelowercase;
    }

    /**
     * <pre>
     * Eigenschaft (lowercase) zum "unique"-Merkmal "PersonCharacteristicID", die mehrfache verwendet wird oder für die der zugehörige Datensatz in "UniquePersonProperties" fehlt
     * </pre>
     *
     * <code>.dstore.values.StringValue valuelowercase = 40001;</code>
     */
    public function setValuelowercase(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->valuelowercase = $var;
    }

    /**
     * <pre>
     * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 40002;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID der Person, der "Value" als Eigenschaft zugeord. ist, und es gilt : Entweder gibt es in der Ergebnismenge eine ANDERE "PersonID", der eine Eigensch. mit ident. "Value_lowercase" zugeord. ist oder es fehlt der zugehör. Datensatz in "UniquePersonProperti
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 40002;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

}

