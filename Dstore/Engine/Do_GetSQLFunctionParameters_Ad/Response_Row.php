<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/do_GetSQLFunctionParameters_Ad.proto

namespace Dstore\Engine\Do_GetSQLFunctionParameters_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.do_GetSQLFunctionParameters_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Der Wert, mit dem der Parameter "ParameterName" vorbelegt ist. Hinweis : Im Gegensatz zu Parametern bei Prozeduren muß bei SQL-Funktionen ein Parameter IMMER angegeben werden, auch wenn ein "Default" definiert ist (um den zu verwenden, "default" angeben).
     * </pre>
     *
     * <code>.dstore.values.StringValue default_value = 10001;</code>
     */
    private $default_value = null;
    /**
     * <pre>
     * Wieviel Byte können Werte, die für den Parameter "ParameterName" übergeben werden, maximal enthalten. Bei vielen Daten-Typen ist die Speicherbelegung immer so groß wie dieser Wert (bei numerischen Daten-Typen z.B.).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue length = 10002;</code>
     */
    private $length = null;
    /**
     * <pre>
     * Seit welcher Version gibt es den Parameter "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue introduced_indstore_version = 10003;</code>
     */
    private $introduced_indstore_version = null;
    /**
     * <pre>
     * Daten-Typ des Parameters "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue data_type = 10004;</code>
     */
    private $data_type = null;
    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die maximale Anzahl Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10005;</code>
     */
    private $precision_value = null;
    /**
     * <pre>
     * Parameter-Name der SQL-Funktion "&#64;SQLFunctionName". Hinweis : Im Vergleich zu "mi_GetSQLFunctionParameters" gibt es KEINEN "dummy"-Parameter mit dem Namen "Return Type" (was den Rückgabewert der Funktion darstellt) !
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10006;</code>
     */
    private $parameter_name = null;
    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die Genauigkeit, sprich die maximale Anzahl an Nachkomma-Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue scale = 10007;</code>
     */
    private $scale = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\DoGetSQLFunctionParametersAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Der Wert, mit dem der Parameter "ParameterName" vorbelegt ist. Hinweis : Im Gegensatz zu Parametern bei Prozeduren muß bei SQL-Funktionen ein Parameter IMMER angegeben werden, auch wenn ein "Default" definiert ist (um den zu verwenden, "default" angeben).
     * </pre>
     *
     * <code>.dstore.values.StringValue default_value = 10001;</code>
     */
    public function getDefaultValue()
    {
        return $this->default_value;
    }

    /**
     * <pre>
     * Der Wert, mit dem der Parameter "ParameterName" vorbelegt ist. Hinweis : Im Gegensatz zu Parametern bei Prozeduren muß bei SQL-Funktionen ein Parameter IMMER angegeben werden, auch wenn ein "Default" definiert ist (um den zu verwenden, "default" angeben).
     * </pre>
     *
     * <code>.dstore.values.StringValue default_value = 10001;</code>
     */
    public function setDefaultValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->default_value = $var;
    }

    /**
     * <pre>
     * Wieviel Byte können Werte, die für den Parameter "ParameterName" übergeben werden, maximal enthalten. Bei vielen Daten-Typen ist die Speicherbelegung immer so groß wie dieser Wert (bei numerischen Daten-Typen z.B.).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue length = 10002;</code>
     */
    public function getLength()
    {
        return $this->length;
    }

    /**
     * <pre>
     * Wieviel Byte können Werte, die für den Parameter "ParameterName" übergeben werden, maximal enthalten. Bei vielen Daten-Typen ist die Speicherbelegung immer so groß wie dieser Wert (bei numerischen Daten-Typen z.B.).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue length = 10002;</code>
     */
    public function setLength(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->length = $var;
    }

    /**
     * <pre>
     * Seit welcher Version gibt es den Parameter "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue introduced_indstore_version = 10003;</code>
     */
    public function getIntroducedIndstoreVersion()
    {
        return $this->introduced_indstore_version;
    }

    /**
     * <pre>
     * Seit welcher Version gibt es den Parameter "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue introduced_indstore_version = 10003;</code>
     */
    public function setIntroducedIndstoreVersion(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->introduced_indstore_version = $var;
    }

    /**
     * <pre>
     * Daten-Typ des Parameters "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue data_type = 10004;</code>
     */
    public function getDataType()
    {
        return $this->data_type;
    }

    /**
     * <pre>
     * Daten-Typ des Parameters "ParameterName"
     * </pre>
     *
     * <code>.dstore.values.StringValue data_type = 10004;</code>
     */
    public function setDataType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->data_type = $var;
    }

    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die maximale Anzahl Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10005;</code>
     */
    public function getPrecisionValue()
    {
        return $this->precision_value;
    }

    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die maximale Anzahl Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10005;</code>
     */
    public function setPrecisionValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->precision_value = $var;
    }

    /**
     * <pre>
     * Parameter-Name der SQL-Funktion "&#64;SQLFunctionName". Hinweis : Im Vergleich zu "mi_GetSQLFunctionParameters" gibt es KEINEN "dummy"-Parameter mit dem Namen "Return Type" (was den Rückgabewert der Funktion darstellt) !
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10006;</code>
     */
    public function getParameterName()
    {
        return $this->parameter_name;
    }

    /**
     * <pre>
     * Parameter-Name der SQL-Funktion "&#64;SQLFunctionName". Hinweis : Im Vergleich zu "mi_GetSQLFunctionParameters" gibt es KEINEN "dummy"-Parameter mit dem Namen "Return Type" (was den Rückgabewert der Funktion darstellt) !
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10006;</code>
     */
    public function setParameterName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->parameter_name = $var;
    }

    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die Genauigkeit, sprich die maximale Anzahl an Nachkomma-Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue scale = 10007;</code>
     */
    public function getScale()
    {
        return $this->scale;
    }

    /**
     * <pre>
     * Gilt nur für einige numerische Daten-Typen (z.B. "decimal") und gibt die Genauigkeit, sprich die maximale Anzahl an Nachkomma-Stellen an, die ein Wert für den Parameter "ParameterName" enthalten kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue scale = 10007;</code>
     */
    public function setScale(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->scale = $var;
    }

}

