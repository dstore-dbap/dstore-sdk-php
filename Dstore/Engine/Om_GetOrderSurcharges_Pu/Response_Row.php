<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetOrderSurcharges_Pu.proto

namespace Dstore\Engine\Om_GetOrderSurcharges_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetOrderSurcharges_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 10001;</code>
     */
    private $taxes_multiplier = null;
    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10002;</code>
     */
    private $absolute_net_surcharge = null;
    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10003;</code>
     */
    private $absolute_gross_surcharge = null;
    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10004;</code>
     */
    private $position_no = null;
    /**
     * <pre>
     * Bezeichnung von "SurchargeTypeCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10005;</code>
     */
    private $category_description = null;
    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10006;</code>
     */
    private $surcharge_type_description = null;
    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10007;</code>
     */
    private $surcharge_type_id = null;
    /**
     * <pre>
     * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10008;</code>
     */
    private $surcharge_type_category_id = null;
    /**
     * <pre>
     * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10009;</code>
     */
    private $currency_id = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 10010;</code>
     */
    private $currency_symbol = null;
    /**
     * <pre>
     * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue original_surcharge_value = 20001;</code>
     */
    private $original_surcharge_value = null;
    /**
     * <pre>
     * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_unit_id = 20002;</code>
     */
    private $orig_surch_val_unit_id = null;
    /**
     * <pre>
     * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
     * </pre>
     *
     * <code>.dstore.values.StringValue orig_surch_val_unit_symbol = 20003;</code>
     */
    private $orig_surch_val_unit_symbol = null;
    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_net_sum = 20004;</code>
     */
    private $applied_on_net_sum = null;
    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_gross_sum = 20008;</code>
     */
    private $applied_on_gross_sum = null;
    /**
     * <pre>
     * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_is_absolute = 20011;</code>
     */
    private $orig_surch_val_is_absolute = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetOrderSurchargesPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 10001;</code>
     */
    public function getTaxesMultiplier()
    {
        return $this->taxes_multiplier;
    }

    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator" ("AbsoluteNetSurcharge" hiermit multipliziert ergibt "AbsoluteGrossSurcharge"). Hinweis : Wenn "0" oder "2" für "&#64;SplitByTaxes" angegeben ist, kommt hier pro "PositionNo" (auch) ein Datensatz mit "NULL" zurück.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 10001;</code>
     */
    public function setTaxesMultiplier(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->taxes_multiplier = $var;
    }

    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10002;</code>
     */
    public function getAbsoluteNetSurcharge()
    {
        return $this->absolute_net_surcharge;
    }

    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10002;</code>
     */
    public function setAbsoluteNetSurcharge(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->absolute_net_surcharge = $var;
    }

    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10003;</code>
     */
    public function getAbsoluteGrossSurcharge()
    {
        return $this->absolute_gross_surcharge;
    }

    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der Währung des Auftrags (-&gt; "CurrencyID")
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10003;</code>
     */
    public function setAbsoluteGrossSurcharge(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->absolute_gross_surcharge = $var;
    }

    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10004;</code>
     */
    public function getPositionNo()
    {
        return $this->position_no;
    }

    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "OrderSurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10004;</code>
     */
    public function setPositionNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->position_no = $var;
    }

    /**
     * <pre>
     * Bezeichnung von "SurchargeTypeCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10005;</code>
     */
    public function getCategoryDescription()
    {
        return $this->category_description;
    }

    /**
     * <pre>
     * Bezeichnung von "SurchargeTypeCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10005;</code>
     */
    public function setCategoryDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->category_description = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10006;</code>
     */
    public function getSurchargeTypeDescription()
    {
        return $this->surcharge_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10006;</code>
     */
    public function setSurchargeTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->surcharge_type_description = $var;
    }

    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10007;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10007;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

    /**
     * <pre>
     * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10008;</code>
     */
    public function getSurchargeTypeCategoryId()
    {
        return $this->surcharge_type_category_id;
    }

    /**
     * <pre>
     * ID einer Kategorie von "Surcharges", der "SurchargeTypeID" zugeordnet ist Anmerkung : Es ist eine 1:1-Zuordnung, d.h. die "SurchargeTypeID" muß einer Kategorie zugeordnet sein, sie kann aber auch nicht mehreren Kategorien zugeordnet sein !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_category_id = 10008;</code>
     */
    public function setSurchargeTypeCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_category_id = $var;
    }

    /**
     * <pre>
     * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10009;</code>
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * <pre>
     * ID der Währungs-Einheit des Auftrags "&#64;OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10009;</code>
     */
    public function setCurrencyId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->currency_id = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 10010;</code>
     */
    public function getCurrencySymbol()
    {
        return $this->currency_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der (Währungs-)Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency_symbol = 10010;</code>
     */
    public function setCurrencySymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->currency_symbol = $var;
    }

    /**
     * <pre>
     * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue original_surcharge_value = 20001;</code>
     */
    public function getOriginalSurchargeValue()
    {
        return $this->original_surcharge_value;
    }

    /**
     * <pre>
     * Information zur Informations-Art "AppliedSurchargeValue" (ID "-1"), gibt also den konfigurierten "Surcharge"-Wert an (kann ja z.B. ein Prozent-Wert sein), der angewandt wurde. Anmerkung : Bei Aufträgen VOR 6.0.2 (Mai/Juni 2011) immer "NULL".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue original_surcharge_value = 20001;</code>
     */
    public function setOriginalSurchargeValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->original_surcharge_value = $var;
    }

    /**
     * <pre>
     * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_unit_id = 20002;</code>
     */
    public function getOrigSurchValUnitId()
    {
        return $this->orig_surch_val_unit_id;
    }

    /**
     * <pre>
     * ID der Einheit, in der "OriginalSurchargeValue" angegeben ist. Im Fall "OrigSurchValIsAbsolute = 0" ist dies immer die "Prozent"-Einheit, ansonsten eine Währungs-Einheit (die aber nicht unbedingt mit "CurrencyID", der Währung des Auftrags, übereinstimmt).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_unit_id = 20002;</code>
     */
    public function setOrigSurchValUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->orig_surch_val_unit_id = $var;
    }

    /**
     * <pre>
     * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
     * </pre>
     *
     * <code>.dstore.values.StringValue orig_surch_val_unit_symbol = 20003;</code>
     */
    public function getOrigSurchValUnitSymbol()
    {
        return $this->orig_surch_val_unit_symbol;
    }

    /**
     * <pre>
     * Symbol der Einheit "OrigSurchValUnitID" (z.B. "%" oder "EUR")
     * </pre>
     *
     * <code>.dstore.values.StringValue orig_surch_val_unit_symbol = 20003;</code>
     */
    public function setOrigSurchValUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->orig_surch_val_unit_symbol = $var;
    }

    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_net_sum = 20004;</code>
     */
    public function getAppliedOnNetSum()
    {
        return $this->applied_on_net_sum;
    }

    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Netto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_net_sum = 20004;</code>
     */
    public function setAppliedOnNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->applied_on_net_sum = $var;
    }

    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_gross_sum = 20008;</code>
     */
    public function getAppliedOnGrossSum()
    {
        return $this->applied_on_gross_sum;
    }

    /**
     * <pre>
     * Information zur Informations-Art "SurchargeAppliedOnGrossSum" (ID "-2"). Gibt an, auf welchen Brutto-Betrag der "Surcharge" angewandt wurde (insbesondere bei relativen "Surcharges" relevant, um das Ergebnis nachvollziehen zu können).
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_on_gross_sum = 20008;</code>
     */
    public function setAppliedOnGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->applied_on_gross_sum = $var;
    }

    /**
     * <pre>
     * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_is_absolute = 20011;</code>
     */
    public function getOrigSurchValIsAbsolute()
    {
        return $this->orig_surch_val_is_absolute;
    }

    /**
     * <pre>
     * Gibt an, wie "OriginalSurchargeValue" zu verstehen ist :"0" : Es ist eine relative Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "OrigSurchValUnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue orig_surch_val_is_absolute = 20011;</code>
     */
    public function setOrigSurchValIsAbsolute(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->orig_surch_val_is_absolute = $var;
    }

}

