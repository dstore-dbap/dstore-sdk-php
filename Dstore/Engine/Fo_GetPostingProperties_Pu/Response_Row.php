<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/fo_GetPostingProperties_Pu.proto

namespace Dstore\Engine\Fo_GetPostingProperties_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.fo_GetPostingProperties_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID eines Postings, das die Eigenschaft "Value" besitzt. Hierbei handelt es sich entweder um "&#64;PostingID" oder um eine ID, die via "tempdb.dbo.OneID" übergeben wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10001;</code>
     */
    private $posting_id = null;
    /**
     * <pre>
     * Die Eigenschaft des Beitrags "PostingID" zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    private $value = null;
    /**
     * <pre>
     * ID des Posting-Merkmals, auf das sich die Eigenschaft "Value" bezieht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10003;</code>
     */
    private $characteristic_id = null;
    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    private $value_id = null;
    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über diese Prozedur) nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 20002;</code>
     */
    private $check_posting_visibility = null;
    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20003;</code>
     */
    private $characteristic_description = null;
    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 20004;</code>
     */
    private $field_type_id = null;
    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 20007;</code>
     */
    private $common_characteristic = null;
    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 20009;</code>
     */
    private $property_modification_allowed = null;
    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 20010;</code>
     */
    private $max_number_of_properties = null;
    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal "CharacteristicID" vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 20011;</code>
     */
    private $predefined_values = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\FoGetPostingPropertiesPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID eines Postings, das die Eigenschaft "Value" besitzt. Hierbei handelt es sich entweder um "&#64;PostingID" oder um eine ID, die via "tempdb.dbo.OneID" übergeben wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10001;</code>
     */
    public function getPostingId()
    {
        return $this->posting_id;
    }

    /**
     * <pre>
     * ID eines Postings, das die Eigenschaft "Value" besitzt. Hierbei handelt es sich entweder um "&#64;PostingID" oder um eine ID, die via "tempdb.dbo.OneID" übergeben wurde
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_id = 10001;</code>
     */
    public function setPostingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->posting_id = $var;
    }

    /**
     * <pre>
     * Die Eigenschaft des Beitrags "PostingID" zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     * Die Eigenschaft des Beitrags "PostingID" zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10002;</code>
     */
    public function setValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value = $var;
    }

    /**
     * <pre>
     * ID des Posting-Merkmals, auf das sich die Eigenschaft "Value" bezieht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10003;</code>
     */
    public function getCharacteristicId()
    {
        return $this->characteristic_id;
    }

    /**
     * <pre>
     * ID des Posting-Merkmals, auf das sich die Eigenschaft "Value" bezieht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10003;</code>
     */
    public function setCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->characteristic_id = $var;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    public function getValueId()
    {
        return $this->value_id;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10004;</code>
     */
    public function setValueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->value_id = $var;
    }

    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über diese Prozedur) nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 20002;</code>
     */
    public function getCheckPostingVisibility()
    {
        return $this->check_posting_visibility;
    }

    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über diese Prozedur) nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 20002;</code>
     */
    public function setCheckPostingVisibility(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->check_posting_visibility = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20003;</code>
     */
    public function getCharacteristicDescription()
    {
        return $this->characteristic_description;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 20003;</code>
     */
    public function setCharacteristicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->characteristic_description = $var;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 20004;</code>
     */
    public function getFieldTypeId()
    {
        return $this->field_type_id;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 20004;</code>
     */
    public function setFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->field_type_id = $var;
    }

    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 20007;</code>
     */
    public function getCommonCharacteristic()
    {
        return $this->common_characteristic;
    }

    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 20007;</code>
     */
    public function setCommonCharacteristic(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->common_characteristic = $var;
    }

    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 20009;</code>
     */
    public function getPropertyModificationAllowed()
    {
        return $this->property_modification_allowed;
    }

    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 20009;</code>
     */
    public function setPropertyModificationAllowed(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->property_modification_allowed = $var;
    }

    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 20010;</code>
     */
    public function getMaxNumberOfProperties()
    {
        return $this->max_number_of_properties;
    }

    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 20010;</code>
     */
    public function setMaxNumberOfProperties(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->max_number_of_properties = $var;
    }

    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal "CharacteristicID" vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 20011;</code>
     */
    public function getPredefinedValues()
    {
        return $this->predefined_values;
    }

    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal "CharacteristicID" vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 20011;</code>
     */
    public function setPredefinedValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->predefined_values = $var;
    }

}

