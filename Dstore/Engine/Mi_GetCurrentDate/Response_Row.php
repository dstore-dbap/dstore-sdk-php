<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetCurrentDate.proto

namespace Dstore\Engine\Mi_GetCurrentDate;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetCurrentDate.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Das aktuelle Datum der Datenbank als Zeichenkette im durch "&#64;DateAndTimeFormat" und "&#64;IncludeTime" angegebenen Format
     * </pre>
     *
     * <code>.dstore.values.StringValue current_date_char = 10001;</code>
     */
    private $current_date_char = null;
    /**
     * <pre>
     * Timestamp (Anzahl Millisekunden, die seit dem 01.01.1970 vergangen sind), wobei die Vorkomma-Stellen die Anzahl Sekunden (seit dem 01.01.1970) darstellen und die Nachkommastellen die restlichen Millisekunden enthalten
     * </pre>
     *
     * <code>.dstore.values.DecimalValue timestamp = 10002;</code>
     */
    private $timestamp = null;
    /**
     * <pre>
     * Das aktuelle Datum
     * </pre>
     *
     * <code>.dstore.values.TimestampValue current_date = 10003;</code>
     */
    private $current_date = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetCurrentDate::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Das aktuelle Datum der Datenbank als Zeichenkette im durch "&#64;DateAndTimeFormat" und "&#64;IncludeTime" angegebenen Format
     * </pre>
     *
     * <code>.dstore.values.StringValue current_date_char = 10001;</code>
     */
    public function getCurrentDateChar()
    {
        return $this->current_date_char;
    }

    /**
     * <pre>
     * Das aktuelle Datum der Datenbank als Zeichenkette im durch "&#64;DateAndTimeFormat" und "&#64;IncludeTime" angegebenen Format
     * </pre>
     *
     * <code>.dstore.values.StringValue current_date_char = 10001;</code>
     */
    public function setCurrentDateChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->current_date_char = $var;
    }

    /**
     * <pre>
     * Timestamp (Anzahl Millisekunden, die seit dem 01.01.1970 vergangen sind), wobei die Vorkomma-Stellen die Anzahl Sekunden (seit dem 01.01.1970) darstellen und die Nachkommastellen die restlichen Millisekunden enthalten
     * </pre>
     *
     * <code>.dstore.values.DecimalValue timestamp = 10002;</code>
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * <pre>
     * Timestamp (Anzahl Millisekunden, die seit dem 01.01.1970 vergangen sind), wobei die Vorkomma-Stellen die Anzahl Sekunden (seit dem 01.01.1970) darstellen und die Nachkommastellen die restlichen Millisekunden enthalten
     * </pre>
     *
     * <code>.dstore.values.DecimalValue timestamp = 10002;</code>
     */
    public function setTimestamp(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->timestamp = $var;
    }

    /**
     * <pre>
     * Das aktuelle Datum
     * </pre>
     *
     * <code>.dstore.values.TimestampValue current_date = 10003;</code>
     */
    public function getCurrentDate()
    {
        return $this->current_date;
    }

    /**
     * <pre>
     * Das aktuelle Datum
     * </pre>
     *
     * <code>.dstore.values.TimestampValue current_date = 10003;</code>
     */
    public function setCurrentDate(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->current_date = $var;
    }

}

