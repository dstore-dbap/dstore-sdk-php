<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetUnitConverts_Ad.proto

namespace Dstore\Engine\Mi_GetUnitConverts_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetUnitConverts_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Der Umrechnungs-"Kurs" von der Einheit "FromUnitID" in die Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue convert_factor = 10001;</code>
     */
    private $convert_factor = null;
    /**
     * <pre>
     * Die Umrechnung ist AB diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue from_date_and_time = 10002;</code>
     */
    private $from_date_and_time = null;
    /**
     * <pre>
     * ID einer Ausgangseinheit - z.Zt. immer "&#64;FromUnitID", da dieser Parameter immer angegeben werden muß (in einer späteren Version kann evtl. für diesen Parameter auch "NULL" übergeben werden, daher gibt es die Rückgabespalte)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_unit_id = 10003;</code>
     */
    private $from_unit_id = null;
    /**
     * <pre>
     * ID einer Zieleinheit
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_unit_id = 10004;</code>
     */
    private $to_unit_id = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "FromUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_unit_symbol = 10005;</code>
     */
    private $from_unit_symbol = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_unit_symbol = 10006;</code>
     */
    private $to_unit_symbol = null;
    /**
     * <pre>
     * Die Umrechnung ist BIS zu diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28") - "NULL" bedeutet, daß die Umrechnung bis auf unbestimmte Zeit gültig ist (bis der Zeitraum durch "mi_ModifyUnitConverts_Ad" geschlossen wird)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_date_and_time = 10007;</code>
     */
    private $to_date_and_time = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetUnitConvertsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Der Umrechnungs-"Kurs" von der Einheit "FromUnitID" in die Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue convert_factor = 10001;</code>
     */
    public function getConvertFactor()
    {
        return $this->convert_factor;
    }

    /**
     * <pre>
     * Der Umrechnungs-"Kurs" von der Einheit "FromUnitID" in die Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue convert_factor = 10001;</code>
     */
    public function setConvertFactor(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->convert_factor = $var;
    }

    /**
     * <pre>
     * Die Umrechnung ist AB diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue from_date_and_time = 10002;</code>
     */
    public function getFromDateAndTime()
    {
        return $this->from_date_and_time;
    }

    /**
     * <pre>
     * Die Umrechnung ist AB diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue from_date_and_time = 10002;</code>
     */
    public function setFromDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->from_date_and_time = $var;
    }

    /**
     * <pre>
     * ID einer Ausgangseinheit - z.Zt. immer "&#64;FromUnitID", da dieser Parameter immer angegeben werden muß (in einer späteren Version kann evtl. für diesen Parameter auch "NULL" übergeben werden, daher gibt es die Rückgabespalte)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_unit_id = 10003;</code>
     */
    public function getFromUnitId()
    {
        return $this->from_unit_id;
    }

    /**
     * <pre>
     * ID einer Ausgangseinheit - z.Zt. immer "&#64;FromUnitID", da dieser Parameter immer angegeben werden muß (in einer späteren Version kann evtl. für diesen Parameter auch "NULL" übergeben werden, daher gibt es die Rückgabespalte)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_unit_id = 10003;</code>
     */
    public function setFromUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->from_unit_id = $var;
    }

    /**
     * <pre>
     * ID einer Zieleinheit
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_unit_id = 10004;</code>
     */
    public function getToUnitId()
    {
        return $this->to_unit_id;
    }

    /**
     * <pre>
     * ID einer Zieleinheit
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_unit_id = 10004;</code>
     */
    public function setToUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->to_unit_id = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "FromUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_unit_symbol = 10005;</code>
     */
    public function getFromUnitSymbol()
    {
        return $this->from_unit_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "FromUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue from_unit_symbol = 10005;</code>
     */
    public function setFromUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->from_unit_symbol = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_unit_symbol = 10006;</code>
     */
    public function getToUnitSymbol()
    {
        return $this->to_unit_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "ToUnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue to_unit_symbol = 10006;</code>
     */
    public function setToUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->to_unit_symbol = $var;
    }

    /**
     * <pre>
     * Die Umrechnung ist BIS zu diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28") - "NULL" bedeutet, daß die Umrechnung bis auf unbestimmte Zeit gültig ist (bis der Zeitraum durch "mi_ModifyUnitConverts_Ad" geschlossen wird)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_date_and_time = 10007;</code>
     */
    public function getToDateAndTime()
    {
        return $this->to_date_and_time;
    }

    /**
     * <pre>
     * Die Umrechnung ist BIS zu diesem Zeitpunkt gültig (Format: "15.04.2000 12:33:28") - "NULL" bedeutet, daß die Umrechnung bis auf unbestimmte Zeit gültig ist (bis der Zeitraum durch "mi_ModifyUnitConverts_Ad" geschlossen wird)
     * </pre>
     *
     * <code>.dstore.values.StringValue to_date_and_time = 10007;</code>
     */
    public function setToDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->to_date_and_time = $var;
    }

}

