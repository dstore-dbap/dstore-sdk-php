<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetPaymentForShipping_Ad.proto

namespace Dstore\Engine\Om_GetPaymentForShipping_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetPaymentForShipping_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Übersetzung von "DetailedDescription" in der durch "&#64;LanguageID" angegeben Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_detailed_description = 10001;</code>
     */
    private $translated_detailed_description = null;
    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10002;</code>
     */
    private $payment_type_description = null;
    /**
     * <pre>
     * Übersetzung von "PaymentForShippingDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_description = 10003;</code>
     */
    private $translated_description = null;
    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10004;</code>
     */
    private $payment_for_shipping_id = null;
    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10005;</code>
     */
    private $description_for_admin = null;
    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10006;</code>
     */
    private $shipping_type_description = null;
    /**
     * <pre>
     * ID einer Versandart, die mit der Zahlungsart "PaymentTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10007;</code>
     */
    private $shipping_type_id = null;
    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    private $payment_for_shipping_description = null;
    /**
     * <pre>
     * ID einer Zahlungsart, die mit der Versandart "ShippingTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    private $payment_type_id = null;
    /**
     * <pre>
     * Ausführliche Beschreibung der Zahlungsart-Versandart-Kombination für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue detailed_description = 10010;</code>
     */
    private $detailed_description = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetPaymentForShippingAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Übersetzung von "DetailedDescription" in der durch "&#64;LanguageID" angegeben Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_detailed_description = 10001;</code>
     */
    public function getTranslatedDetailedDescription()
    {
        return $this->translated_detailed_description;
    }

    /**
     * <pre>
     * Übersetzung von "DetailedDescription" in der durch "&#64;LanguageID" angegeben Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_detailed_description = 10001;</code>
     */
    public function setTranslatedDetailedDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->translated_detailed_description = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10002;</code>
     */
    public function getPaymentTypeDescription()
    {
        return $this->payment_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10002;</code>
     */
    public function setPaymentTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_type_description = $var;
    }

    /**
     * <pre>
     * Übersetzung von "PaymentForShippingDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_description = 10003;</code>
     */
    public function getTranslatedDescription()
    {
        return $this->translated_description;
    }

    /**
     * <pre>
     * Übersetzung von "PaymentForShippingDescription" in der durch "&#64;LanguageID" angegebenen Sprache ("NULL", falls keine Übersetzung existiert)
     * </pre>
     *
     * <code>.dstore.values.StringValue translated_description = 10003;</code>
     */
    public function setTranslatedDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->translated_description = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10004;</code>
     */
    public function getPaymentForShippingId()
    {
        return $this->payment_for_shipping_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, genauer der Kombination aus "PaymentTypeID" und "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10004;</code>
     */
    public function setPaymentForShippingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_for_shipping_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10005;</code>
     */
    public function getDescriptionForAdmin()
    {
        return $this->description_for_admin;
    }

    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10005;</code>
     */
    public function setDescriptionForAdmin(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description_for_admin = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10006;</code>
     */
    public function getShippingTypeDescription()
    {
        return $this->shipping_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type_description = 10006;</code>
     */
    public function setShippingTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->shipping_type_description = $var;
    }

    /**
     * <pre>
     * ID einer Versandart, die mit der Zahlungsart "PaymentTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10007;</code>
     */
    public function getShippingTypeId()
    {
        return $this->shipping_type_id;
    }

    /**
     * <pre>
     * ID einer Versandart, die mit der Zahlungsart "PaymentTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10007;</code>
     */
    public function setShippingTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->shipping_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function getPaymentForShippingDescription()
    {
        return $this->payment_for_shipping_description;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function setPaymentForShippingDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_for_shipping_description = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart, die mit der Versandart "ShippingTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    public function getPaymentTypeId()
    {
        return $this->payment_type_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart, die mit der Versandart "ShippingTypeID" kombiniert werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10009;</code>
     */
    public function setPaymentTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_type_id = $var;
    }

    /**
     * <pre>
     * Ausführliche Beschreibung der Zahlungsart-Versandart-Kombination für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue detailed_description = 10010;</code>
     */
    public function getDetailedDescription()
    {
        return $this->detailed_description;
    }

    /**
     * <pre>
     * Ausführliche Beschreibung der Zahlungsart-Versandart-Kombination für den Kunden
     * </pre>
     *
     * <code>.dstore.values.StringValue detailed_description = 10010;</code>
     */
    public function setDetailedDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->detailed_description = $var;
    }

}

