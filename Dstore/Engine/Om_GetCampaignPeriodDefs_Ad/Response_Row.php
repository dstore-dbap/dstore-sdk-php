<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetCampaignPeriodDefs_Ad.proto

namespace Dstore\Engine\Om_GetCampaignPeriodDefs_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetCampaignPeriodDefs_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Wert "&gt; 0" bedeutet, daß der Zeitraum "StartDateAndTime" bis "EndDateAndTime" nach dieser Anzahl durch "TimeUnitID" bestimmten Zeiteinheit (z.B. "Tag") wiederholt wird und dieses "Wiederholungs-Prinzip" bis zum Zeitpunkg "RepeatUntil" fortgeführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue repeat_every_x_time_units = 10001;</code>
     */
    private $repeat_every_x_time_units = null;
    /**
     * <pre>
     * Nicht "NULL" wenn "RepeatEveryXTimeUnits &gt; 0". Zeitpunkt, bis zu dem der Zeitraum "StartDateAndTime" bis "EndDateAndTime" immer wieder nach "RepeatEveryXTimeUnits" vielen (durch "TimeUnitID" bestimmten) Zeiteinheiten (z.B. "Tage") wiederholt wird.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue repeat_until = 10002;</code>
     */
    private $repeat_until = null;
    /**
     * <pre>
     * Startzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Startzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue start_date_and_time = 10003;</code>
     */
    private $start_date_and_time = null;
    /**
     * <pre>
     * Endzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Endzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue end_date_and_time = 10004;</code>
     */
    private $end_date_and_time = null;
    /**
     * <pre>
     * "StartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue start_date_and_time_char = 10005;</code>
     */
    private $start_date_and_time_char = null;
    /**
     * <pre>
     * ID einer Zeiteinheit. Gibt die Zeiteinheit für "RepeatEveryXTimeUnits" an. "NULL" wenn "RepeatEveryXTimeUnits = 0" ist. Mögliche Werte : s. "om_GetTimeUnitsForCPeriods_Ad"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue time_unit_id = 10006;</code>
     */
    private $time_unit_id = null;
    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10007;</code>
     */
    private $period_definition_name = null;
    /**
     * <pre>
     * "EndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue end_date_and_time_char = 10008;</code>
     */
    private $end_date_and_time_char = null;
    /**
     * <pre>
     * Klartext der Zeiteinheit "TimeUnitID" (z.B. "Tag")
     * </pre>
     *
     * <code>.dstore.values.StringValue time_unit = 10009;</code>
     */
    private $time_unit = null;
    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition. Anmerkung : stellt quasi nur eine Art "Durchnummerierung" der Zeitraum-Definitionen für eine Verkaufs-Aktion dar.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10010;</code>
     */
    private $period_definition_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetCampaignPeriodDefsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Wert "&gt; 0" bedeutet, daß der Zeitraum "StartDateAndTime" bis "EndDateAndTime" nach dieser Anzahl durch "TimeUnitID" bestimmten Zeiteinheit (z.B. "Tag") wiederholt wird und dieses "Wiederholungs-Prinzip" bis zum Zeitpunkg "RepeatUntil" fortgeführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue repeat_every_x_time_units = 10001;</code>
     */
    public function getRepeatEveryXTimeUnits()
    {
        return $this->repeat_every_x_time_units;
    }

    /**
     * <pre>
     * Wert "&gt; 0" bedeutet, daß der Zeitraum "StartDateAndTime" bis "EndDateAndTime" nach dieser Anzahl durch "TimeUnitID" bestimmten Zeiteinheit (z.B. "Tag") wiederholt wird und dieses "Wiederholungs-Prinzip" bis zum Zeitpunkg "RepeatUntil" fortgeführt wird
     * </pre>
     *
     * <code>.dstore.values.IntegerValue repeat_every_x_time_units = 10001;</code>
     */
    public function setRepeatEveryXTimeUnits(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->repeat_every_x_time_units = $var;
    }

    /**
     * <pre>
     * Nicht "NULL" wenn "RepeatEveryXTimeUnits &gt; 0". Zeitpunkt, bis zu dem der Zeitraum "StartDateAndTime" bis "EndDateAndTime" immer wieder nach "RepeatEveryXTimeUnits" vielen (durch "TimeUnitID" bestimmten) Zeiteinheiten (z.B. "Tage") wiederholt wird.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue repeat_until = 10002;</code>
     */
    public function getRepeatUntil()
    {
        return $this->repeat_until;
    }

    /**
     * <pre>
     * Nicht "NULL" wenn "RepeatEveryXTimeUnits &gt; 0". Zeitpunkt, bis zu dem der Zeitraum "StartDateAndTime" bis "EndDateAndTime" immer wieder nach "RepeatEveryXTimeUnits" vielen (durch "TimeUnitID" bestimmten) Zeiteinheiten (z.B. "Tage") wiederholt wird.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue repeat_until = 10002;</code>
     */
    public function setRepeatUntil(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->repeat_until = $var;
    }

    /**
     * <pre>
     * Startzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Startzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue start_date_and_time = 10003;</code>
     */
    public function getStartDateAndTime()
    {
        return $this->start_date_and_time;
    }

    /**
     * <pre>
     * Startzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Startzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue start_date_and_time = 10003;</code>
     */
    public function setStartDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->start_date_and_time = $var;
    }

    /**
     * <pre>
     * Endzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Endzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue end_date_and_time = 10004;</code>
     */
    public function getEndDateAndTime()
    {
        return $this->end_date_and_time;
    }

    /**
     * <pre>
     * Endzeitpunkt des Gültigkeitszeitraums und damit gleichzeitig Endzeitpunkt des ersten aus dieser Definition (generierten) tatsächlichen Zeitraums (der u.U. eben mehrfach gemäß "RepeatEveryXTimeUnits" bis zum Zeitpunkt "RepeatUntil" wiederholt wird)
     * </pre>
     *
     * <code>.dstore.values.TimestampValue end_date_and_time = 10004;</code>
     */
    public function setEndDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->end_date_and_time = $var;
    }

    /**
     * <pre>
     * "StartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue start_date_and_time_char = 10005;</code>
     */
    public function getStartDateAndTimeChar()
    {
        return $this->start_date_and_time_char;
    }

    /**
     * <pre>
     * "StartDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue start_date_and_time_char = 10005;</code>
     */
    public function setStartDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->start_date_and_time_char = $var;
    }

    /**
     * <pre>
     * ID einer Zeiteinheit. Gibt die Zeiteinheit für "RepeatEveryXTimeUnits" an. "NULL" wenn "RepeatEveryXTimeUnits = 0" ist. Mögliche Werte : s. "om_GetTimeUnitsForCPeriods_Ad"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue time_unit_id = 10006;</code>
     */
    public function getTimeUnitId()
    {
        return $this->time_unit_id;
    }

    /**
     * <pre>
     * ID einer Zeiteinheit. Gibt die Zeiteinheit für "RepeatEveryXTimeUnits" an. "NULL" wenn "RepeatEveryXTimeUnits = 0" ist. Mögliche Werte : s. "om_GetTimeUnitsForCPeriods_Ad"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue time_unit_id = 10006;</code>
     */
    public function setTimeUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->time_unit_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10007;</code>
     */
    public function getPeriodDefinitionName()
    {
        return $this->period_definition_name;
    }

    /**
     * <pre>
     * Bezeichnung der Definition "PeriodDefinitionID", wie z.B. "Jeden Montag zwischen 10 und 15 Uhr (vom 29.03.2010 bis zum 12.04.2010)"
     * </pre>
     *
     * <code>.dstore.values.StringValue period_definition_name = 10007;</code>
     */
    public function setPeriodDefinitionName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->period_definition_name = $var;
    }

    /**
     * <pre>
     * "EndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue end_date_and_time_char = 10008;</code>
     */
    public function getEndDateAndTimeChar()
    {
        return $this->end_date_and_time_char;
    }

    /**
     * <pre>
     * "EndDateAndTime" als "string" im Format "01.04.2001 17:52:23:548"
     * </pre>
     *
     * <code>.dstore.values.StringValue end_date_and_time_char = 10008;</code>
     */
    public function setEndDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->end_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Klartext der Zeiteinheit "TimeUnitID" (z.B. "Tag")
     * </pre>
     *
     * <code>.dstore.values.StringValue time_unit = 10009;</code>
     */
    public function getTimeUnit()
    {
        return $this->time_unit;
    }

    /**
     * <pre>
     * Klartext der Zeiteinheit "TimeUnitID" (z.B. "Tag")
     * </pre>
     *
     * <code>.dstore.values.StringValue time_unit = 10009;</code>
     */
    public function setTimeUnit(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->time_unit = $var;
    }

    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition. Anmerkung : stellt quasi nur eine Art "Durchnummerierung" der Zeitraum-Definitionen für eine Verkaufs-Aktion dar.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10010;</code>
     */
    public function getPeriodDefinitionId()
    {
        return $this->period_definition_id;
    }

    /**
     * <pre>
     * ID einer (nur) für die Verkaufs-Aktion "&#64;CampaignID" geltenden Gültigkeitszeitraum-Definition. Anmerkung : stellt quasi nur eine Art "Durchnummerierung" der Zeitraum-Definitionen für eine Verkaufs-Aktion dar.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue period_definition_id = 10010;</code>
     */
    public function setPeriodDefinitionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->period_definition_id = $var;
    }

}

