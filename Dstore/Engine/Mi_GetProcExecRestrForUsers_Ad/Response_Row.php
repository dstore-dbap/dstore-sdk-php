<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetProcExecRestrForUsers_Ad.proto

namespace Dstore\Engine\Mi_GetProcExecRestrForUsers_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetProcExecRestrForUsers_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Gibt an, wie der Wert zum Parameter "ParameterName" beim Aufruf mit "Condition" verglichen wird
     * </pre>
     *
     * <code>.dstore.values.StringValue operator = 10001;</code>
     */
    private $operator = null;
    /**
     * <pre>
     * Die eigentlich Einschränkung/Bedingung selbst : der Wert beim Aufruf der Prozedur zum Parameter "ParameterName" wird anhand des Operators "Operator" mit diesem Wert verglichen
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10002;</code>
     */
    private $condition = null;
    /**
     * <pre>
     * Die Einschränkung gilt für Aufrufe der Prozedur auf diesem oder einem höheren "NestingLevel" ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_nesting_level = 10003;</code>
     */
    private $from_nesting_level = null;
    /**
     * <pre>
     * ID eines "dStore"-Benutzers, der in "UserInfo" registriert ist (siehe "mi_GetUserInfo_Ad"), für den die Einschränkung gilt. "-1" bedeutet, daß die Einschränkung für alle Benutzer (für die nicht explizit andere Einschränkungen konfiguriert sind) gilt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue restriction_for_user_id = 10004;</code>
     */
    private $restriction_for_user_id = null;
    /**
     * <pre>
     * Um die wievielte Bedingung (sprich Einschränkung) innerhalb des Bedingungs-Blocks "ConditionID" handelt es sich ? (Im Prinzip eine willkürliche Zahl, die eigentlich nur dazu dient, den Datensatz in der Tabelle, also die Bedingung, EINDEUTIG zu machen...)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_number = 10005;</code>
     */
    private $condition_number = null;
    /**
     * <pre>
     * "0" : Die Einschränkung wird bei der Überprüfung nicht beachtet"1" : Die Einschränkung ist aktiv, d.h. diese Bedingung und alle anderen Bedingungen der gleichen "ConditionID" müssen erfüllt sein (oder alle Bedingungen einer anderen "ConditionID")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue restriction_is_active = 10006;</code>
     */
    private $restriction_is_active = null;
    /**
     * <pre>
     * Nummer des "Bedingungs-Blocks", zu dem die Einschränkung gehört. Ist die Überprüfung von Ausführungsbeschränkungen konfiguriert und aktiv, müssen ALLE Bedingungen mindestens EINES Bedingungs-Blocks erfüllt sein, damit der Aufruf "durchgeht".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10007;</code>
     */
    private $condition_id = null;
    /**
     * <pre>
     * Parameter, für den die Einschränkung gilt. Der Wert zu diesem Parameter beim Aufruf der Prozedur wird anhand des Operators "Operator" mit "Condition" verglichen.
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10008;</code>
     */
    private $parameter_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetProcExecRestrForUsersAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Gibt an, wie der Wert zum Parameter "ParameterName" beim Aufruf mit "Condition" verglichen wird
     * </pre>
     *
     * <code>.dstore.values.StringValue operator = 10001;</code>
     */
    public function getOperator()
    {
        return $this->operator;
    }

    /**
     * <pre>
     * Gibt an, wie der Wert zum Parameter "ParameterName" beim Aufruf mit "Condition" verglichen wird
     * </pre>
     *
     * <code>.dstore.values.StringValue operator = 10001;</code>
     */
    public function setOperator(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->operator = $var;
    }

    /**
     * <pre>
     * Die eigentlich Einschränkung/Bedingung selbst : der Wert beim Aufruf der Prozedur zum Parameter "ParameterName" wird anhand des Operators "Operator" mit diesem Wert verglichen
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10002;</code>
     */
    public function getCondition()
    {
        return $this->condition;
    }

    /**
     * <pre>
     * Die eigentlich Einschränkung/Bedingung selbst : der Wert beim Aufruf der Prozedur zum Parameter "ParameterName" wird anhand des Operators "Operator" mit diesem Wert verglichen
     * </pre>
     *
     * <code>.dstore.values.StringValue condition = 10002;</code>
     */
    public function setCondition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->condition = $var;
    }

    /**
     * <pre>
     * Die Einschränkung gilt für Aufrufe der Prozedur auf diesem oder einem höheren "NestingLevel" ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_nesting_level = 10003;</code>
     */
    public function getFromNestingLevel()
    {
        return $this->from_nesting_level;
    }

    /**
     * <pre>
     * Die Einschränkung gilt für Aufrufe der Prozedur auf diesem oder einem höheren "NestingLevel" ("NestingLevel = 1" : direkter Aufruf der Prozedur, "NestingLevel = 2" : Aufruf innerhalb einer anderen Prozedur, usw.)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue from_nesting_level = 10003;</code>
     */
    public function setFromNestingLevel(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->from_nesting_level = $var;
    }

    /**
     * <pre>
     * ID eines "dStore"-Benutzers, der in "UserInfo" registriert ist (siehe "mi_GetUserInfo_Ad"), für den die Einschränkung gilt. "-1" bedeutet, daß die Einschränkung für alle Benutzer (für die nicht explizit andere Einschränkungen konfiguriert sind) gilt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue restriction_for_user_id = 10004;</code>
     */
    public function getRestrictionForUserId()
    {
        return $this->restriction_for_user_id;
    }

    /**
     * <pre>
     * ID eines "dStore"-Benutzers, der in "UserInfo" registriert ist (siehe "mi_GetUserInfo_Ad"), für den die Einschränkung gilt. "-1" bedeutet, daß die Einschränkung für alle Benutzer (für die nicht explizit andere Einschränkungen konfiguriert sind) gilt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue restriction_for_user_id = 10004;</code>
     */
    public function setRestrictionForUserId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->restriction_for_user_id = $var;
    }

    /**
     * <pre>
     * Um die wievielte Bedingung (sprich Einschränkung) innerhalb des Bedingungs-Blocks "ConditionID" handelt es sich ? (Im Prinzip eine willkürliche Zahl, die eigentlich nur dazu dient, den Datensatz in der Tabelle, also die Bedingung, EINDEUTIG zu machen...)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_number = 10005;</code>
     */
    public function getConditionNumber()
    {
        return $this->condition_number;
    }

    /**
     * <pre>
     * Um die wievielte Bedingung (sprich Einschränkung) innerhalb des Bedingungs-Blocks "ConditionID" handelt es sich ? (Im Prinzip eine willkürliche Zahl, die eigentlich nur dazu dient, den Datensatz in der Tabelle, also die Bedingung, EINDEUTIG zu machen...)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_number = 10005;</code>
     */
    public function setConditionNumber(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->condition_number = $var;
    }

    /**
     * <pre>
     * "0" : Die Einschränkung wird bei der Überprüfung nicht beachtet"1" : Die Einschränkung ist aktiv, d.h. diese Bedingung und alle anderen Bedingungen der gleichen "ConditionID" müssen erfüllt sein (oder alle Bedingungen einer anderen "ConditionID")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue restriction_is_active = 10006;</code>
     */
    public function getRestrictionIsActive()
    {
        return $this->restriction_is_active;
    }

    /**
     * <pre>
     * "0" : Die Einschränkung wird bei der Überprüfung nicht beachtet"1" : Die Einschränkung ist aktiv, d.h. diese Bedingung und alle anderen Bedingungen der gleichen "ConditionID" müssen erfüllt sein (oder alle Bedingungen einer anderen "ConditionID")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue restriction_is_active = 10006;</code>
     */
    public function setRestrictionIsActive(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->restriction_is_active = $var;
    }

    /**
     * <pre>
     * Nummer des "Bedingungs-Blocks", zu dem die Einschränkung gehört. Ist die Überprüfung von Ausführungsbeschränkungen konfiguriert und aktiv, müssen ALLE Bedingungen mindestens EINES Bedingungs-Blocks erfüllt sein, damit der Aufruf "durchgeht".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10007;</code>
     */
    public function getConditionId()
    {
        return $this->condition_id;
    }

    /**
     * <pre>
     * Nummer des "Bedingungs-Blocks", zu dem die Einschränkung gehört. Ist die Überprüfung von Ausführungsbeschränkungen konfiguriert und aktiv, müssen ALLE Bedingungen mindestens EINES Bedingungs-Blocks erfüllt sein, damit der Aufruf "durchgeht".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue condition_id = 10007;</code>
     */
    public function setConditionId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->condition_id = $var;
    }

    /**
     * <pre>
     * Parameter, für den die Einschränkung gilt. Der Wert zu diesem Parameter beim Aufruf der Prozedur wird anhand des Operators "Operator" mit "Condition" verglichen.
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10008;</code>
     */
    public function getParameterName()
    {
        return $this->parameter_name;
    }

    /**
     * <pre>
     * Parameter, für den die Einschränkung gilt. Der Wert zu diesem Parameter beim Aufruf der Prozedur wird anhand des Operators "Operator" mit "Condition" verglichen.
     * </pre>
     *
     * <code>.dstore.values.StringValue parameter_name = 10008;</code>
     */
    public function setParameterName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->parameter_name = $var;
    }

}

