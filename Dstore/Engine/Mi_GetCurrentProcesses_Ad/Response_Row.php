<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetCurrentProcesses_Ad.proto

namespace Dstore\Engine\Mi_GetCurrentProcesses_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetCurrentProcesses_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10001;</code>
     */
    private $login_name = null;
    /**
     * <pre>
     * Unter welcher Prozess-Kennung (in der Regel eine ID) der entsprechende Client-Prozess (auf "HostName") läuft
     * </pre>
     *
     * <code>.dstore.values.StringValue host_process = 10002;</code>
     */
    private $host_process = null;
    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10003;</code>
     */
    private $process_status = null;
    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10004;</code>
     */
    private $command = null;
    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10005;</code>
     */
    private $blocking_process_id = null;
    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10006;</code>
     */
    private $server_process_id = null;
    /**
     * <pre>
     * Der Name der Datenbank, in der sich der Prozeß gerade befindet
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 10007;</code>
     */
    private $d_b_name = null;
    /**
     * <pre>
     * Name des Programms auf dem Client, der den Prozeß gestartet hat (setzt voraus, daß der Client dies beim Verbindungsaufbau übermittelt hat !)
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10008;</code>
     */
    private $program_name = null;
    /**
     * <pre>
     * Name des Client-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10009;</code>
     */
    private $host_name = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetCurrentProcessesAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10001;</code>
     */
    public function getLoginName()
    {
        return $this->login_name;
    }

    /**
     * <pre>
     * Unter welchem "login" wurde der Prozeß eröffnet
     * </pre>
     *
     * <code>.dstore.values.StringValue login_name = 10001;</code>
     */
    public function setLoginName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->login_name = $var;
    }

    /**
     * <pre>
     * Unter welcher Prozess-Kennung (in der Regel eine ID) der entsprechende Client-Prozess (auf "HostName") läuft
     * </pre>
     *
     * <code>.dstore.values.StringValue host_process = 10002;</code>
     */
    public function getHostProcess()
    {
        return $this->host_process;
    }

    /**
     * <pre>
     * Unter welcher Prozess-Kennung (in der Regel eine ID) der entsprechende Client-Prozess (auf "HostName") läuft
     * </pre>
     *
     * <code>.dstore.values.StringValue host_process = 10002;</code>
     */
    public function setHostProcess(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->host_process = $var;
    }

    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10003;</code>
     */
    public function getProcessStatus()
    {
        return $this->process_status;
    }

    /**
     * <pre>
     * Was macht der Prozeß gerade ("running", "lock sleep", etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue process_status = 10003;</code>
     */
    public function setProcessStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->process_status = $var;
    }

    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10004;</code>
     */
    public function getCommand()
    {
        return $this->command;
    }

    /**
     * <pre>
     * Was für eine Art von Kommando wird gerade ausgeführt
     * </pre>
     *
     * <code>.dstore.values.StringValue command = 10004;</code>
     */
    public function setCommand(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->command = $var;
    }

    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10005;</code>
     */
    public function getBlockingProcessId()
    {
        return $this->blocking_process_id;
    }

    /**
     * <pre>
     * ID eines anderen Prozesses, durch den dieser Prozeß ge"blocked" wird. Ein Wert von "0" bedeutet, daß der Prozess NICHT blockiert wird.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue blocking_process_id = 10005;</code>
     */
    public function setBlockingProcessId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->blocking_process_id = $var;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10006;</code>
     */
    public function getServerProcessId()
    {
        return $this->server_process_id;
    }

    /**
     * <pre>
     * Die Server-Prozeß-ID
     * </pre>
     *
     * <code>.dstore.values.IntegerValue server_process_id = 10006;</code>
     */
    public function setServerProcessId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->server_process_id = $var;
    }

    /**
     * <pre>
     * Der Name der Datenbank, in der sich der Prozeß gerade befindet
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 10007;</code>
     */
    public function getDBName()
    {
        return $this->d_b_name;
    }

    /**
     * <pre>
     * Der Name der Datenbank, in der sich der Prozeß gerade befindet
     * </pre>
     *
     * <code>.dstore.values.StringValue d_b_name = 10007;</code>
     */
    public function setDBName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->d_b_name = $var;
    }

    /**
     * <pre>
     * Name des Programms auf dem Client, der den Prozeß gestartet hat (setzt voraus, daß der Client dies beim Verbindungsaufbau übermittelt hat !)
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10008;</code>
     */
    public function getProgramName()
    {
        return $this->program_name;
    }

    /**
     * <pre>
     * Name des Programms auf dem Client, der den Prozeß gestartet hat (setzt voraus, daß der Client dies beim Verbindungsaufbau übermittelt hat !)
     * </pre>
     *
     * <code>.dstore.values.StringValue program_name = 10008;</code>
     */
    public function setProgramName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->program_name = $var;
    }

    /**
     * <pre>
     * Name des Client-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10009;</code>
     */
    public function getHostName()
    {
        return $this->host_name;
    }

    /**
     * <pre>
     * Name des Client-Rechners, der den Prozeß gestartet hat
     * </pre>
     *
     * <code>.dstore.values.StringValue host_name = 10009;</code>
     */
    public function setHostName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->host_name = $var;
    }

}

