<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetTRITriggerReplFuncts_Ad.proto

namespace Dstore\Engine\Mi_GetTRITriggerReplFuncts_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetTRITriggerReplFuncts_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bei Standard-Funktionen eine genaue Erläuterung, durch was "FunctionDefinition" in einem "TRI-Ausdruck" ersetzt wird. Bei "Custom"-Funktionen KANN hier ebenfalls eine Beschreibung hinterlegt sein, die dann i.d.R. Erläuterungen zum "ReplaceString" enthält.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    private $description = null;
    /**
     * <pre>
     * Vollständige Definition der Funktion : umschließende "#" (kennzeichnet alle Funktionen), Funktionsname sowie ein (optionaler) "LIKE"-Ausdruck für erlaubte Argumente (d.h. es können "pattern" - kleine Untermenge von regulären Ausdrücken- vorkommen)
     * </pre>
     *
     * <code>.dstore.values.StringValue function_definition = 10002;</code>
     */
    private $function_definition = null;
    /**
     * <pre>
     * Immer "NULL" bei Standard-Funktionen. Bei "Custom"-Funktionen hingegen steht hier NIE "NULL", sondern die Zeichenkette, durch die ein Vorkommen von "FunctionDefinition" im "TRI-Ausdruck" ersetzt wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue replace_string = 10003;</code>
     */
    private $replace_string = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetTRITriggerReplFunctsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bei Standard-Funktionen eine genaue Erläuterung, durch was "FunctionDefinition" in einem "TRI-Ausdruck" ersetzt wird. Bei "Custom"-Funktionen KANN hier ebenfalls eine Beschreibung hinterlegt sein, die dann i.d.R. Erläuterungen zum "ReplaceString" enthält.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * <pre>
     * Bei Standard-Funktionen eine genaue Erläuterung, durch was "FunctionDefinition" in einem "TRI-Ausdruck" ersetzt wird. Bei "Custom"-Funktionen KANN hier ebenfalls eine Beschreibung hinterlegt sein, die dann i.d.R. Erläuterungen zum "ReplaceString" enthält.
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    public function setDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description = $var;
    }

    /**
     * <pre>
     * Vollständige Definition der Funktion : umschließende "#" (kennzeichnet alle Funktionen), Funktionsname sowie ein (optionaler) "LIKE"-Ausdruck für erlaubte Argumente (d.h. es können "pattern" - kleine Untermenge von regulären Ausdrücken- vorkommen)
     * </pre>
     *
     * <code>.dstore.values.StringValue function_definition = 10002;</code>
     */
    public function getFunctionDefinition()
    {
        return $this->function_definition;
    }

    /**
     * <pre>
     * Vollständige Definition der Funktion : umschließende "#" (kennzeichnet alle Funktionen), Funktionsname sowie ein (optionaler) "LIKE"-Ausdruck für erlaubte Argumente (d.h. es können "pattern" - kleine Untermenge von regulären Ausdrücken- vorkommen)
     * </pre>
     *
     * <code>.dstore.values.StringValue function_definition = 10002;</code>
     */
    public function setFunctionDefinition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->function_definition = $var;
    }

    /**
     * <pre>
     * Immer "NULL" bei Standard-Funktionen. Bei "Custom"-Funktionen hingegen steht hier NIE "NULL", sondern die Zeichenkette, durch die ein Vorkommen von "FunctionDefinition" im "TRI-Ausdruck" ersetzt wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue replace_string = 10003;</code>
     */
    public function getReplaceString()
    {
        return $this->replace_string;
    }

    /**
     * <pre>
     * Immer "NULL" bei Standard-Funktionen. Bei "Custom"-Funktionen hingegen steht hier NIE "NULL", sondern die Zeichenkette, durch die ein Vorkommen von "FunctionDefinition" im "TRI-Ausdruck" ersetzt wird.
     * </pre>
     *
     * <code>.dstore.values.StringValue replace_string = 10003;</code>
     */
    public function setReplaceString(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->replace_string = $var;
    }

}

