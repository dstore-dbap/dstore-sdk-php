<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetTrolleySurcharges_Pu.proto

namespace Dstore\Engine\Om_GetTrolleySurcharges_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetTrolleySurcharges_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Liste von "CampaignID"s, die den "Surcharge"-Wert mitbestimmt, d.h. die einen Rabatt bewirkt haben (z.B. ein Rabatt auf Versandkosten oder ein Gesamt-Auftrags-Rabatt)
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_generated_by_camp_ids = 10001;</code>
     */
    private $surcharge_generated_by_camp_ids = null;
    /**
     * <pre>
     * Der zur Berechnung herangezogene Wert (wie dieser zu verstehen ist, also z.B. in welcher Einheit - Währung oder Prozent - ist ja zur "SurchargeTypeID" hinterlegt und wird nicht nochmal explizit angegeben)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_surcharge_value = 10002;</code>
     */
    private $applied_surcharge_value = null;
    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10003;</code>
     */
    private $absolute_net_surcharge = null;
    /**
     * <pre>
     * Auf welchen Brutto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_gross_sum = 10004;</code>
     */
    private $surcharge_applied_on_gross_sum = null;
    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10005;</code>
     */
    private $absolute_gross_surcharge = null;
    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "TrolleySurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10006;</code>
     */
    private $position_no = null;
    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10007;</code>
     */
    private $surcharge_type_description = null;
    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10008;</code>
     */
    private $surcharge_type_id = null;
    /**
     * <pre>
     * Auf welchen Netto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_net_sum = 10009;</code>
     */
    private $surcharge_applied_on_net_sum = null;
    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator", die auf die Netto-Kosten "AbsoluteNetSurcharge" angewendet wurden, um die Brutto-Kosten "AbsoluteGrossSurcharge" zu erhalten. D.h. beträgt die Mehrwertsteuer z.B. "19%", steht hier der Wert "1.19".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 20002;</code>
     */
    private $taxes_multiplier = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetTrolleySurchargesPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Liste von "CampaignID"s, die den "Surcharge"-Wert mitbestimmt, d.h. die einen Rabatt bewirkt haben (z.B. ein Rabatt auf Versandkosten oder ein Gesamt-Auftrags-Rabatt)
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_generated_by_camp_ids = 10001;</code>
     */
    public function getSurchargeGeneratedByCampIds()
    {
        return $this->surcharge_generated_by_camp_ids;
    }

    /**
     * <pre>
     * Liste von "CampaignID"s, die den "Surcharge"-Wert mitbestimmt, d.h. die einen Rabatt bewirkt haben (z.B. ein Rabatt auf Versandkosten oder ein Gesamt-Auftrags-Rabatt)
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_generated_by_camp_ids = 10001;</code>
     */
    public function setSurchargeGeneratedByCampIds(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->surcharge_generated_by_camp_ids = $var;
    }

    /**
     * <pre>
     * Der zur Berechnung herangezogene Wert (wie dieser zu verstehen ist, also z.B. in welcher Einheit - Währung oder Prozent - ist ja zur "SurchargeTypeID" hinterlegt und wird nicht nochmal explizit angegeben)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_surcharge_value = 10002;</code>
     */
    public function getAppliedSurchargeValue()
    {
        return $this->applied_surcharge_value;
    }

    /**
     * <pre>
     * Der zur Berechnung herangezogene Wert (wie dieser zu verstehen ist, also z.B. in welcher Einheit - Währung oder Prozent - ist ja zur "SurchargeTypeID" hinterlegt und wird nicht nochmal explizit angegeben)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue applied_surcharge_value = 10002;</code>
     */
    public function setAppliedSurchargeValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->applied_surcharge_value = $var;
    }

    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10003;</code>
     */
    public function getAbsoluteNetSurcharge()
    {
        return $this->absolute_net_surcharge;
    }

    /**
     * <pre>
     * NETTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_net_surcharge = 10003;</code>
     */
    public function setAbsoluteNetSurcharge(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->absolute_net_surcharge = $var;
    }

    /**
     * <pre>
     * Auf welchen Brutto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_gross_sum = 10004;</code>
     */
    public function getSurchargeAppliedOnGrossSum()
    {
        return $this->surcharge_applied_on_gross_sum;
    }

    /**
     * <pre>
     * Auf welchen Brutto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_gross_sum = 10004;</code>
     */
    public function setSurchargeAppliedOnGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->surcharge_applied_on_gross_sum = $var;
    }

    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10005;</code>
     */
    public function getAbsoluteGrossSurcharge()
    {
        return $this->absolute_gross_surcharge;
    }

    /**
     * <pre>
     * BRUTTO-Abschlag oder -Aufschlag in der durch "&#64;CurrencyID" angegebenen Währung
     * </pre>
     *
     * <code>.dstore.values.DecimalValue absolute_gross_surcharge = 10005;</code>
     */
    public function setAbsoluteGrossSurcharge(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->absolute_gross_surcharge = $var;
    }

    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "TrolleySurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10006;</code>
     */
    public function getPositionNo()
    {
        return $this->position_no;
    }

    /**
     * <pre>
     * (Eindeutige) Positions-Nummer eines "TrolleySurcharges". Gibt die Reihenfolge an, in der die "Surcharges" errechnet wurden. Hinweis : Es gibt einen Datensatz mit "0" für eine "Kopf"- und "255" für eine "Summen"-Zeile.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_no = 10006;</code>
     */
    public function setPositionNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->position_no = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10007;</code>
     */
    public function getSurchargeTypeDescription()
    {
        return $this->surcharge_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10007;</code>
     */
    public function setSurchargeTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->surcharge_type_description = $var;
    }

    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10008;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * Die ID einer Aufschlags- bzw. Rabattart wie z.B. "Versandkosten", "Rabatt", "Nachnahmegebühr" o.ä.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10008;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

    /**
     * <pre>
     * Auf welchen Netto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_net_sum = 10009;</code>
     */
    public function getSurchargeAppliedOnNetSum()
    {
        return $this->surcharge_applied_on_net_sum;
    }

    /**
     * <pre>
     * Auf welchen Netto-Wert der "Surcharge" angewandt wurde. Grund für diese Information ist, daß ein "Surcharge" auf den Warenwert plus "Surcharges" mit höherer Priorität (s. z.B. "PriorityNo" von "om_GetSurchargeTypeCategories") angewendet wird.
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_applied_on_net_sum = 10009;</code>
     */
    public function setSurchargeAppliedOnNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->surcharge_applied_on_net_sum = $var;
    }

    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator", die auf die Netto-Kosten "AbsoluteNetSurcharge" angewendet wurden, um die Brutto-Kosten "AbsoluteGrossSurcharge" zu erhalten. D.h. beträgt die Mehrwertsteuer z.B. "19%", steht hier der Wert "1.19".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 20002;</code>
     */
    public function getTaxesMultiplier()
    {
        return $this->taxes_multiplier;
    }

    /**
     * <pre>
     * Mehrwertsteuer als "Multiplikator", die auf die Netto-Kosten "AbsoluteNetSurcharge" angewendet wurden, um die Brutto-Kosten "AbsoluteGrossSurcharge" zu erhalten. D.h. beträgt die Mehrwertsteuer z.B. "19%", steht hier der Wert "1.19".
     * </pre>
     *
     * <code>.dstore.values.DecimalValue taxes_multiplier = 20002;</code>
     */
    public function setTaxesMultiplier(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->taxes_multiplier = $var;
    }

}

