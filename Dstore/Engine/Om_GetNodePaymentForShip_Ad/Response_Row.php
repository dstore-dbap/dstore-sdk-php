<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetNodePaymentForShip_Ad.proto

namespace Dstore\Engine\Om_GetNodePaymentForShip_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetNodePaymentForShip_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Falls "1", wird die "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" NICHT ausgegeben, wenn sich im Warenkorb des Benutzers NUR Artikel befinden, denen diese "PaymentForShippingID" zwar zugewiesen ist, aber ebenfalls mit "HideWhenOrderedAlone = 1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue hide_when_ordered_alone = 10001;</code>
     */
    private $hide_when_ordered_alone = null;
    /**
     * <pre>
     * Bezeichnung der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10002;</code>
     */
    private $node_description = null;
    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, die bei einer Bestellung für "TreeNodeID" sowie für alle Elemente im Artikelbaum, die von "TreeNodeID" erben, zur Verfügung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    private $payment_for_shipping_id = null;
    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10004;</code>
     */
    private $description_for_admin = null;
    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, dem die Zahlungsart-Versandart-Kombination "PaymentForShippingID" zugewiesen ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    private $tree_node_id = null;
    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * Falls "1", wird diese "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" auch dann angezeigt, wenn nicht alle im Warenkorb befindlichen Artikel diese Kombination zugewiesen haben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue always = 10007;</code>
     */
    private $always = null;
    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    private $payment_for_shipping_description = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetNodePaymentForShipAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Falls "1", wird die "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" NICHT ausgegeben, wenn sich im Warenkorb des Benutzers NUR Artikel befinden, denen diese "PaymentForShippingID" zwar zugewiesen ist, aber ebenfalls mit "HideWhenOrderedAlone = 1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue hide_when_ordered_alone = 10001;</code>
     */
    public function getHideWhenOrderedAlone()
    {
        return $this->hide_when_ordered_alone;
    }

    /**
     * <pre>
     * Falls "1", wird die "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" NICHT ausgegeben, wenn sich im Warenkorb des Benutzers NUR Artikel befinden, denen diese "PaymentForShippingID" zwar zugewiesen ist, aber ebenfalls mit "HideWhenOrderedAlone = 1"
     * </pre>
     *
     * <code>.dstore.values.BooleanValue hide_when_ordered_alone = 10001;</code>
     */
    public function setHideWhenOrderedAlone(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->hide_when_ordered_alone = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10002;</code>
     */
    public function getNodeDescription()
    {
        return $this->node_description;
    }

    /**
     * <pre>
     * Bezeichnung der "NodeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue node_description = 10002;</code>
     */
    public function setNodeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->node_description = $var;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, die bei einer Bestellung für "TreeNodeID" sowie für alle Elemente im Artikelbaum, die von "TreeNodeID" erben, zur Verfügung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    public function getPaymentForShippingId()
    {
        return $this->payment_for_shipping_id;
    }

    /**
     * <pre>
     * ID einer Zahlungsart-Versandart-Kombination, die bei einer Bestellung für "TreeNodeID" sowie für alle Elemente im Artikelbaum, die von "TreeNodeID" erben, zur Verfügung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_for_shipping_id = 10003;</code>
     */
    public function setPaymentForShippingId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_for_shipping_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10004;</code>
     */
    public function getDescriptionForAdmin()
    {
        return $this->description_for_admin;
    }

    /**
     * <pre>
     * Bezeichnung der "PaymentForShippingID" für den Administrator. Hintergrund : Kombinationen, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10004;</code>
     */
    public function setDescriptionForAdmin(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description_for_admin = $var;
    }

    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, dem die Zahlungsart-Versandart-Kombination "PaymentForShippingID" zugewiesen ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    public function getTreeNodeId()
    {
        return $this->tree_node_id;
    }

    /**
     * <pre>
     * ID eines Elementes im Artikelbaum, dem die Zahlungsart-Versandart-Kombination "PaymentForShippingID" zugewiesen ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    public function setTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tree_node_id = $var;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" zugehörigen Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * Falls "1", wird diese "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" auch dann angezeigt, wenn nicht alle im Warenkorb befindlichen Artikel diese Kombination zugewiesen haben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue always = 10007;</code>
     */
    public function getAlways()
    {
        return $this->always;
    }

    /**
     * <pre>
     * Falls "1", wird diese "PaymentForShippingID" von "om_GetPaymentAndShipping_Pu" auch dann angezeigt, wenn nicht alle im Warenkorb befindlichen Artikel diese Kombination zugewiesen haben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue always = 10007;</code>
     */
    public function setAlways(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->always = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function getPaymentForShippingDescription()
    {
        return $this->payment_for_shipping_description;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart-Versandart-Kombination "PaymentForShippingID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_for_shipping_description = 10008;</code>
     */
    public function setPaymentForShippingDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_for_shipping_description = $var;
    }

}

