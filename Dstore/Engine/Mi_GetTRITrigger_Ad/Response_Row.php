<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetTRITrigger_Ad.proto

namespace Dstore\Engine\Mi_GetTRITrigger_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetTRITrigger_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID des Typs von Triggern dem "TriggerID" angehört (mögliche Werte : s. "mi_GetTRITriggerTypes_Ad"), sprich letztlich die Information, bei welcher Art von Datenänderung der Trigger ausgelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_type_id = 10001;</code>
     */
    private $trigger_type_id = null;
    /**
     * <pre>
     * Bezeichnung der "TriggerTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_type = 10002;</code>
     */
    private $trigger_type = null;
    /**
     * <pre>
     * Name einer Prozedur, die (wenn der Trigger ausgelöst wird) aufgerufen werden soll. Nur falls nicht konfiguriert (also "NULL"), steht die komplexere Definition eines Triggers (s. "mi_ModifyTRITriggerWorkflow_Ad") zur Verfügung.
     * </pre>
     *
     * <code>.dstore.values.StringValue execute_procedure_name = 10003;</code>
     */
    private $execute_procedure_name = null;
    /**
     * <pre>
     * Name des Triggers "TriggerID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_name = 10004;</code>
     */
    private $trigger_name = null;
    /**
     * <pre>
     * Kurze Beschreibung des Triggers (wozu er dient, was er macht etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_description = 10005;</code>
     */
    private $trigger_description = null;
    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_id = 10006;</code>
     */
    private $trigger_id = null;
    /**
     * <pre>
     * Status-Bitmap, also Summe folgender Werte :- "1" : Trigger-Definition ist fehlerhaft- "2" : Trigger-Definition ist ok- "4" : Trigger ist zugewiesen (also aktiv)Sonderfall : "0" bedeutet, daß der Trigger und seine Definition noch NICHT geprüft wurde.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_status = 10007;</code>
     */
    private $trigger_status = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetTRITriggerAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID des Typs von Triggern dem "TriggerID" angehört (mögliche Werte : s. "mi_GetTRITriggerTypes_Ad"), sprich letztlich die Information, bei welcher Art von Datenänderung der Trigger ausgelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_type_id = 10001;</code>
     */
    public function getTriggerTypeId()
    {
        return $this->trigger_type_id;
    }

    /**
     * <pre>
     * ID des Typs von Triggern dem "TriggerID" angehört (mögliche Werte : s. "mi_GetTRITriggerTypes_Ad"), sprich letztlich die Information, bei welcher Art von Datenänderung der Trigger ausgelöst werden kann
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_type_id = 10001;</code>
     */
    public function setTriggerTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->trigger_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "TriggerTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_type = 10002;</code>
     */
    public function getTriggerType()
    {
        return $this->trigger_type;
    }

    /**
     * <pre>
     * Bezeichnung der "TriggerTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_type = 10002;</code>
     */
    public function setTriggerType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->trigger_type = $var;
    }

    /**
     * <pre>
     * Name einer Prozedur, die (wenn der Trigger ausgelöst wird) aufgerufen werden soll. Nur falls nicht konfiguriert (also "NULL"), steht die komplexere Definition eines Triggers (s. "mi_ModifyTRITriggerWorkflow_Ad") zur Verfügung.
     * </pre>
     *
     * <code>.dstore.values.StringValue execute_procedure_name = 10003;</code>
     */
    public function getExecuteProcedureName()
    {
        return $this->execute_procedure_name;
    }

    /**
     * <pre>
     * Name einer Prozedur, die (wenn der Trigger ausgelöst wird) aufgerufen werden soll. Nur falls nicht konfiguriert (also "NULL"), steht die komplexere Definition eines Triggers (s. "mi_ModifyTRITriggerWorkflow_Ad") zur Verfügung.
     * </pre>
     *
     * <code>.dstore.values.StringValue execute_procedure_name = 10003;</code>
     */
    public function setExecuteProcedureName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->execute_procedure_name = $var;
    }

    /**
     * <pre>
     * Name des Triggers "TriggerID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_name = 10004;</code>
     */
    public function getTriggerName()
    {
        return $this->trigger_name;
    }

    /**
     * <pre>
     * Name des Triggers "TriggerID"
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_name = 10004;</code>
     */
    public function setTriggerName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->trigger_name = $var;
    }

    /**
     * <pre>
     * Kurze Beschreibung des Triggers (wozu er dient, was er macht etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_description = 10005;</code>
     */
    public function getTriggerDescription()
    {
        return $this->trigger_description;
    }

    /**
     * <pre>
     * Kurze Beschreibung des Triggers (wozu er dient, was er macht etc.)
     * </pre>
     *
     * <code>.dstore.values.StringValue trigger_description = 10005;</code>
     */
    public function setTriggerDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->trigger_description = $var;
    }

    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_id = 10006;</code>
     */
    public function getTriggerId()
    {
        return $this->trigger_id;
    }

    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_id = 10006;</code>
     */
    public function setTriggerId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->trigger_id = $var;
    }

    /**
     * <pre>
     * Status-Bitmap, also Summe folgender Werte :- "1" : Trigger-Definition ist fehlerhaft- "2" : Trigger-Definition ist ok- "4" : Trigger ist zugewiesen (also aktiv)Sonderfall : "0" bedeutet, daß der Trigger und seine Definition noch NICHT geprüft wurde.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_status = 10007;</code>
     */
    public function getTriggerStatus()
    {
        return $this->trigger_status;
    }

    /**
     * <pre>
     * Status-Bitmap, also Summe folgender Werte :- "1" : Trigger-Definition ist fehlerhaft- "2" : Trigger-Definition ist ok- "4" : Trigger ist zugewiesen (also aktiv)Sonderfall : "0" bedeutet, daß der Trigger und seine Definition noch NICHT geprüft wurde.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue trigger_status = 10007;</code>
     */
    public function setTriggerStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->trigger_status = $var;
    }

}

