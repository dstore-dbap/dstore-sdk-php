<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetPaymentTypeSurcharges_Ad.proto

namespace Dstore\Engine\Om_GetPaymentTypeSurcharges_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetPaymentTypeSurcharges_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Die Bezeichnung der Zahlungsart für die der Aufschlag/Rabatt gilt
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10001;</code>
     */
    private $payment_type_description = null;
    /**
     * <pre>
     * ID der Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10002;</code>
     */
    private $unit_id = null;
    /**
     * <pre>
     * Der Zeitpunkt bis zu dem ein Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    private $valid_to = null;
    /**
     * <pre>
     * Die Priorität des Rabatts/Aufschlags. Bestimmt die Reihenfolge, in der Rabatte/Aufschläge berechnet und gelistet werden. Bei relativen "Surcharges" wichtig, da der Betrag, auf den er anzuwenden ist, "Surcharges" mit kleinerer "PriorityNo" enthält.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue priority_no = 10004;</code>
     */
    private $priority_no = null;
    /**
     * <pre>
     * Der Zeitpunkt ab dem der Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    private $valid_from = null;
    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "UnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10006;</code>
     */
    private $surcharge_is_absolute_value = null;
    /**
     * <pre>
     * Symbol/Abkürzung der Einheit "SurchargeUnitID
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10007;</code>
     */
    private $unit_symbol = null;
    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10008;</code>
     */
    private $surcharge_type_description = null;
    /**
     * <pre>
     * Der Wert des Aufschlags/Rabatts
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10009;</code>
     */
    private $surcharge_value = null;
    /**
     * <pre>
     * Die ID der Zahlungsart für die der Aufschlag/Rabatt gilt (z.Zt. also immer "&#64;PaymentTypeID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10010;</code>
     */
    private $payment_type_id = null;
    /**
     * <pre>
     * Die ID der Aufschlags-/Rabatt-Art, die für "PaymentTypeID" im Zeitraum "ValidFrom" bis "ValidTo" konfiguriert ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10011;</code>
     */
    private $surcharge_type_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetPaymentTypeSurchargesAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Die Bezeichnung der Zahlungsart für die der Aufschlag/Rabatt gilt
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10001;</code>
     */
    public function getPaymentTypeDescription()
    {
        return $this->payment_type_description;
    }

    /**
     * <pre>
     * Die Bezeichnung der Zahlungsart für die der Aufschlag/Rabatt gilt
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type_description = 10001;</code>
     */
    public function setPaymentTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_type_description = $var;
    }

    /**
     * <pre>
     * ID der Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10002;</code>
     */
    public function getUnitId()
    {
        return $this->unit_id;
    }

    /**
     * <pre>
     * ID der Einheit, in der "SurchargeValue" angegeben ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10002;</code>
     */
    public function setUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->unit_id = $var;
    }

    /**
     * <pre>
     * Der Zeitpunkt bis zu dem ein Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    public function getValidTo()
    {
        return $this->valid_to;
    }

    /**
     * <pre>
     * Der Zeitpunkt bis zu dem ein Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10003;</code>
     */
    public function setValidTo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_to = $var;
    }

    /**
     * <pre>
     * Die Priorität des Rabatts/Aufschlags. Bestimmt die Reihenfolge, in der Rabatte/Aufschläge berechnet und gelistet werden. Bei relativen "Surcharges" wichtig, da der Betrag, auf den er anzuwenden ist, "Surcharges" mit kleinerer "PriorityNo" enthält.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue priority_no = 10004;</code>
     */
    public function getPriorityNo()
    {
        return $this->priority_no;
    }

    /**
     * <pre>
     * Die Priorität des Rabatts/Aufschlags. Bestimmt die Reihenfolge, in der Rabatte/Aufschläge berechnet und gelistet werden. Bei relativen "Surcharges" wichtig, da der Betrag, auf den er anzuwenden ist, "Surcharges" mit kleinerer "PriorityNo" enthält.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue priority_no = 10004;</code>
     */
    public function setPriorityNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->priority_no = $var;
    }

    /**
     * <pre>
     * Der Zeitpunkt ab dem der Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }

    /**
     * <pre>
     * Der Zeitpunkt ab dem der Rabatt/Aufschlag gültig ist
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10005;</code>
     */
    public function setValidFrom(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_from = $var;
    }

    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "UnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10006;</code>
     */
    public function getSurchargeIsAbsoluteValue()
    {
        return $this->surcharge_is_absolute_value;
    }

    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "UnitID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10006;</code>
     */
    public function setSurchargeIsAbsoluteValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_is_absolute_value = $var;
    }

    /**
     * <pre>
     * Symbol/Abkürzung der Einheit "SurchargeUnitID
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10007;</code>
     */
    public function getUnitSymbol()
    {
        return $this->unit_symbol;
    }

    /**
     * <pre>
     * Symbol/Abkürzung der Einheit "SurchargeUnitID
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10007;</code>
     */
    public function setUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unit_symbol = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10008;</code>
     */
    public function getSurchargeTypeDescription()
    {
        return $this->surcharge_type_description;
    }

    /**
     * <pre>
     * Bezeichnung der "SurchargeTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue surcharge_type_description = 10008;</code>
     */
    public function setSurchargeTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->surcharge_type_description = $var;
    }

    /**
     * <pre>
     * Der Wert des Aufschlags/Rabatts
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10009;</code>
     */
    public function getSurchargeValue()
    {
        return $this->surcharge_value;
    }

    /**
     * <pre>
     * Der Wert des Aufschlags/Rabatts
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10009;</code>
     */
    public function setSurchargeValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->surcharge_value = $var;
    }

    /**
     * <pre>
     * Die ID der Zahlungsart für die der Aufschlag/Rabatt gilt (z.Zt. also immer "&#64;PaymentTypeID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10010;</code>
     */
    public function getPaymentTypeId()
    {
        return $this->payment_type_id;
    }

    /**
     * <pre>
     * Die ID der Zahlungsart für die der Aufschlag/Rabatt gilt (z.Zt. also immer "&#64;PaymentTypeID")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10010;</code>
     */
    public function setPaymentTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_type_id = $var;
    }

    /**
     * <pre>
     * Die ID der Aufschlags-/Rabatt-Art, die für "PaymentTypeID" im Zeitraum "ValidFrom" bis "ValidTo" konfiguriert ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10011;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * Die ID der Aufschlags-/Rabatt-Art, die für "PaymentTypeID" im Zeitraum "ValidFrom" bis "ValidTo" konfiguriert ist/war
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10011;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

}

