<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetBatchJobs_Ad.proto

namespace Dstore\Engine\Mi_GetBatchJobs_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetBatchJobs_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Status der letzen Ausführung, mögliche Werte:"0" : "Success" (Prozedur wurde erfolgreich ausgeführt, es gab keine Fehler)"100" : "Running" (Die Prozedur wird momentan ausgeführt - siehe auch "HINWEIS" in der Beschreibung !)Sonst : Ein Error-Code
     * </pre>
     *
     * <code>.dstore.values.IntegerValue status = 10001;</code>
     */
    private $status = null;
    /**
     * <pre>
     * ID einer Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10002;</code>
     */
    private $procedure_id = null;
    /**
     * <pre>
     * Name eines dStore-Benutzers (aus "UserInfo", siehe "mi_GetUserInfo_Ad"), der die Prozedur "ProcedureID" zuletzt aufgerufen hat
     * </pre>
     *
     * <code>.dstore.values.StringValue last_call_from_user = 10003;</code>
     */
    private $last_call_from_user = null;
    /**
     * <pre>
     * Name der Prozedur "ProcedureID"
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    private $procedure_name = null;
    /**
     * <pre>
     * Zeitpunkt des letzten Aufrufs (Format : "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue last_run = 10005;</code>
     */
    private $last_run = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetBatchJobsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Status der letzen Ausführung, mögliche Werte:"0" : "Success" (Prozedur wurde erfolgreich ausgeführt, es gab keine Fehler)"100" : "Running" (Die Prozedur wird momentan ausgeführt - siehe auch "HINWEIS" in der Beschreibung !)Sonst : Ein Error-Code
     * </pre>
     *
     * <code>.dstore.values.IntegerValue status = 10001;</code>
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * <pre>
     * Status der letzen Ausführung, mögliche Werte:"0" : "Success" (Prozedur wurde erfolgreich ausgeführt, es gab keine Fehler)"100" : "Running" (Die Prozedur wird momentan ausgeführt - siehe auch "HINWEIS" in der Beschreibung !)Sonst : Ein Error-Code
     * </pre>
     *
     * <code>.dstore.values.IntegerValue status = 10001;</code>
     */
    public function setStatus(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->status = $var;
    }

    /**
     * <pre>
     * ID einer Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10002;</code>
     */
    public function getProcedureId()
    {
        return $this->procedure_id;
    }

    /**
     * <pre>
     * ID einer Prozedur
     * </pre>
     *
     * <code>.dstore.values.IntegerValue procedure_id = 10002;</code>
     */
    public function setProcedureId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->procedure_id = $var;
    }

    /**
     * <pre>
     * Name eines dStore-Benutzers (aus "UserInfo", siehe "mi_GetUserInfo_Ad"), der die Prozedur "ProcedureID" zuletzt aufgerufen hat
     * </pre>
     *
     * <code>.dstore.values.StringValue last_call_from_user = 10003;</code>
     */
    public function getLastCallFromUser()
    {
        return $this->last_call_from_user;
    }

    /**
     * <pre>
     * Name eines dStore-Benutzers (aus "UserInfo", siehe "mi_GetUserInfo_Ad"), der die Prozedur "ProcedureID" zuletzt aufgerufen hat
     * </pre>
     *
     * <code>.dstore.values.StringValue last_call_from_user = 10003;</code>
     */
    public function setLastCallFromUser(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->last_call_from_user = $var;
    }

    /**
     * <pre>
     * Name der Prozedur "ProcedureID"
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    public function getProcedureName()
    {
        return $this->procedure_name;
    }

    /**
     * <pre>
     * Name der Prozedur "ProcedureID"
     * </pre>
     *
     * <code>.dstore.values.StringValue procedure_name = 10004;</code>
     */
    public function setProcedureName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->procedure_name = $var;
    }

    /**
     * <pre>
     * Zeitpunkt des letzten Aufrufs (Format : "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue last_run = 10005;</code>
     */
    public function getLastRun()
    {
        return $this->last_run;
    }

    /**
     * <pre>
     * Zeitpunkt des letzten Aufrufs (Format : "15.04.2000 12:33:28")
     * </pre>
     *
     * <code>.dstore.values.StringValue last_run = 10005;</code>
     */
    public function setLastRun(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->last_run = $var;
    }

}

