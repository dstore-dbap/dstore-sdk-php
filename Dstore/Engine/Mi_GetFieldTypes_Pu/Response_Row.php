<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetFieldTypes_Pu.proto

namespace Dstore\Engine\Mi_GetFieldTypes_Pu;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetFieldTypes_Pu.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID eines Datentyps
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10001;</code>
     */
    private $field_type_id = null;
    /**
     * <pre>
     * Der Basis-Daten-Typ, mögliche Werte :* Ja-Nein (intern immer als "0" und "1" gespeichert)* Zahl* Text* Datum* Uhrzeit* Datum und Uhrzeit* vergangenes Datum
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10002;</code>
     */
    private $basic_field_type = null;
    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10003;</code>
     */
    private $field_type_description = null;
    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    private $precision_value = null;
    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte vom Datentyp "FieldTypeID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10005;</code>
     */
    private $max_length = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetFieldTypesPu::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID eines Datentyps
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10001;</code>
     */
    public function getFieldTypeId()
    {
        return $this->field_type_id;
    }

    /**
     * <pre>
     * ID eines Datentyps
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10001;</code>
     */
    public function setFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->field_type_id = $var;
    }

    /**
     * <pre>
     * Der Basis-Daten-Typ, mögliche Werte :* Ja-Nein (intern immer als "0" und "1" gespeichert)* Zahl* Text* Datum* Uhrzeit* Datum und Uhrzeit* vergangenes Datum
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10002;</code>
     */
    public function getBasicFieldType()
    {
        return $this->basic_field_type;
    }

    /**
     * <pre>
     * Der Basis-Daten-Typ, mögliche Werte :* Ja-Nein (intern immer als "0" und "1" gespeichert)* Zahl* Text* Datum* Uhrzeit* Datum und Uhrzeit* vergangenes Datum
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10002;</code>
     */
    public function setBasicFieldType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->basic_field_type = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10003;</code>
     */
    public function getFieldTypeDescription()
    {
        return $this->field_type_description;
    }

    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10003;</code>
     */
    public function setFieldTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->field_type_description = $var;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function getPrecisionValue()
    {
        return $this->precision_value;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function setPrecisionValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->precision_value = $var;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte vom Datentyp "FieldTypeID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10005;</code>
     */
    public function getMaxLength()
    {
        return $this->max_length;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte vom Datentyp "FieldTypeID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10005;</code>
     */
    public function setMaxLength(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->max_length = $var;
    }

}

