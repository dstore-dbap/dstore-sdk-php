<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetSearchItems_Ad.proto

namespace Dstore\Engine\Mi_GetSearchItems_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetSearchItems_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID der Tabelle auf die sich die Suchbegriffe beziehen. Mögliche Werte : siehe Ergebnis des Aufrufs "exec mi_GetTabsRefInOtherTabs_Ad &#64;UsedInSearchItems = 1".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue table_id = 10001;</code>
     */
    private $table_id = null;
    /**
     * <pre>
     * Ein Suchbegriff zum Merkmal "CharacteristicID", der durch "MatchingValue" ersetzt werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue search_value = 10002;</code>
     */
    private $search_value = null;
    /**
     * <pre>
     * Begriff nach dem anstelle von "SearchValue" gesucht werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue matching_value = 10003;</code>
     */
    private $matching_value = null;
    /**
     * <pre>
     * ID eines Merkmals (zu dem in der durch "&#64;TableID" symbolisierten Tabelle Eigenschaften hinterlegt sind), zu dem es ersetzte Suchbegriffe ("SearchValue" -&gt; "MatchingValue") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10004;</code>
     */
    private $characteristic_id = null;
    /**
     * <pre>
     * Diese Spalte sollte besser heißen "UseMatchingValueOnlyWithLike", denn :"1" : Die Ersetzung "MatchingValue" darf nur verwendet werden, falls mit dem "LIKE"-Operator gesucht wird"0" : Keine Einschränkung bzgl. des "LIKE"-Operators
     * </pre>
     *
     * <code>.dstore.values.BooleanValue use_like = 10005;</code>
     */
    private $use_like = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetSearchItemsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID der Tabelle auf die sich die Suchbegriffe beziehen. Mögliche Werte : siehe Ergebnis des Aufrufs "exec mi_GetTabsRefInOtherTabs_Ad &#64;UsedInSearchItems = 1".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue table_id = 10001;</code>
     */
    public function getTableId()
    {
        return $this->table_id;
    }

    /**
     * <pre>
     * ID der Tabelle auf die sich die Suchbegriffe beziehen. Mögliche Werte : siehe Ergebnis des Aufrufs "exec mi_GetTabsRefInOtherTabs_Ad &#64;UsedInSearchItems = 1".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue table_id = 10001;</code>
     */
    public function setTableId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->table_id = $var;
    }

    /**
     * <pre>
     * Ein Suchbegriff zum Merkmal "CharacteristicID", der durch "MatchingValue" ersetzt werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue search_value = 10002;</code>
     */
    public function getSearchValue()
    {
        return $this->search_value;
    }

    /**
     * <pre>
     * Ein Suchbegriff zum Merkmal "CharacteristicID", der durch "MatchingValue" ersetzt werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue search_value = 10002;</code>
     */
    public function setSearchValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->search_value = $var;
    }

    /**
     * <pre>
     * Begriff nach dem anstelle von "SearchValue" gesucht werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue matching_value = 10003;</code>
     */
    public function getMatchingValue()
    {
        return $this->matching_value;
    }

    /**
     * <pre>
     * Begriff nach dem anstelle von "SearchValue" gesucht werden kann
     * </pre>
     *
     * <code>.dstore.values.StringValue matching_value = 10003;</code>
     */
    public function setMatchingValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->matching_value = $var;
    }

    /**
     * <pre>
     * ID eines Merkmals (zu dem in der durch "&#64;TableID" symbolisierten Tabelle Eigenschaften hinterlegt sind), zu dem es ersetzte Suchbegriffe ("SearchValue" -&gt; "MatchingValue") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10004;</code>
     */
    public function getCharacteristicId()
    {
        return $this->characteristic_id;
    }

    /**
     * <pre>
     * ID eines Merkmals (zu dem in der durch "&#64;TableID" symbolisierten Tabelle Eigenschaften hinterlegt sind), zu dem es ersetzte Suchbegriffe ("SearchValue" -&gt; "MatchingValue") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10004;</code>
     */
    public function setCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->characteristic_id = $var;
    }

    /**
     * <pre>
     * Diese Spalte sollte besser heißen "UseMatchingValueOnlyWithLike", denn :"1" : Die Ersetzung "MatchingValue" darf nur verwendet werden, falls mit dem "LIKE"-Operator gesucht wird"0" : Keine Einschränkung bzgl. des "LIKE"-Operators
     * </pre>
     *
     * <code>.dstore.values.BooleanValue use_like = 10005;</code>
     */
    public function getUseLike()
    {
        return $this->use_like;
    }

    /**
     * <pre>
     * Diese Spalte sollte besser heißen "UseMatchingValueOnlyWithLike", denn :"1" : Die Ersetzung "MatchingValue" darf nur verwendet werden, falls mit dem "LIKE"-Operator gesucht wird"0" : Keine Einschränkung bzgl. des "LIKE"-Operators
     * </pre>
     *
     * <code>.dstore.values.BooleanValue use_like = 10005;</code>
     */
    public function setUseLike(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->use_like = $var;
    }

}

