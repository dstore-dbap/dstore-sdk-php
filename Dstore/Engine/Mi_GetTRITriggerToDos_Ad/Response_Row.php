<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/mi_GetTRITriggerToDos_Ad.proto

namespace Dstore\Engine\Mi_GetTRITriggerToDos_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.mi_GetTRITriggerToDos_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Optionaler Iterator (s. "mi_ModifyTRITriggerToDos_Ad", Parameter "&#64;IterationList")
     * </pre>
     *
     * <code>.dstore.values.StringValue iteration_list = 10001;</code>
     */
    private $iteration_list = null;
    /**
     * <pre>
     * X-te Anweisung (bei "1" angefangen, maximal "255"). Die Nummer bestimmt die Reihenfolge in der die Anweisungen des Arbeitsschrittes ausgeführt werden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_do_no = 10002;</code>
     */
    private $to_do_no = null;
    /**
     * <pre>
     * "TRI-Ausdruck", der einen Prozedur-Aufruf darstellt (die eigentliche "Anweisung" also)
     * </pre>
     *
     * <code>.dstore.values.StringValue proc_call = 10003;</code>
     */
    private $proc_call = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\MiGetTRITriggerToDosAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Optionaler Iterator (s. "mi_ModifyTRITriggerToDos_Ad", Parameter "&#64;IterationList")
     * </pre>
     *
     * <code>.dstore.values.StringValue iteration_list = 10001;</code>
     */
    public function getIterationList()
    {
        return $this->iteration_list;
    }

    /**
     * <pre>
     * Optionaler Iterator (s. "mi_ModifyTRITriggerToDos_Ad", Parameter "&#64;IterationList")
     * </pre>
     *
     * <code>.dstore.values.StringValue iteration_list = 10001;</code>
     */
    public function setIterationList(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->iteration_list = $var;
    }

    /**
     * <pre>
     * X-te Anweisung (bei "1" angefangen, maximal "255"). Die Nummer bestimmt die Reihenfolge in der die Anweisungen des Arbeitsschrittes ausgeführt werden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_do_no = 10002;</code>
     */
    public function getToDoNo()
    {
        return $this->to_do_no;
    }

    /**
     * <pre>
     * X-te Anweisung (bei "1" angefangen, maximal "255"). Die Nummer bestimmt die Reihenfolge in der die Anweisungen des Arbeitsschrittes ausgeführt werden
     * </pre>
     *
     * <code>.dstore.values.IntegerValue to_do_no = 10002;</code>
     */
    public function setToDoNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->to_do_no = $var;
    }

    /**
     * <pre>
     * "TRI-Ausdruck", der einen Prozedur-Aufruf darstellt (die eigentliche "Anweisung" also)
     * </pre>
     *
     * <code>.dstore.values.StringValue proc_call = 10003;</code>
     */
    public function getProcCall()
    {
        return $this->proc_call;
    }

    /**
     * <pre>
     * "TRI-Ausdruck", der einen Prozedur-Aufruf darstellt (die eigentliche "Anweisung" also)
     * </pre>
     *
     * <code>.dstore.values.StringValue proc_call = 10003;</code>
     */
    public function setProcCall(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->proc_call = $var;
    }

}

