<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_GetChangeOStateTrigger_Ad.proto

namespace Dstore\Engine\Om_GetChangeOStateTrigger_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_GetChangeOStateTrigger_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Gibt an, ob der Trigger "ChangeOrderStateTriggerID" mit ALLEN vom Status- Wechsel betroffenen Auftrags-Positionen aufgerufen werden soll ("0") oder nur mit denen, deren Ausgangs-Status noch NICHT dem Ziel-Status entsprach ("1")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ignore_pos_already_in_order_state = 10001;</code>
     */
    private $ignore_pos_already_in_order_state = null;
    /**
     * <pre>
     * Durch "," getrennte "OrderStateID"s (Auftrags-Positions-Status), denen "ChangeOrderStateTriggerID" zugewiesen werden kann (via "om_ModifyOrderStates_Ad", s. Parameter "&#64;ChangeOrderStateTriggerID") - falls "NULL", ist der Trigger für ALLE Status geeignet
     * </pre>
     *
     * <code>.dstore.values.StringValue suitable_for_order_state_id_list = 10002;</code>
     */
    private $suitable_for_order_state_id_list = null;
    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue change_order_state_trigger_id = 10003;</code>
     */
    private $change_order_state_trigger_id = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmGetChangeOStateTriggerAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Gibt an, ob der Trigger "ChangeOrderStateTriggerID" mit ALLEN vom Status- Wechsel betroffenen Auftrags-Positionen aufgerufen werden soll ("0") oder nur mit denen, deren Ausgangs-Status noch NICHT dem Ziel-Status entsprach ("1")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ignore_pos_already_in_order_state = 10001;</code>
     */
    public function getIgnorePosAlreadyInOrderState()
    {
        return $this->ignore_pos_already_in_order_state;
    }

    /**
     * <pre>
     * Gibt an, ob der Trigger "ChangeOrderStateTriggerID" mit ALLEN vom Status- Wechsel betroffenen Auftrags-Positionen aufgerufen werden soll ("0") oder nur mit denen, deren Ausgangs-Status noch NICHT dem Ziel-Status entsprach ("1")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue ignore_pos_already_in_order_state = 10001;</code>
     */
    public function setIgnorePosAlreadyInOrderState(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->ignore_pos_already_in_order_state = $var;
    }

    /**
     * <pre>
     * Durch "," getrennte "OrderStateID"s (Auftrags-Positions-Status), denen "ChangeOrderStateTriggerID" zugewiesen werden kann (via "om_ModifyOrderStates_Ad", s. Parameter "&#64;ChangeOrderStateTriggerID") - falls "NULL", ist der Trigger für ALLE Status geeignet
     * </pre>
     *
     * <code>.dstore.values.StringValue suitable_for_order_state_id_list = 10002;</code>
     */
    public function getSuitableForOrderStateIdList()
    {
        return $this->suitable_for_order_state_id_list;
    }

    /**
     * <pre>
     * Durch "," getrennte "OrderStateID"s (Auftrags-Positions-Status), denen "ChangeOrderStateTriggerID" zugewiesen werden kann (via "om_ModifyOrderStates_Ad", s. Parameter "&#64;ChangeOrderStateTriggerID") - falls "NULL", ist der Trigger für ALLE Status geeignet
     * </pre>
     *
     * <code>.dstore.values.StringValue suitable_for_order_state_id_list = 10002;</code>
     */
    public function setSuitableForOrderStateIdList(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->suitable_for_order_state_id_list = $var;
    }

    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue change_order_state_trigger_id = 10003;</code>
     */
    public function getChangeOrderStateTriggerId()
    {
        return $this->change_order_state_trigger_id;
    }

    /**
     * <pre>
     * ID eines "TRI-Trigger"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue change_order_state_trigger_id = 10003;</code>
     */
    public function setChangeOrderStateTriggerId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->change_order_state_trigger_id = $var;
    }

}

