<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/om_ExportOrders_Ad.proto

namespace Dstore\Engine\Om_ExportOrders_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.om_ExportOrders_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin
     * </pre>
     *
     * <code>.dstore.values.TimestampValue delivery_date_and_time = 10001;</code>
     */
    private $delivery_date_and_time = null;
    /**
     * <pre>
     * "DeliveryDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time_char = 10002;</code>
     */
    private $delivery_date_and_time_char = null;
    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10003;</code>
     */
    private $net_shipping_cost = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10004;</code>
     */
    private $netto_sum = null;
    /**
     * <pre>
     * ID eines Auftrags
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10005;</code>
     */
    private $order_id = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10006;</code>
     */
    private $brutto_sum = null;
    /**
     * <pre>
     * ID einer Position des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 10007;</code>
     */
    private $order_content_id = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10008;</code>
     */
    private $precise_net_shipping_cost = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_payment_cost = 10009;</code>
     */
    private $precise_gross_payment_cost = null;
    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10010;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10011;</code>
     */
    private $precise_net_sum = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_position_sum = 10012;</code>
     */
    private $netto_position_sum = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency = 10013;</code>
     */
    private $currency = null;
    /**
     * <pre>
     * ID des Status für die Auftrags-Position "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10014;</code>
     */
    private $order_state_id = null;
    /**
     * <pre>
     * ID der Versandart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10015;</code>
     */
    private $shipping_type_id = null;
    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_payment_cost = 10016;</code>
     */
    private $gross_payment_cost = null;
    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type = 10017;</code>
     */
    private $shipping_type = null;
    /**
     * <pre>
     * Um die wievielte Position des Auftrags handelt es sich bei "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position = 10018;</code>
     */
    private $position = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10019;</code>
     */
    private $precise_net_payment_cost = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_position_sum = 10020;</code>
     */
    private $gross_position_sum = null;
    /**
     * <pre>
     * Ein Preis-Aufschlag oder Rabatt (je nach "SurchargeIsAbsoluteValue" ein prozentualer oder absoluter Wert), der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10021;</code>
     */
    private $surcharge_value = null;
    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_shipping_cost = 10022;</code>
     */
    private $brutto_shipping_cost = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_shipping_cost = 10023;</code>
     */
    private $precise_gross_shipping_cost = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10024;</code>
     */
    private $precise_gross_sum = null;
    /**
     * <pre>
     * ID des Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), das den bestellten Artikel der Position "OrderContentID" eindeutig kennzeichnet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue h_tree_node_id = 10025;</code>
     */
    private $h_tree_node_id = null;
    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_payment_cost = 10026;</code>
     */
    private $brutto_payment_cost = null;
    /**
     * <pre>
     * ID der Zahlungsart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10027;</code>
     */
    private $payment_type_id = null;
    /**
     * <pre>
     * ID eines Preis-Aufschlags oder Rabatts, der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10028;</code>
     */
    private $surcharge_type_id = null;
    /**
     * <pre>
     * Eingangsdatum des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue order_date_and_time = 10029;</code>
     */
    private $order_date_and_time = null;
    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID3" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10030;</code>
     */
    private $value3 = null;
    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID1" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10031;</code>
     */
    private $value1 = null;
    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID2" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10032;</code>
     */
    private $value2 = null;
    /**
     * <pre>
     * "OrderDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time_char = 10033;</code>
     */
    private $order_date_and_time_char = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10034;</code>
     */
    private $net_sum = null;
    /**
     * <pre>
     * ID des von "HTreeNodeID" referenzierten Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10035;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type = 10036;</code>
     */
    private $payment_type = null;
    /**
     * <pre>
     * Wieviele Positionen (unabhängig vom Status) enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10037;</code>
     */
    private $position_count = null;
    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_position_sum = 10038;</code>
     */
    private $net_position_sum = null;
    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "CurrencyID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10039;</code>
     */
    private $surcharge_is_absolute_value = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_position_sum = 10040;</code>
     */
    private $precise_net_position_sum = null;
    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_payment_cost = 10041;</code>
     */
    private $netto_payment_cost = null;
    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10042;</code>
     */
    private $net_payment_cost = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_postion_sum = 10043;</code>
     */
    private $brutto_postion_sum = null;
    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10044;</code>
     */
    private $delivery_person_id = null;
    /**
     * <pre>
     * Wieviel wurde vom zur "HTreeNodeID" zugehörigen Artikel-Element bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 10045;</code>
     */
    private $quantity = null;
    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_shipping_cost = 10046;</code>
     */
    private $gross_shipping_cost = null;
    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10047;</code>
     */
    private $gross_sum = null;
    /**
     * <pre>
     * ID einer Währung, in der die Kosten "NettoShippingCost", "BruttoShippingCost", "NettoPaymentCost", "BruttoPaymentCost", "NettoSum", "BruttoSum", "NettoPositionSum" und "BruttoPositionSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10048;</code>
     */
    private $currency_id = null;
    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_position_sum = 10049;</code>
     */
    private $precise_gross_position_sum = null;
    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_shipping_cost = 10050;</code>
     */
    private $netto_shipping_cost = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\OmExportOrdersAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin
     * </pre>
     *
     * <code>.dstore.values.TimestampValue delivery_date_and_time = 10001;</code>
     */
    public function getDeliveryDateAndTime()
    {
        return $this->delivery_date_and_time;
    }

    /**
     * <pre>
     * Vom Auftraggeber gewünschter Liefertermin
     * </pre>
     *
     * <code>.dstore.values.TimestampValue delivery_date_and_time = 10001;</code>
     */
    public function setDeliveryDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->delivery_date_and_time = $var;
    }

    /**
     * <pre>
     * "DeliveryDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time_char = 10002;</code>
     */
    public function getDeliveryDateAndTimeChar()
    {
        return $this->delivery_date_and_time_char;
    }

    /**
     * <pre>
     * "DeliveryDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue delivery_date_and_time_char = 10002;</code>
     */
    public function setDeliveryDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->delivery_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10003;</code>
     */
    public function getNetShippingCost()
    {
        return $this->net_shipping_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_shipping_cost = 10003;</code>
     */
    public function setNetShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_shipping_cost = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10004;</code>
     */
    public function getNettoSum()
    {
        return $this->netto_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_sum = 10004;</code>
     */
    public function setNettoSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_sum = $var;
    }

    /**
     * <pre>
     * ID eines Auftrags
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10005;</code>
     */
    public function getOrderId()
    {
        return $this->order_id;
    }

    /**
     * <pre>
     * ID eines Auftrags
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_id = 10005;</code>
     */
    public function setOrderId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_id = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10006;</code>
     */
    public function getBruttoSum()
    {
        return $this->brutto_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_sum = 10006;</code>
     */
    public function setBruttoSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_sum = $var;
    }

    /**
     * <pre>
     * ID einer Position des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 10007;</code>
     */
    public function getOrderContentId()
    {
        return $this->order_content_id;
    }

    /**
     * <pre>
     * ID einer Position des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_content_id = 10007;</code>
     */
    public function setOrderContentId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_content_id = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10008;</code>
     */
    public function getPreciseNetShippingCost()
    {
        return $this->precise_net_shipping_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_shipping_cost = 10008;</code>
     */
    public function setPreciseNetShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_shipping_cost = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_payment_cost = 10009;</code>
     */
    public function getPreciseGrossPaymentCost()
    {
        return $this->precise_gross_payment_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_payment_cost = 10009;</code>
     */
    public function setPreciseGrossPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_payment_cost = $var;
    }

    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10010;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID der Person, die den Auftrag "OrderID" aufgegeben hat
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10010;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10011;</code>
     */
    public function getPreciseNetSum()
    {
        return $this->precise_net_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_sum = 10011;</code>
     */
    public function setPreciseNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_sum = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_position_sum = 10012;</code>
     */
    public function getNettoPositionSum()
    {
        return $this->netto_position_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_position_sum = 10012;</code>
     */
    public function setNettoPositionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_position_sum = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency = 10013;</code>
     */
    public function getCurrency()
    {
        return $this->currency;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "CurrencyID"
     * </pre>
     *
     * <code>.dstore.values.StringValue currency = 10013;</code>
     */
    public function setCurrency(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->currency = $var;
    }

    /**
     * <pre>
     * ID des Status für die Auftrags-Position "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10014;</code>
     */
    public function getOrderStateId()
    {
        return $this->order_state_id;
    }

    /**
     * <pre>
     * ID des Status für die Auftrags-Position "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue order_state_id = 10014;</code>
     */
    public function setOrderStateId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->order_state_id = $var;
    }

    /**
     * <pre>
     * ID der Versandart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10015;</code>
     */
    public function getShippingTypeId()
    {
        return $this->shipping_type_id;
    }

    /**
     * <pre>
     * ID der Versandart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue shipping_type_id = 10015;</code>
     */
    public function setShippingTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->shipping_type_id = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_payment_cost = 10016;</code>
     */
    public function getGrossPaymentCost()
    {
        return $this->gross_payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_payment_cost = 10016;</code>
     */
    public function setGrossPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_payment_cost = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type = 10017;</code>
     */
    public function getShippingType()
    {
        return $this->shipping_type;
    }

    /**
     * <pre>
     * Bezeichnung der Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue shipping_type = 10017;</code>
     */
    public function setShippingType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->shipping_type = $var;
    }

    /**
     * <pre>
     * Um die wievielte Position des Auftrags handelt es sich bei "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position = 10018;</code>
     */
    public function getPosition()
    {
        return $this->position;
    }

    /**
     * <pre>
     * Um die wievielte Position des Auftrags handelt es sich bei "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position = 10018;</code>
     */
    public function setPosition(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->position = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10019;</code>
     */
    public function getPreciseNetPaymentCost()
    {
        return $this->precise_net_payment_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPaymentCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_payment_cost = 10019;</code>
     */
    public function setPreciseNetPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_payment_cost = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_position_sum = 10020;</code>
     */
    public function getGrossPositionSum()
    {
        return $this->gross_position_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_position_sum = 10020;</code>
     */
    public function setGrossPositionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_position_sum = $var;
    }

    /**
     * <pre>
     * Ein Preis-Aufschlag oder Rabatt (je nach "SurchargeIsAbsoluteValue" ein prozentualer oder absoluter Wert), der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10021;</code>
     */
    public function getSurchargeValue()
    {
        return $this->surcharge_value;
    }

    /**
     * <pre>
     * Ein Preis-Aufschlag oder Rabatt (je nach "SurchargeIsAbsoluteValue" ein prozentualer oder absoluter Wert), der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.DecimalValue surcharge_value = 10021;</code>
     */
    public function setSurchargeValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->surcharge_value = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_shipping_cost = 10022;</code>
     */
    public function getBruttoShippingCost()
    {
        return $this->brutto_shipping_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_shipping_cost = 10022;</code>
     */
    public function setBruttoShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_shipping_cost = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_shipping_cost = 10023;</code>
     */
    public function getPreciseGrossShippingCost()
    {
        return $this->precise_gross_shipping_cost;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossShippingCost"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_shipping_cost = 10023;</code>
     */
    public function setPreciseGrossShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_shipping_cost = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10024;</code>
     */
    public function getPreciseGrossSum()
    {
        return $this->precise_gross_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_sum = 10024;</code>
     */
    public function setPreciseGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_sum = $var;
    }

    /**
     * <pre>
     * ID des Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), das den bestellten Artikel der Position "OrderContentID" eindeutig kennzeichnet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue h_tree_node_id = 10025;</code>
     */
    public function getHTreeNodeId()
    {
        return $this->h_tree_node_id;
    }

    /**
     * <pre>
     * ID des Elementes aus "HistoryTreeView" (in dieser ist die Historie des gesamten Artikelbaums abgebildet), das den bestellten Artikel der Position "OrderContentID" eindeutig kennzeichnet
     * </pre>
     *
     * <code>.dstore.values.IntegerValue h_tree_node_id = 10025;</code>
     */
    public function setHTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->h_tree_node_id = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_payment_cost = 10026;</code>
     */
    public function getBruttoPaymentCost()
    {
        return $this->brutto_payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_payment_cost = 10026;</code>
     */
    public function setBruttoPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_payment_cost = $var;
    }

    /**
     * <pre>
     * ID der Zahlungsart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10027;</code>
     */
    public function getPaymentTypeId()
    {
        return $this->payment_type_id;
    }

    /**
     * <pre>
     * ID der Zahlungsart für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue payment_type_id = 10027;</code>
     */
    public function setPaymentTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->payment_type_id = $var;
    }

    /**
     * <pre>
     * ID eines Preis-Aufschlags oder Rabatts, der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10028;</code>
     */
    public function getSurchargeTypeId()
    {
        return $this->surcharge_type_id;
    }

    /**
     * <pre>
     * ID eines Preis-Aufschlags oder Rabatts, der im Preis der Position "OrderContentID" enthalten ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_type_id = 10028;</code>
     */
    public function setSurchargeTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_type_id = $var;
    }

    /**
     * <pre>
     * Eingangsdatum des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue order_date_and_time = 10029;</code>
     */
    public function getOrderDateAndTime()
    {
        return $this->order_date_and_time;
    }

    /**
     * <pre>
     * Eingangsdatum des Auftrags "OrderID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue order_date_and_time = 10029;</code>
     */
    public function setOrderDateAndTime(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->order_date_and_time = $var;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID3" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10030;</code>
     */
    public function getValue3()
    {
        return $this->value3;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID3" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value3 = 10030;</code>
     */
    public function setValue3(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value3 = $var;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID1" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10031;</code>
     */
    public function getValue1()
    {
        return $this->value1;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID1" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value1 = 10031;</code>
     */
    public function setValue1(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value1 = $var;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID2" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10032;</code>
     */
    public function getValue2()
    {
        return $this->value2;
    }

    /**
     * <pre>
     * (Direkte !) Eigenschaft des zur "HTreeNodeID" zugehörigen Artikel-Elementes zum durch "&#64;NodeCharacteristicID2" angegebenen Merkmal zum Zeitpunkt "OrderDateAndTime" bzw. (falls "&#64;GetActualItemInfo = 1" ist) zum aktuellen Zeitpunkt
     * </pre>
     *
     * <code>.dstore.values.StringValue value2 = 10032;</code>
     */
    public function setValue2(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value2 = $var;
    }

    /**
     * <pre>
     * "OrderDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time_char = 10033;</code>
     */
    public function getOrderDateAndTimeChar()
    {
        return $this->order_date_and_time_char;
    }

    /**
     * <pre>
     * "OrderDateAndTime" als String im Format "15.04.2000 12:33:28:120"
     * </pre>
     *
     * <code>.dstore.values.StringValue order_date_and_time_char = 10033;</code>
     */
    public function setOrderDateAndTimeChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->order_date_and_time_char = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10034;</code>
     */
    public function getNetSum()
    {
        return $this->net_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_sum = 10034;</code>
     */
    public function setNetSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_sum = $var;
    }

    /**
     * <pre>
     * ID des von "HTreeNodeID" referenzierten Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10035;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des von "HTreeNodeID" referenzierten Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10035;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type = 10036;</code>
     */
    public function getPaymentType()
    {
        return $this->payment_type;
    }

    /**
     * <pre>
     * Bezeichnung der Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue payment_type = 10036;</code>
     */
    public function setPaymentType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->payment_type = $var;
    }

    /**
     * <pre>
     * Wieviele Positionen (unabhängig vom Status) enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10037;</code>
     */
    public function getPositionCount()
    {
        return $this->position_count;
    }

    /**
     * <pre>
     * Wieviele Positionen (unabhängig vom Status) enthält der Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue position_count = 10037;</code>
     */
    public function setPositionCount(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->position_count = $var;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_position_sum = 10038;</code>
     */
    public function getNetPositionSum()
    {
        return $this->net_position_sum;
    }

    /**
     * <pre>
     * Netto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_position_sum = 10038;</code>
     */
    public function setNetPositionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_position_sum = $var;
    }

    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "CurrencyID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10039;</code>
     */
    public function getSurchargeIsAbsoluteValue()
    {
        return $this->surcharge_is_absolute_value;
    }

    /**
     * <pre>
     * Gibt an, wie "SurchargeValue" zu verstehen ist :"0" : Es ist eine relative (d.h. prozentuale) Angabe"1" : Es ist eine absolute Währungs-Angabe in der Einheit "CurrencyID", und zwar ein NETTO-Wert"2" : Wie "1" nur als BRUTTO-Wert zu verstehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue surcharge_is_absolute_value = 10039;</code>
     */
    public function setSurchargeIsAbsoluteValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->surcharge_is_absolute_value = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_position_sum = 10040;</code>
     */
    public function getPreciseNetPositionSum()
    {
        return $this->precise_net_position_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "NetPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_net_position_sum = 10040;</code>
     */
    public function setPreciseNetPositionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_net_position_sum = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_payment_cost = 10041;</code>
     */
    public function getNettoPaymentCost()
    {
        return $this->netto_payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_payment_cost = 10041;</code>
     */
    public function setNettoPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_payment_cost = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10042;</code>
     */
    public function getNetPaymentCost()
    {
        return $this->net_payment_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Zahlungsart "PaymentTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue net_payment_cost = 10042;</code>
     */
    public function setNetPaymentCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->net_payment_cost = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_postion_sum = 10043;</code>
     */
    public function getBruttoPostionSum()
    {
        return $this->brutto_postion_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) der Auftragsposition "OrderContentID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue brutto_postion_sum = 10043;</code>
     */
    public function setBruttoPostionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->brutto_postion_sum = $var;
    }

    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10044;</code>
     */
    public function getDeliveryPersonId()
    {
        return $this->delivery_person_id;
    }

    /**
     * <pre>
     * ID der Person, an die die Ware geliefert werden soll
     * </pre>
     *
     * <code>.dstore.values.IntegerValue delivery_person_id = 10044;</code>
     */
    public function setDeliveryPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->delivery_person_id = $var;
    }

    /**
     * <pre>
     * Wieviel wurde vom zur "HTreeNodeID" zugehörigen Artikel-Element bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 10045;</code>
     */
    public function getQuantity()
    {
        return $this->quantity;
    }

    /**
     * <pre>
     * Wieviel wurde vom zur "HTreeNodeID" zugehörigen Artikel-Element bestellt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue quantity = 10045;</code>
     */
    public function setQuantity(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->quantity = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_shipping_cost = 10046;</code>
     */
    public function getGrossShippingCost()
    {
        return $this->gross_shipping_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Brutto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_shipping_cost = 10046;</code>
     */
    public function setGrossShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_shipping_cost = $var;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10047;</code>
     */
    public function getGrossSum()
    {
        return $this->gross_sum;
    }

    /**
     * <pre>
     * Brutto-Betrag (in der durch "CurrencyID" angegebenen Währung) für den Auftrag "OrderID"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue gross_sum = 10047;</code>
     */
    public function setGrossSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->gross_sum = $var;
    }

    /**
     * <pre>
     * ID einer Währung, in der die Kosten "NettoShippingCost", "BruttoShippingCost", "NettoPaymentCost", "BruttoPaymentCost", "NettoSum", "BruttoSum", "NettoPositionSum" und "BruttoPositionSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10048;</code>
     */
    public function getCurrencyId()
    {
        return $this->currency_id;
    }

    /**
     * <pre>
     * ID einer Währung, in der die Kosten "NettoShippingCost", "BruttoShippingCost", "NettoPaymentCost", "BruttoPaymentCost", "NettoSum", "BruttoSum", "NettoPositionSum" und "BruttoPositionSum" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue currency_id = 10048;</code>
     */
    public function setCurrencyId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->currency_id = $var;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_position_sum = 10049;</code>
     */
    public function getPreciseGrossPositionSum()
    {
        return $this->precise_gross_position_sum;
    }

    /**
     * <pre>
     * Exakter (intern gespeicherter) Wert für "GrossPositionSum"
     * </pre>
     *
     * <code>.dstore.values.DecimalValue precise_gross_position_sum = 10049;</code>
     */
    public function setPreciseGrossPositionSum(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->precise_gross_position_sum = $var;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_shipping_cost = 10050;</code>
     */
    public function getNettoShippingCost()
    {
        return $this->netto_shipping_cost;
    }

    /**
     * <pre>
     * Evtl. anfallende (Netto-)Kosten (in der durch "CurrencyID" angegebenen Währung) für die Versandart "ShippingTypeID" (Englischer Spaltenname ist NICHT korrekt, NICHT mehr verwenden !)
     * </pre>
     *
     * <code>.dstore.values.DecimalValue netto_shipping_cost = 10050;</code>
     */
    public function setNettoShippingCost(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\DecimalValue::class);
        $this->netto_shipping_cost = $var;
    }

}

