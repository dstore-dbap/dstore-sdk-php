<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/im_GetNodeCharacteristics_Ad.proto

namespace Dstore\Engine\Im_GetNodeCharacteristics_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.im_GetNodeCharacteristics_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleteable = 10001;</code>
     */
    private $deleteable = null;
    /**
     * <pre>
     * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor_category_id = 10002;</code>
     */
    private $predecessor_category_id = null;
    /**
     * <pre>
     * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10003;</code>
     */
    private $characteristic_description = null;
    /**
     * <pre>
     * Bezeichnung der Sprache "ValueLanguageID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value_language = 10004;</code>
     */
    private $value_language = null;
    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10005;</code>
     */
    private $field_type_id = null;
    /**
     * <pre>
     * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue in_netto = 10006;</code>
     */
    private $in_netto = null;
    /**
     * <pre>
     * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10007;</code>
     */
    private $node_characteristic_id = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue keep_properties_history_in_hours = 10009;</code>
     */
    private $keep_properties_history_in_hours = null;
    /**
     * <pre>
     * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10010;</code>
     */
    private $predefined_values = null;
    /**
     * <pre>
     * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_charac_category_id = 10011;</code>
     */
    private $node_charac_category_id = null;
    /**
     * <pre>
     * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue has_currency_unit_vals_are_net_vals = 10012;</code>
     */
    private $has_currency_unit_vals_are_net_vals = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue category_sort_no = 10013;</code>
     */
    private $category_sort_no = null;
    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10014;</code>
     */
    private $unit_id = null;
    /**
     * <pre>
     * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10015;</code>
     */
    private $is_unique = null;
    /**
     * <pre>
     * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_language_id = 10016;</code>
     */
    private $value_language_id = null;
    /**
     * <pre>
     * Bezeichnung der Kategorie "NodeCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10017;</code>
     */
    private $category_description = null;
    /**
     * <pre>
     * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue recursive = 10018;</code>
     */
    private $recursive = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\ImGetNodeCharacteristicsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleteable = 10001;</code>
     */
    public function getDeleteable()
    {
        return $this->deleteable;
    }

    /**
     * <pre>
     * Darf das Merkmal "NodeCharacteristicID" gelöscht werden ? (Falls nicht, ist es ein Merkmal, das vom "dStore" vorgegeben ist und intern verwendet wird)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleteable = 10001;</code>
     */
    public function setDeleteable(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->deleteable = $var;
    }

    /**
     * <pre>
     * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor_category_id = 10002;</code>
     */
    public function getPredecessorCategoryId()
    {
        return $this->predecessor_category_id;
    }

    /**
     * <pre>
     * ID einer Merkmal-Kategorie, die "NodeCharacCategoryID" übergeordnet ist. Entspricht der Wert dem in "NodeCharacCategoryID", handelt es sich um eine sogenannte "Hauptkategorie" (der keine Kategorie übergeordnet ist).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue predecessor_category_id = 10002;</code>
     */
    public function setPredecessorCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->predecessor_category_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10003;</code>
     */
    public function getCharacteristicDescription()
    {
        return $this->characteristic_description;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "NodeCharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10003;</code>
     */
    public function setCharacteristicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->characteristic_description = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Sprache "ValueLanguageID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value_language = 10004;</code>
     */
    public function getValueLanguage()
    {
        return $this->value_language;
    }

    /**
     * <pre>
     * Bezeichnung der Sprache "ValueLanguageID"
     * </pre>
     *
     * <code>.dstore.values.StringValue value_language = 10004;</code>
     */
    public function setValueLanguage(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value_language = $var;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10005;</code>
     */
    public function getFieldTypeId()
    {
        return $this->field_type_id;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "NodeCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10005;</code>
     */
    public function setFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->field_type_id = $var;
    }

    /**
     * <pre>
     * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue in_netto = 10006;</code>
     */
    public function getInNetto()
    {
        return $this->in_netto;
    }

    /**
     * <pre>
     * NICHT MEHR BENUTZEN !!! Stattdessen auf "HasCurrencyUnit_ValsAreNetVals" zugreifen !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue in_netto = 10006;</code>
     */
    public function setInNetto(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->in_netto = $var;
    }

    /**
     * <pre>
     * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10007;</code>
     */
    public function getNodeCharacteristicId()
    {
        return $this->node_characteristic_id;
    }

    /**
     * <pre>
     * ID eines Merkmals, zu dem Artikel-Elemente Eigenschaften haben können
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_characteristic_id = 10007;</code>
     */
    public function setNodeCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_characteristic_id = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "NodeCharacteristicID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue keep_properties_history_in_hours = 10009;</code>
     */
    public function getKeepPropertiesHistoryInHours()
    {
        return $this->keep_properties_history_in_hours;
    }

    /**
     * <pre>
     * Zeit in Stunden, über die die Historie der Eigenschaften zu diesem Merkmal für jedes Artikel-Element ("NodeID") gespeichert bleiben soll. "-1" bedeutet, daß die gesamte Historie erhalten bleibt.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue keep_properties_history_in_hours = 10009;</code>
     */
    public function setKeepPropertiesHistoryInHours(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->keep_properties_history_in_hours = $var;
    }

    /**
     * <pre>
     * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10010;</code>
     */
    public function getPredefinedValues()
    {
        return $this->predefined_values;
    }

    /**
     * <pre>
     * Hat das Merkmal "NodeCharacteristicID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10010;</code>
     */
    public function setPredefinedValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->predefined_values = $var;
    }

    /**
     * <pre>
     * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_charac_category_id = 10011;</code>
     */
    public function getNodeCharacCategoryId()
    {
        return $this->node_charac_category_id;
    }

    /**
     * <pre>
     * ID einer Kategorie, der "NodeCharacteristicID" zugeordnet ist. "NULL", falls "NodeCharacteristicID" in keiner Kategorie ist. Wurde "&#64;NodeCharacCategoryID" angegeben, steht hier natürlich die übergebene ID.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_charac_category_id = 10011;</code>
     */
    public function setNodeCharacCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_charac_category_id = $var;
    }

    /**
     * <pre>
     * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue has_currency_unit_vals_are_net_vals = 10012;</code>
     */
    public function getHasCurrencyUnitValsAreNetVals()
    {
        return $this->has_currency_unit_vals_are_net_vals;
    }

    /**
     * <pre>
     * Handelt es sich um ein "Preis-Merkmal" (d.h. ist die "UnitID" aus der Kategorie "Währung") und falls ja, sind alle Werte Netto-Preise ?"0" : Werte sind Brutto-Preise"1" : Werte sind Netto-Preise"2" : Werte sind KEINE Preis-Angaben
     * </pre>
     *
     * <code>.dstore.values.IntegerValue has_currency_unit_vals_are_net_vals = 10012;</code>
     */
    public function setHasCurrencyUnitValsAreNetVals(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->has_currency_unit_vals_are_net_vals = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue category_sort_no = 10013;</code>
     */
    public function getCategorySortNo()
    {
        return $this->category_sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge von "NodeCharacteristicID" innerhalb aller der Kategorie "NodeCharacCategoryID" zugeordneten Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue category_sort_no = 10013;</code>
     */
    public function setCategorySortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->category_sort_no = $var;
    }

    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10014;</code>
     */
    public function getUnitId()
    {
        return $this->unit_id;
    }

    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10014;</code>
     */
    public function setUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->unit_id = $var;
    }

    /**
     * <pre>
     * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10015;</code>
     */
    public function getIsUnique()
    {
        return $this->is_unique;
    }

    /**
     * <pre>
     * DERZEIT NOCH NICHT UMGESETZT ! (Sind die Eigenschaften eindeutig, d.h. wird eine Eigenschaft nur von maximal EINER "NodeID" verwendet ?)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10015;</code>
     */
    public function setIsUnique(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->is_unique = $var;
    }

    /**
     * <pre>
     * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_language_id = 10016;</code>
     */
    public function getValueLanguageId()
    {
        return $this->value_language_id;
    }

    /**
     * <pre>
     * ID einer Sprache, in der alle Eigenschaften des Merkmals "NodeCharacteristicID" angegeben sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_language_id = 10016;</code>
     */
    public function setValueLanguageId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->value_language_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "NodeCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10017;</code>
     */
    public function getCategoryDescription()
    {
        return $this->category_description;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "NodeCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 10017;</code>
     */
    public function setCategoryDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->category_description = $var;
    }

    /**
     * <pre>
     * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue recursive = 10018;</code>
     */
    public function getRecursive()
    {
        return $this->recursive;
    }

    /**
     * <pre>
     * Handelt es sich um ein rekursives Merkmal ? Rekursive Merkmale sind immer vordefiniert und haben als Eigenschaften "NodeCharacteristicID"s. (Beispiel ist der "Verkaufspreis")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue recursive = 10018;</code>
     */
    public function setRecursive(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->recursive = $var;
    }

}

