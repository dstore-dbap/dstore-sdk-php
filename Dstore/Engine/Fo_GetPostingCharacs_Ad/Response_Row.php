<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/fo_GetPostingCharacs_Ad.proto

namespace Dstore\Engine\Fo_GetPostingCharacs_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.fo_GetPostingCharacs_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bezeichnung des Merkmals "PostingCharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10001;</code>
     */
    private $characteristic_description = null;
    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    private $field_type_id = null;
    /**
     * <pre>
     * ID eines Posting-Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_characteristic_id = 10003;</code>
     */
    private $posting_characteristic_id = null;
    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "PostingCharacteristicID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    private $precision_value = null;
    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 10005;</code>
     */
    private $common_characteristic = null;
    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften zum Merkmal "PostingCharacteristicID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    private $max_length = null;
    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10007;</code>
     */
    private $predefined_values = null;
    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über "fo_GetPostingProperties_Pu") nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 10008;</code>
     */
    private $check_posting_visibility = null;
    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "PostingCharacteristicID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10009;</code>
     */
    private $format = null;
    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10010;</code>
     */
    private $basic_field_type = null;
    /**
     * <pre>
     * Bezeichnung des Feld-Typs "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10011;</code>
     */
    private $field_type_description = null;
    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10012;</code>
     */
    private $basic_field_type_id = null;
    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 10013;</code>
     */
    private $property_modification_allowed = null;
    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 10014;</code>
     */
    private $max_number_of_properties = null;
    /**
     * <pre>
     * ID eines Forums, dem das Merkmal (direkt) zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_id = 40003;</code>
     */
    private $forum_id = null;
    /**
     * <pre>
     * Name des Forums "ForumID"
     * </pre>
     *
     * <code>.dstore.values.StringValue forum_name = 40004;</code>
     */
    private $forum_name = null;
    /**
     * <pre>
     * ID einer Forum-Kategorie, dem das Merkmal zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_category_id = 50011;</code>
     */
    private $forum_category_id = null;
    /**
     * <pre>
     * Bezeichnung der Kategorie "ForumCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 50014;</code>
     */
    private $category_description = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\FoGetPostingCharacsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "PostingCharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10001;</code>
     */
    public function getCharacteristicDescription()
    {
        return $this->characteristic_description;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "PostingCharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10001;</code>
     */
    public function setCharacteristicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->characteristic_description = $var;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    public function getFieldTypeId()
    {
        return $this->field_type_id;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "PostingCharacteristicID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    public function setFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->field_type_id = $var;
    }

    /**
     * <pre>
     * ID eines Posting-Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_characteristic_id = 10003;</code>
     */
    public function getPostingCharacteristicId()
    {
        return $this->posting_characteristic_id;
    }

    /**
     * <pre>
     * ID eines Posting-Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue posting_characteristic_id = 10003;</code>
     */
    public function setPostingCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->posting_characteristic_id = $var;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "PostingCharacteristicID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function getPrecisionValue()
    {
        return $this->precision_value;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "PostingCharacteristicID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function setPrecisionValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->precision_value = $var;
    }

    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 10005;</code>
     */
    public function getCommonCharacteristic()
    {
        return $this->common_characteristic;
    }

    /**
     * <pre>
     * Gibt an, zu welchen "PersonID"s Eigenschaften zum Merkmal hinterlegt werden können :"0" : Nur "PersonID"s ungleich "0""1" : "PersonID" kann beliebig sein"2" : Nur "PersonID = 0"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue common_characteristic = 10005;</code>
     */
    public function setCommonCharacteristic(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->common_characteristic = $var;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften zum Merkmal "PostingCharacteristicID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    public function getMaxLength()
    {
        return $this->max_length;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften zum Merkmal "PostingCharacteristicID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    public function setMaxLength(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->max_length = $var;
    }

    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10007;</code>
     */
    public function getPredefinedValues()
    {
        return $this->predefined_values;
    }

    /**
     * <pre>
     * Sind mögliche Eigenschaften für Postings zum Merkmal vordefiniert ("1") oder nicht ("0")
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10007;</code>
     */
    public function setPredefinedValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->predefined_values = $var;
    }

    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über "fo_GetPostingProperties_Pu") nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 10008;</code>
     */
    public function getCheckPostingVisibility()
    {
        return $this->check_posting_visibility;
    }

    /**
     * <pre>
     * "1" bedeutet, daß das LESEN von Eigenschaften zum Merkmal (über "fo_GetPostingProperties_Pu") nur erlaubt ist, wenn die identifizierte Person auch den Beitrag lesen darf - was ja vom "Visible"-Status des jeweiligen Beitrags abhängt
     * </pre>
     *
     * <code>.dstore.values.BooleanValue check_posting_visibility = 10008;</code>
     */
    public function setCheckPostingVisibility(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->check_posting_visibility = $var;
    }

    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "PostingCharacteristicID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10009;</code>
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "PostingCharacteristicID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10009;</code>
     */
    public function setFormat(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->format = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10010;</code>
     */
    public function getBasicFieldType()
    {
        return $this->basic_field_type;
    }

    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10010;</code>
     */
    public function setBasicFieldType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->basic_field_type = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Feld-Typs "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10011;</code>
     */
    public function getFieldTypeDescription()
    {
        return $this->field_type_description;
    }

    /**
     * <pre>
     * Bezeichnung des Feld-Typs "FieldTypeID", z.B. "Ganze Zahlen von -999 bis 999" oder "Text - 20 Zeichen"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10011;</code>
     */
    public function setFieldTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->field_type_description = $var;
    }

    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10012;</code>
     */
    public function getBasicFieldTypeId()
    {
        return $this->basic_field_type_id;
    }

    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10012;</code>
     */
    public function setBasicFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->basic_field_type_id = $var;
    }

    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 10013;</code>
     */
    public function getPropertyModificationAllowed()
    {
        return $this->property_modification_allowed;
    }

    /**
     * <pre>
     * Gibt an, ob Eigenschaften zum Merkmal nachträglich geändert werden können. Es ist eine Summe folgender Werte :"0" : Hinzufügen, Ändern oder Löschen ist NICHT möglich"1" : Hinzufügen ist möglich"2" : Ändern ist möglich"4" : Löschen ist möglich
     * </pre>
     *
     * <code>.dstore.values.IntegerValue property_modification_allowed = 10013;</code>
     */
    public function setPropertyModificationAllowed(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->property_modification_allowed = $var;
    }

    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 10014;</code>
     */
    public function getMaxNumberOfProperties()
    {
        return $this->max_number_of_properties;
    }

    /**
     * <pre>
     * Gibt an, wieviele Eigenschaften zum Merkmal ein Beitrag (bei gleicher "PersonID") maximal haben darf :- "NULL" : Keine Einschränkung- "0"    : Dieser Wert ist nicht erlaubt- "1"    : Maximal 1 Eigenschaft- "2"    : Maximal 2 Eigenschaftenusw.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_number_of_properties = 10014;</code>
     */
    public function setMaxNumberOfProperties(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->max_number_of_properties = $var;
    }

    /**
     * <pre>
     * ID eines Forums, dem das Merkmal (direkt) zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_id = 40003;</code>
     */
    public function getForumId()
    {
        return $this->forum_id;
    }

    /**
     * <pre>
     * ID eines Forums, dem das Merkmal (direkt) zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_id = 40003;</code>
     */
    public function setForumId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->forum_id = $var;
    }

    /**
     * <pre>
     * Name des Forums "ForumID"
     * </pre>
     *
     * <code>.dstore.values.StringValue forum_name = 40004;</code>
     */
    public function getForumName()
    {
        return $this->forum_name;
    }

    /**
     * <pre>
     * Name des Forums "ForumID"
     * </pre>
     *
     * <code>.dstore.values.StringValue forum_name = 40004;</code>
     */
    public function setForumName(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->forum_name = $var;
    }

    /**
     * <pre>
     * ID einer Forum-Kategorie, dem das Merkmal zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_category_id = 50011;</code>
     */
    public function getForumCategoryId()
    {
        return $this->forum_category_id;
    }

    /**
     * <pre>
     * ID einer Forum-Kategorie, dem das Merkmal zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue forum_category_id = 50011;</code>
     */
    public function setForumCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->forum_category_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "ForumCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 50014;</code>
     */
    public function getCategoryDescription()
    {
        return $this->category_description;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "ForumCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 50014;</code>
     */
    public function setCategoryDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->category_description = $var;
    }

}

