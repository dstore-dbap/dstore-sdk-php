<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/pm_GetPersonCharacteristics_Ad.proto

namespace Dstore\Engine\Pm_GetPersonCharacteristics_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.pm_GetPersonCharacteristics_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Bezeichnung des Personen-Merkmals "ID"
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    private $description = null;
    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "ID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    private $field_type_id = null;
    /**
     * <pre>
     * Bezeichnung der "ID" für den Administrator. Hintergrund : Merkmale, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10003;</code>
     */
    private $description_for_admin = null;
    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "ID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    private $precision_value = null;
    /**
     * <pre>
     * Dürfen "publicuser"/"Pu"-Prozed. Eigensch.-Änderung. vornehmen ?- "0" : Nein- "1" : Ja- "2" : Nur Neu-Anlage- "3" : Nur Ändern- "4" : Nur Neu-Anlage u. Ändern- "5" : Nur Löschen- "6" : Nur Neu-Anlage u. Löschen- "7" : Nur Ändern u. Löschen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue modify = 10005;</code>
     */
    private $modify = null;
    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte zum Merkmal "ID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    private $max_length = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "ID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10007;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * Immer "0", da in diesem Fall ja gerade die Merkmale gesucht werden, die NICHT "&#64;PersonCharacCategoryID" zugeordnet sind ! (Dann hätte man die Spalte ja auch ganz weglassen können ?! - Genau !)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required_charac_category = 10008;</code>
     */
    private $required_charac_category = null;
    /**
     * <pre>
     * Hat das Merkmal "ID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10009;</code>
     */
    private $predefined_values = null;
    /**
     * <pre>
     * "NULL" wenn "Visible = 1". Welch. Teil v. Eigensch. zu "ID" für den "publicuser" ausgegeben werden :- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen ("n = 0" mögl.)- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen ("n = 0" mögl.)- NULL : Datensätze zu "ID" fehlen ganz
     * </pre>
     *
     * <code>.dstore.values.StringValue read_access_restriction_pattern = 10010;</code>
     */
    private $read_access_restriction_pattern = null;
    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "ID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10011;</code>
     */
    private $format = null;
    /**
     * <pre>
     * Wird hier eine "1" ausgegeben, bedeutet das folgendes : Jede Person eines Personen-Typs, dem das Merkmal "ID" zugewiesen ist, MUSS eine Eigenschaft zum Merkmal "ID" angeben, ansonsten kann die Person nicht angelegt werden.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required = 10012;</code>
     */
    private $required = null;
    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10013;</code>
     */
    private $basic_field_type = null;
    /**
     * <pre>
     * Falls "1", darf eine bestimmte Eigenschaft zum Merkmal "ID" nur EINER EINZIGEN Person zugewiesen werden
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10014;</code>
     */
    private $is_unique = null;
    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10015;</code>
     */
    private $field_type_description = null;
    /**
     * <pre>
     * Wenn "0", werden durch vom "publicuser" ausgeführte Prozeduren bzw. durch "Pu"-Prozeduren (z.B. "pm_GetPersonProperties_Pu") KEINE Eigenschaften/Details bzw. nur Teile von Eigenschaften (s. "ReadAccessRestrictionPattern") zur "ID" ausgegeben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue visible = 10016;</code>
     */
    private $visible = null;
    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10017;</code>
     */
    private $basic_field_type_id = null;
    /**
     * <pre>
     * ID eines Personen-Merkmals. Besteht für ein Merkmal eine komplett lesende Zugriffsbeschränkung (s. "pm_GetPChAccRestrForUsers_Ad") für den Aufrufer, FEHLT der entsprechende Datensatz im Ergebnis !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue id = 10018;</code>
     */
    private $id = null;
    /**
     * <pre>
     * ID einer Kategorie von Personen-Merkmalen, der das Merkmal "ID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_charac_category_id = 30010;</code>
     */
    private $person_charac_category_id = null;
    /**
     * <pre>
     * Bezeichnung der Kategorie "PersonCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 30019;</code>
     */
    private $category_description = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\PmGetPersonCharacteristicsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Personen-Merkmals "ID"
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * <pre>
     * Bezeichnung des Personen-Merkmals "ID"
     * </pre>
     *
     * <code>.dstore.values.StringValue description = 10001;</code>
     */
    public function setDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description = $var;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "ID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    public function getFieldTypeId()
    {
        return $this->field_type_id;
    }

    /**
     * <pre>
     * ID eines "Feld-Typs", von dem alle Eigenschaften des Merkmals "ID" sein müssen (z.B. "Text mit maximal 20 Zeichen")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue field_type_id = 10002;</code>
     */
    public function setFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->field_type_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der "ID" für den Administrator. Hintergrund : Merkmale, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10003;</code>
     */
    public function getDescriptionForAdmin()
    {
        return $this->description_for_admin;
    }

    /**
     * <pre>
     * Bezeichnung der "ID" für den Administrator. Hintergrund : Merkmale, die von der Bezeichnung her identisch sind, und für einen Administrator bei Konfigurierungen nicht auseinander zu halten wären.
     * </pre>
     *
     * <code>.dstore.values.StringValue description_for_admin = 10003;</code>
     */
    public function setDescriptionForAdmin(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->description_for_admin = $var;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "ID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function getPrecisionValue()
    {
        return $this->precision_value;
    }

    /**
     * <pre>
     * Gilt nur für Datentypen mit Basis-Daten-Typ "Zahl" und gibt die Anzahl erlaubter Nachkommastellen an, die in Eigenschaften zum Merkmal "ID" vorkommen dürfen.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue precision_value = 10004;</code>
     */
    public function setPrecisionValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->precision_value = $var;
    }

    /**
     * <pre>
     * Dürfen "publicuser"/"Pu"-Prozed. Eigensch.-Änderung. vornehmen ?- "0" : Nein- "1" : Ja- "2" : Nur Neu-Anlage- "3" : Nur Ändern- "4" : Nur Neu-Anlage u. Ändern- "5" : Nur Löschen- "6" : Nur Neu-Anlage u. Löschen- "7" : Nur Ändern u. Löschen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue modify = 10005;</code>
     */
    public function getModify()
    {
        return $this->modify;
    }

    /**
     * <pre>
     * Dürfen "publicuser"/"Pu"-Prozed. Eigensch.-Änderung. vornehmen ?- "0" : Nein- "1" : Ja- "2" : Nur Neu-Anlage- "3" : Nur Ändern- "4" : Nur Neu-Anlage u. Ändern- "5" : Nur Löschen- "6" : Nur Neu-Anlage u. Löschen- "7" : Nur Ändern u. Löschen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue modify = 10005;</code>
     */
    public function setModify(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->modify = $var;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte zum Merkmal "ID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    public function getMaxLength()
    {
        return $this->max_length;
    }

    /**
     * <pre>
     * Maximale Anzahl Zeichen, die Eigenschaften/Werte zum Merkmal "ID" haben dürfen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue max_length = 10006;</code>
     */
    public function setMaxLength(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->max_length = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "ID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10007;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge des Merkmals "ID" innerhalb aller Merkmale
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10007;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * Immer "0", da in diesem Fall ja gerade die Merkmale gesucht werden, die NICHT "&#64;PersonCharacCategoryID" zugeordnet sind ! (Dann hätte man die Spalte ja auch ganz weglassen können ?! - Genau !)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required_charac_category = 10008;</code>
     */
    public function getRequiredCharacCategory()
    {
        return $this->required_charac_category;
    }

    /**
     * <pre>
     * Immer "0", da in diesem Fall ja gerade die Merkmale gesucht werden, die NICHT "&#64;PersonCharacCategoryID" zugeordnet sind ! (Dann hätte man die Spalte ja auch ganz weglassen können ?! - Genau !)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required_charac_category = 10008;</code>
     */
    public function setRequiredCharacCategory(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->required_charac_category = $var;
    }

    /**
     * <pre>
     * Hat das Merkmal "ID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10009;</code>
     */
    public function getPredefinedValues()
    {
        return $this->predefined_values;
    }

    /**
     * <pre>
     * Hat das Merkmal "ID" nur vordefinierte Werte ("0" : Nein, "1" : Ja) ?
     * </pre>
     *
     * <code>.dstore.values.BooleanValue predefined_values = 10009;</code>
     */
    public function setPredefinedValues(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->predefined_values = $var;
    }

    /**
     * <pre>
     * "NULL" wenn "Visible = 1". Welch. Teil v. Eigensch. zu "ID" für den "publicuser" ausgegeben werden :- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen ("n = 0" mögl.)- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen ("n = 0" mögl.)- NULL : Datensätze zu "ID" fehlen ganz
     * </pre>
     *
     * <code>.dstore.values.StringValue read_access_restriction_pattern = 10010;</code>
     */
    public function getReadAccessRestrictionPattern()
    {
        return $this->read_access_restriction_pattern;
    }

    /**
     * <pre>
     * "NULL" wenn "Visible = 1". Welch. Teil v. Eigensch. zu "ID" für den "publicuser" ausgegeben werden :- "#left(&lt;n&gt;)#" : die ERSTEN n Zeichen ("n = 0" mögl.)- "#right(&lt;n&gt;)#" : die LETZTEN n Zeichen ("n = 0" mögl.)- NULL : Datensätze zu "ID" fehlen ganz
     * </pre>
     *
     * <code>.dstore.values.StringValue read_access_restriction_pattern = 10010;</code>
     */
    public function setReadAccessRestrictionPattern(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->read_access_restriction_pattern = $var;
    }

    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "ID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10011;</code>
     */
    public function getFormat()
    {
        return $this->format;
    }

    /**
     * <pre>
     * Von welchem "Format" (so etwas wie ein regulären Ausdruck) müssen die Eigenschaften zum Merkmal "ID" sein. Derzeit nicht implementiert und verwendet !
     * </pre>
     *
     * <code>.dstore.values.StringValue format = 10011;</code>
     */
    public function setFormat(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->format = $var;
    }

    /**
     * <pre>
     * Wird hier eine "1" ausgegeben, bedeutet das folgendes : Jede Person eines Personen-Typs, dem das Merkmal "ID" zugewiesen ist, MUSS eine Eigenschaft zum Merkmal "ID" angeben, ansonsten kann die Person nicht angelegt werden.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required = 10012;</code>
     */
    public function getRequired()
    {
        return $this->required;
    }

    /**
     * <pre>
     * Wird hier eine "1" ausgegeben, bedeutet das folgendes : Jede Person eines Personen-Typs, dem das Merkmal "ID" zugewiesen ist, MUSS eine Eigenschaft zum Merkmal "ID" angeben, ansonsten kann die Person nicht angelegt werden.
     * </pre>
     *
     * <code>.dstore.values.BooleanValue required = 10012;</code>
     */
    public function setRequired(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->required = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10013;</code>
     */
    public function getBasicFieldType()
    {
        return $this->basic_field_type;
    }

    /**
     * <pre>
     * Bezeichnung des Basis-Feld-Typs (z.B. "Zahl")
     * </pre>
     *
     * <code>.dstore.values.StringValue basic_field_type = 10013;</code>
     */
    public function setBasicFieldType(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->basic_field_type = $var;
    }

    /**
     * <pre>
     * Falls "1", darf eine bestimmte Eigenschaft zum Merkmal "ID" nur EINER EINZIGEN Person zugewiesen werden
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10014;</code>
     */
    public function getIsUnique()
    {
        return $this->is_unique;
    }

    /**
     * <pre>
     * Falls "1", darf eine bestimmte Eigenschaft zum Merkmal "ID" nur EINER EINZIGEN Person zugewiesen werden
     * </pre>
     *
     * <code>.dstore.values.BooleanValue is_unique = 10014;</code>
     */
    public function setIsUnique(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->is_unique = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10015;</code>
     */
    public function getFieldTypeDescription()
    {
        return $this->field_type_description;
    }

    /**
     * <pre>
     * Bezeichnung des Datentyps "FieldTypeID"
     * </pre>
     *
     * <code>.dstore.values.StringValue field_type_description = 10015;</code>
     */
    public function setFieldTypeDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->field_type_description = $var;
    }

    /**
     * <pre>
     * Wenn "0", werden durch vom "publicuser" ausgeführte Prozeduren bzw. durch "Pu"-Prozeduren (z.B. "pm_GetPersonProperties_Pu") KEINE Eigenschaften/Details bzw. nur Teile von Eigenschaften (s. "ReadAccessRestrictionPattern") zur "ID" ausgegeben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue visible = 10016;</code>
     */
    public function getVisible()
    {
        return $this->visible;
    }

    /**
     * <pre>
     * Wenn "0", werden durch vom "publicuser" ausgeführte Prozeduren bzw. durch "Pu"-Prozeduren (z.B. "pm_GetPersonProperties_Pu") KEINE Eigenschaften/Details bzw. nur Teile von Eigenschaften (s. "ReadAccessRestrictionPattern") zur "ID" ausgegeben
     * </pre>
     *
     * <code>.dstore.values.BooleanValue visible = 10016;</code>
     */
    public function setVisible(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->visible = $var;
    }

    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10017;</code>
     */
    public function getBasicFieldTypeId()
    {
        return $this->basic_field_type_id;
    }

    /**
     * <pre>
     * ID des Basis-Feld-Typs, der "FieldTypeID" zugrunde liegt (siehe auch "mi_GetFieldTypes_Ad")
     * </pre>
     *
     * <code>.dstore.values.IntegerValue basic_field_type_id = 10017;</code>
     */
    public function setBasicFieldTypeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->basic_field_type_id = $var;
    }

    /**
     * <pre>
     * ID eines Personen-Merkmals. Besteht für ein Merkmal eine komplett lesende Zugriffsbeschränkung (s. "pm_GetPChAccRestrForUsers_Ad") für den Aufrufer, FEHLT der entsprechende Datensatz im Ergebnis !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue id = 10018;</code>
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * <pre>
     * ID eines Personen-Merkmals. Besteht für ein Merkmal eine komplett lesende Zugriffsbeschränkung (s. "pm_GetPChAccRestrForUsers_Ad") für den Aufrufer, FEHLT der entsprechende Datensatz im Ergebnis !
     * </pre>
     *
     * <code>.dstore.values.IntegerValue id = 10018;</code>
     */
    public function setId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->id = $var;
    }

    /**
     * <pre>
     * ID einer Kategorie von Personen-Merkmalen, der das Merkmal "ID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_charac_category_id = 30010;</code>
     */
    public function getPersonCharacCategoryId()
    {
        return $this->person_charac_category_id;
    }

    /**
     * <pre>
     * ID einer Kategorie von Personen-Merkmalen, der das Merkmal "ID" zugeordnet ist
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_charac_category_id = 30010;</code>
     */
    public function setPersonCharacCategoryId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_charac_category_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "PersonCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 30019;</code>
     */
    public function getCategoryDescription()
    {
        return $this->category_description;
    }

    /**
     * <pre>
     * Bezeichnung der Kategorie "PersonCharacCategoryID"
     * </pre>
     *
     * <code>.dstore.values.StringValue category_description = 30019;</code>
     */
    public function setCategoryDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->category_description = $var;
    }

}

