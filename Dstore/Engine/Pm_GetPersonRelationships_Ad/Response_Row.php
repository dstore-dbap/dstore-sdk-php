<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/pm_GetPersonRelationships_Ad.proto

namespace Dstore\Engine\Pm_GetPersonRelationships_Ad;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.pm_GetPersonRelationships_Ad.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * ID einer Person, die zu "PersonID" in Beziehung steht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue related_person_id = 10001;</code>
     */
    private $related_person_id = null;
    /**
     * <pre>
     * ID einer Person, zu der es in Beziehung stehende Personen (-&gt; "RelatedPersonID") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10002;</code>
     */
    private $person_id = null;
    /**
     * <pre>
     * ID der Art in der "PersonID" und "RelatedPersonID" in Beziehung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue relationship_id = 10003;</code>
     */
    private $relationship_id = null;
    /**
     * <pre>
     * ID des Personen-Typs von "RelatedPersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id_of_related_person = 10004;</code>
     */
    private $person_type_id_of_related_person = null;
    /**
     * <pre>
     * Ende der Beziehung - "NULL" bedeutet, daß die Beziehung bis auf unbestimmte Zeit besteht
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10005;</code>
     */
    private $valid_to = null;
    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115" (hier wird "NULL" zurückgegeben, falls "ValidTo" "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 10006;</code>
     */
    private $valid_to_char = null;
    /**
     * <pre>
     * Beginn der Beziehung
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10007;</code>
     */
    private $valid_from = null;
    /**
     * <pre>
     * An welcher "Stelle" steht "RelatedPersonID" in der Liste aller Personen, die zu "PersonID" in der durch "RelationshipID" angegebenen Beziehung stehen (gemeint ist letztlich eine "Priorität" der Beziehung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * Summe von Zugriffsrechten, die "PersonID" auf Daten von "RelatedPersonID" hat. Mögliche Einzel-Zugriffsrechte : s. "pm_GetRelationAccessLevels".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue access_level = 10009;</code>
     */
    private $access_level = null;
    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 10010;</code>
     */
    private $valid_from_char = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\PmGetPersonRelationshipsAd::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * ID einer Person, die zu "PersonID" in Beziehung steht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue related_person_id = 10001;</code>
     */
    public function getRelatedPersonId()
    {
        return $this->related_person_id;
    }

    /**
     * <pre>
     * ID einer Person, die zu "PersonID" in Beziehung steht
     * </pre>
     *
     * <code>.dstore.values.IntegerValue related_person_id = 10001;</code>
     */
    public function setRelatedPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->related_person_id = $var;
    }

    /**
     * <pre>
     * ID einer Person, zu der es in Beziehung stehende Personen (-&gt; "RelatedPersonID") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10002;</code>
     */
    public function getPersonId()
    {
        return $this->person_id;
    }

    /**
     * <pre>
     * ID einer Person, zu der es in Beziehung stehende Personen (-&gt; "RelatedPersonID") gibt
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_id = 10002;</code>
     */
    public function setPersonId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_id = $var;
    }

    /**
     * <pre>
     * ID der Art in der "PersonID" und "RelatedPersonID" in Beziehung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue relationship_id = 10003;</code>
     */
    public function getRelationshipId()
    {
        return $this->relationship_id;
    }

    /**
     * <pre>
     * ID der Art in der "PersonID" und "RelatedPersonID" in Beziehung stehen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue relationship_id = 10003;</code>
     */
    public function setRelationshipId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->relationship_id = $var;
    }

    /**
     * <pre>
     * ID des Personen-Typs von "RelatedPersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id_of_related_person = 10004;</code>
     */
    public function getPersonTypeIdOfRelatedPerson()
    {
        return $this->person_type_id_of_related_person;
    }

    /**
     * <pre>
     * ID des Personen-Typs von "RelatedPersonID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue person_type_id_of_related_person = 10004;</code>
     */
    public function setPersonTypeIdOfRelatedPerson(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->person_type_id_of_related_person = $var;
    }

    /**
     * <pre>
     * Ende der Beziehung - "NULL" bedeutet, daß die Beziehung bis auf unbestimmte Zeit besteht
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10005;</code>
     */
    public function getValidTo()
    {
        return $this->valid_to;
    }

    /**
     * <pre>
     * Ende der Beziehung - "NULL" bedeutet, daß die Beziehung bis auf unbestimmte Zeit besteht
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 10005;</code>
     */
    public function setValidTo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_to = $var;
    }

    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115" (hier wird "NULL" zurückgegeben, falls "ValidTo" "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 10006;</code>
     */
    public function getValidToChar()
    {
        return $this->valid_to_char;
    }

    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115" (hier wird "NULL" zurückgegeben, falls "ValidTo" "NULL" ist)
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 10006;</code>
     */
    public function setValidToChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->valid_to_char = $var;
    }

    /**
     * <pre>
     * Beginn der Beziehung
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10007;</code>
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }

    /**
     * <pre>
     * Beginn der Beziehung
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 10007;</code>
     */
    public function setValidFrom(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_from = $var;
    }

    /**
     * <pre>
     * An welcher "Stelle" steht "RelatedPersonID" in der Liste aller Personen, die zu "PersonID" in der durch "RelationshipID" angegebenen Beziehung stehen (gemeint ist letztlich eine "Priorität" der Beziehung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * An welcher "Stelle" steht "RelatedPersonID" in der Liste aller Personen, die zu "PersonID" in der durch "RelationshipID" angegebenen Beziehung stehen (gemeint ist letztlich eine "Priorität" der Beziehung)
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10008;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * Summe von Zugriffsrechten, die "PersonID" auf Daten von "RelatedPersonID" hat. Mögliche Einzel-Zugriffsrechte : s. "pm_GetRelationAccessLevels".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue access_level = 10009;</code>
     */
    public function getAccessLevel()
    {
        return $this->access_level;
    }

    /**
     * <pre>
     * Summe von Zugriffsrechten, die "PersonID" auf Daten von "RelatedPersonID" hat. Mögliche Einzel-Zugriffsrechte : s. "pm_GetRelationAccessLevels".
     * </pre>
     *
     * <code>.dstore.values.IntegerValue access_level = 10009;</code>
     */
    public function setAccessLevel(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->access_level = $var;
    }

    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 10010;</code>
     */
    public function getValidFromChar()
    {
        return $this->valid_from_char;
    }

    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 10010;</code>
     */
    public function setValidFromChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->valid_from_char = $var;
    }

}

