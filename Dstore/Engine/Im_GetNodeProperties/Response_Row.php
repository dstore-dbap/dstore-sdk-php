<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: dstore/engine/procedures/im_GetNodeProperties.proto

namespace Dstore\Engine\Im_GetNodeProperties;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Protobuf type <code>dstore.engine.im_GetNodeProperties.Response.Row</code>
 */
class Response_Row extends \Google\Protobuf\Internal\Message
{
    /**
     * <code>int32 row_id = 10000;</code>
     */
    private $row_id = 0;
    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10001;</code>
     */
    private $active = null;
    /**
     * <pre>
     * Sofern "CharacteristicID" in "&#64;GetDetailsForCharacIDList" angegeben ist, kann hier einen "Detail"-Wert, der zu "ValueID" hinterlegt ist, zurückkommen (wenn vorhanden) - sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 10002;</code>
     */
    private $details = null;
    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften zum Merkmal "CharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10003;</code>
     */
    private $unit_id = null;
    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10004;</code>
     */
    private $characteristic_description = null;
    /**
     * <pre>
     * ID eines Elementes des Artikelbaums, zu dem Eigenschaften ermittelt werden sollen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    private $tree_node_id = null;
    /**
     * <pre>
     * ID des zur "TreeNodeID" gehörenden Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    private $node_id = null;
    /**
     * <pre>
     * Die Eigenschaft, die "NodeID" zum Merkmal "CharacteristicID" besitzt
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10007;</code>
     */
    private $value = null;
    /**
     * <pre>
     * ID eines Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10008;</code>
     */
    private $characteristic_id = null;
    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10009;</code>
     */
    private $value_id = null;
    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10010;</code>
     */
    private $unit_symbol = null;
    /**
     * <pre>
     * Ist "TreeNodeID" bereits gelöscht ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleted = 10011;</code>
     */
    private $deleted = null;
    /**
     * <pre>
     * Bestimmt die Reihenfolge der Eigenschaft "Value" innerhalb aller Eigenschaften zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10012;</code>
     */
    private $sort_no = null;
    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 30002;</code>
     */
    private $valid_to_char = null;
    /**
     * <pre>
     * ID des Elementes im Artikelbaum, von dem "TreeNodeID" die Eigenschaft ("Value") "erbt". Der Wert hier ist identisch mit "TreeNodeID", falls die Eigenschaft direkt "NodeID" zugwiesen ist (also NICHT "geerbt" wurde).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_tree_node_id = 30010;</code>
     */
    private $inherits_from_tree_node_id = null;
    /**
     * <pre>
     * Ende des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID". "NULL" bedeutet, daß die Eigenschaft aktuell und bis auf weiteres auch in Zukunft ("für immer") "InheritsFromNodeID" zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 30011;</code>
     */
    private $valid_to = null;
    /**
     * <pre>
     * Beginn des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 30015;</code>
     */
    private $valid_from = null;
    /**
     * <pre>
     * ID des zur "InheritsFromTreeNodeID" gehörenden Artikel-Elementes. Wert entspricht "NodeID", wenn "Value" nicht geerbt wurde, sondern "NodeID" direkt zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_node_id = 30017;</code>
     */
    private $inherits_from_node_id = null;
    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 30018;</code>
     */
    private $valid_from_char = null;

    public function __construct() {
        \GPBMetadata\Dstore\Engine\Procedures\ImGetNodeProperties::initOnce();
        parent::__construct();
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function getRowId()
    {
        return $this->row_id;
    }

    /**
     * <code>int32 row_id = 10000;</code>
     */
    public function setRowId($var)
    {
        GPBUtil::checkInt32($var);
        $this->row_id = $var;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10001;</code>
     */
    public function getActive()
    {
        return $this->active;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" z.Zt. aktiviert ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue active = 10001;</code>
     */
    public function setActive(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->active = $var;
    }

    /**
     * <pre>
     * Sofern "CharacteristicID" in "&#64;GetDetailsForCharacIDList" angegeben ist, kann hier einen "Detail"-Wert, der zu "ValueID" hinterlegt ist, zurückkommen (wenn vorhanden) - sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 10002;</code>
     */
    public function getDetails()
    {
        return $this->details;
    }

    /**
     * <pre>
     * Sofern "CharacteristicID" in "&#64;GetDetailsForCharacIDList" angegeben ist, kann hier einen "Detail"-Wert, der zu "ValueID" hinterlegt ist, zurückkommen (wenn vorhanden) - sonst "NULL"
     * </pre>
     *
     * <code>.dstore.values.StringValue details = 10002;</code>
     */
    public function setDetails(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->details = $var;
    }

    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften zum Merkmal "CharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10003;</code>
     */
    public function getUnitId()
    {
        return $this->unit_id;
    }

    /**
     * <pre>
     * ID einer Einheit, in der alle Eigenschaften zum Merkmal "CharacteristicID" sind
     * </pre>
     *
     * <code>.dstore.values.IntegerValue unit_id = 10003;</code>
     */
    public function setUnitId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->unit_id = $var;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10004;</code>
     */
    public function getCharacteristicDescription()
    {
        return $this->characteristic_description;
    }

    /**
     * <pre>
     * Bezeichnung des Merkmals "CharacteristicID" (in der Standardsprache)
     * </pre>
     *
     * <code>.dstore.values.StringValue characteristic_description = 10004;</code>
     */
    public function setCharacteristicDescription(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->characteristic_description = $var;
    }

    /**
     * <pre>
     * ID eines Elementes des Artikelbaums, zu dem Eigenschaften ermittelt werden sollen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    public function getTreeNodeId()
    {
        return $this->tree_node_id;
    }

    /**
     * <pre>
     * ID eines Elementes des Artikelbaums, zu dem Eigenschaften ermittelt werden sollen
     * </pre>
     *
     * <code>.dstore.values.IntegerValue tree_node_id = 10005;</code>
     */
    public function setTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->tree_node_id = $var;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" gehörenden Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    public function getNodeId()
    {
        return $this->node_id;
    }

    /**
     * <pre>
     * ID des zur "TreeNodeID" gehörenden Artikel-Elementes
     * </pre>
     *
     * <code>.dstore.values.IntegerValue node_id = 10006;</code>
     */
    public function setNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->node_id = $var;
    }

    /**
     * <pre>
     * Die Eigenschaft, die "NodeID" zum Merkmal "CharacteristicID" besitzt
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10007;</code>
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * <pre>
     * Die Eigenschaft, die "NodeID" zum Merkmal "CharacteristicID" besitzt
     * </pre>
     *
     * <code>.dstore.values.StringValue value = 10007;</code>
     */
    public function setValue(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->value = $var;
    }

    /**
     * <pre>
     * ID eines Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10008;</code>
     */
    public function getCharacteristicId()
    {
        return $this->characteristic_id;
    }

    /**
     * <pre>
     * ID eines Merkmals
     * </pre>
     *
     * <code>.dstore.values.IntegerValue characteristic_id = 10008;</code>
     */
    public function setCharacteristicId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->characteristic_id = $var;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10009;</code>
     */
    public function getValueId()
    {
        return $this->value_id;
    }

    /**
     * <pre>
     * ID der Eigenschaft "Value"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue value_id = 10009;</code>
     */
    public function setValueId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->value_id = $var;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10010;</code>
     */
    public function getUnitSymbol()
    {
        return $this->unit_symbol;
    }

    /**
     * <pre>
     * Symbol (im Regelfall der ISO-Code) der Einheit "UnitID"
     * </pre>
     *
     * <code>.dstore.values.StringValue unit_symbol = 10010;</code>
     */
    public function setUnitSymbol(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->unit_symbol = $var;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" bereits gelöscht ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleted = 10011;</code>
     */
    public function getDeleted()
    {
        return $this->deleted;
    }

    /**
     * <pre>
     * Ist "TreeNodeID" bereits gelöscht ? ("0" : Nein, "1" : Ja)
     * </pre>
     *
     * <code>.dstore.values.BooleanValue deleted = 10011;</code>
     */
    public function setDeleted(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\BooleanValue::class);
        $this->deleted = $var;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge der Eigenschaft "Value" innerhalb aller Eigenschaften zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10012;</code>
     */
    public function getSortNo()
    {
        return $this->sort_no;
    }

    /**
     * <pre>
     * Bestimmt die Reihenfolge der Eigenschaft "Value" innerhalb aller Eigenschaften zum Merkmal "CharacteristicID"
     * </pre>
     *
     * <code>.dstore.values.IntegerValue sort_no = 10012;</code>
     */
    public function setSortNo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->sort_no = $var;
    }

    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 30002;</code>
     */
    public function getValidToChar()
    {
        return $this->valid_to_char;
    }

    /**
     * <pre>
     * "ValidTo" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_to_char = 30002;</code>
     */
    public function setValidToChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->valid_to_char = $var;
    }

    /**
     * <pre>
     * ID des Elementes im Artikelbaum, von dem "TreeNodeID" die Eigenschaft ("Value") "erbt". Der Wert hier ist identisch mit "TreeNodeID", falls die Eigenschaft direkt "NodeID" zugwiesen ist (also NICHT "geerbt" wurde).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_tree_node_id = 30010;</code>
     */
    public function getInheritsFromTreeNodeId()
    {
        return $this->inherits_from_tree_node_id;
    }

    /**
     * <pre>
     * ID des Elementes im Artikelbaum, von dem "TreeNodeID" die Eigenschaft ("Value") "erbt". Der Wert hier ist identisch mit "TreeNodeID", falls die Eigenschaft direkt "NodeID" zugwiesen ist (also NICHT "geerbt" wurde).
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_tree_node_id = 30010;</code>
     */
    public function setInheritsFromTreeNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->inherits_from_tree_node_id = $var;
    }

    /**
     * <pre>
     * Ende des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID". "NULL" bedeutet, daß die Eigenschaft aktuell und bis auf weiteres auch in Zukunft ("für immer") "InheritsFromNodeID" zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 30011;</code>
     */
    public function getValidTo()
    {
        return $this->valid_to;
    }

    /**
     * <pre>
     * Ende des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID". "NULL" bedeutet, daß die Eigenschaft aktuell und bis auf weiteres auch in Zukunft ("für immer") "InheritsFromNodeID" zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_to = 30011;</code>
     */
    public function setValidTo(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_to = $var;
    }

    /**
     * <pre>
     * Beginn des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 30015;</code>
     */
    public function getValidFrom()
    {
        return $this->valid_from;
    }

    /**
     * <pre>
     * Beginn des Gültigkeits-Zeitraums der Eigenschaft "Value" für "InheritsFromNodeID"
     * </pre>
     *
     * <code>.dstore.values.TimestampValue valid_from = 30015;</code>
     */
    public function setValidFrom(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\TimestampValue::class);
        $this->valid_from = $var;
    }

    /**
     * <pre>
     * ID des zur "InheritsFromTreeNodeID" gehörenden Artikel-Elementes. Wert entspricht "NodeID", wenn "Value" nicht geerbt wurde, sondern "NodeID" direkt zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_node_id = 30017;</code>
     */
    public function getInheritsFromNodeId()
    {
        return $this->inherits_from_node_id;
    }

    /**
     * <pre>
     * ID des zur "InheritsFromTreeNodeID" gehörenden Artikel-Elementes. Wert entspricht "NodeID", wenn "Value" nicht geerbt wurde, sondern "NodeID" direkt zugewiesen ist.
     * </pre>
     *
     * <code>.dstore.values.IntegerValue inherits_from_node_id = 30017;</code>
     */
    public function setInheritsFromNodeId(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\IntegerValue::class);
        $this->inherits_from_node_id = $var;
    }

    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 30018;</code>
     */
    public function getValidFromChar()
    {
        return $this->valid_from_char;
    }

    /**
     * <pre>
     * "ValidFrom" als "String" im Format "01.04.2001 15:20:55:115"
     * </pre>
     *
     * <code>.dstore.values.StringValue valid_from_char = 30018;</code>
     */
    public function setValidFromChar(&$var)
    {
        GPBUtil::checkMessage($var, \Dstore\Values\StringValue::class);
        $this->valid_from_char = $var;
    }

}

