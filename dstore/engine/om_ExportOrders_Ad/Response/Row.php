<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_ExportOrders_Ad.proto
//   Date: 2015-10-06 11:19:55

namespace dstore\engine\om_ExportOrders_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $delivery_date_and_time = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $delivery_date_and_time_char = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_content_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_payment_cost = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $currency = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_state_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $shipping_type_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_payment_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $shipping_type = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $position = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_payment_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_position_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $surcharge_value = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_shipping_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $h_tree_node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $payment_type_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $order_date_and_time = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value3 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value1 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value2 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_date_and_time_char = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $payment_type = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $position_count = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_position_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_is_absolute_value = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_position_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_payment_cost = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $delivery_person_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $quantity = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_shipping_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_position_sum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_ExportOrders_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_date_and_time = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "delivery_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_date_and_time_char = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "delivery_date_and_time_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_shipping_cost = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "order_content_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_shipping_cost = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "precise_net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_payment_cost = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "precise_gross_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_sum = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "precise_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "currency";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_state_id = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "order_state_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_id = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "shipping_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_payment_cost = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "gross_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type = 10014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10014;
      $f->name      = "shipping_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE position = 10015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10015;
      $f->name      = "position";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_payment_cost = 10016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10016;
      $f->name      = "precise_net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_position_sum = 10017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10017;
      $f->name      = "gross_position_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_value = 10018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10018;
      $f->name      = "surcharge_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_shipping_cost = 10019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10019;
      $f->name      = "precise_gross_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_sum = 10020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10020;
      $f->name      = "precise_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE h_tree_node_id = 10021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10021;
      $f->name      = "h_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_id = 10022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10022;
      $f->name      = "payment_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_id = 10023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10023;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_date_and_time = 10024
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10024;
      $f->name      = "order_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value3 = 10025
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10025;
      $f->name      = "value3";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value1 = 10026
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10026;
      $f->name      = "value1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value2 = 10027
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10027;
      $f->name      = "value2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_date_and_time_char = 10028
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10028;
      $f->name      = "order_date_and_time_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_sum = 10029
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10029;
      $f->name      = "net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10030
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10030;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type = 10031
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10031;
      $f->name      = "payment_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE position_count = 10032
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10032;
      $f->name      = "position_count";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_position_sum = 10033
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10033;
      $f->name      = "net_position_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_is_absolute_value = 10034
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10034;
      $f->name      = "surcharge_is_absolute_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_position_sum = 10035
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10035;
      $f->name      = "precise_net_position_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_payment_cost = 10036
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10036;
      $f->name      = "net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_person_id = 10037
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10037;
      $f->name      = "delivery_person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quantity = 10038
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10038;
      $f->name      = "quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_shipping_cost = 10039
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10039;
      $f->name      = "gross_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_sum = 10040
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10040;
      $f->name      = "gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 10041
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10041;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_position_sum = 10042
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10042;
      $f->name      = "precise_gross_position_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <delivery_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasDeliveryDateAndTime(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <delivery_date_and_time> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearDeliveryDateAndTime(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <delivery_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getDeliveryDateAndTime(){
      return $this->_get(10001);
    }
    
    /**
     * Set <delivery_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setDeliveryDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <delivery_date_and_time_char> has a value
     *
     * @return boolean
     */
    public function hasDeliveryDateAndTimeChar(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <delivery_date_and_time_char> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearDeliveryDateAndTimeChar(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <delivery_date_and_time_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDeliveryDateAndTimeChar(){
      return $this->_get(10002);
    }
    
    /**
     * Set <delivery_date_and_time_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setDeliveryDateAndTimeChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasNetShippingCost(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <net_shipping_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearNetShippingCost(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetShippingCost(){
      return $this->_get(10003);
    }
    
    /**
     * Set <net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <order_id> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <order_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearOrderId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <order_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <order_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setOrderId(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <order_content_id> has a value
     *
     * @return boolean
     */
    public function hasOrderContentId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <order_content_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearOrderContentId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <order_content_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderContentId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <order_content_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setOrderContentId(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <precise_net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetShippingCost(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseNetShippingCost(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetShippingCost(){
      return $this->_get(10006);
    }
    
    /**
     * Set <precise_net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <precise_gross_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossPaymentCost(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <precise_gross_payment_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseGrossPaymentCost(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <precise_gross_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossPaymentCost(){
      return $this->_get(10007);
    }
    
    /**
     * Set <precise_gross_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseGrossPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPersonId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <precise_net_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetSum(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <precise_net_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseNetSum(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <precise_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetSum(){
      return $this->_get(10009);
    }
    
    /**
     * Set <precise_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <currency> has a value
     *
     * @return boolean
     */
    public function hasCurrency(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <currency> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearCurrency(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <currency> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCurrency(){
      return $this->_get(10010);
    }
    
    /**
     * Set <currency> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setCurrency(\dstore\engine\values\stringValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <order_state_id> has a value
     *
     * @return boolean
     */
    public function hasOrderStateId(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <order_state_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearOrderStateId(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <order_state_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderStateId(){
      return $this->_get(10011);
    }
    
    /**
     * Set <order_state_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setOrderStateId(\dstore\engine\values\integerValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <shipping_type_id> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeId(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <shipping_type_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearShippingTypeId(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <shipping_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getShippingTypeId(){
      return $this->_get(10012);
    }
    
    /**
     * Set <shipping_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setShippingTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <gross_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasGrossPaymentCost(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <gross_payment_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearGrossPaymentCost(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <gross_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossPaymentCost(){
      return $this->_get(10013);
    }
    
    /**
     * Set <gross_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setGrossPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10013, $value);
    }
    
    /**
     * Check if <shipping_type> has a value
     *
     * @return boolean
     */
    public function hasShippingType(){
      return $this->_has(10014);
    }
    
    /**
     * Clear <shipping_type> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearShippingType(){
      return $this->_clear(10014);
    }
    
    /**
     * Get <shipping_type> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getShippingType(){
      return $this->_get(10014);
    }
    
    /**
     * Set <shipping_type> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setShippingType(\dstore\engine\values\stringValue $value){
      return $this->_set(10014, $value);
    }
    
    /**
     * Check if <position> has a value
     *
     * @return boolean
     */
    public function hasPosition(){
      return $this->_has(10015);
    }
    
    /**
     * Clear <position> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPosition(){
      return $this->_clear(10015);
    }
    
    /**
     * Get <position> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPosition(){
      return $this->_get(10015);
    }
    
    /**
     * Set <position> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPosition(\dstore\engine\values\integerValue $value){
      return $this->_set(10015, $value);
    }
    
    /**
     * Check if <precise_net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetPaymentCost(){
      return $this->_has(10016);
    }
    
    /**
     * Clear <precise_net_payment_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseNetPaymentCost(){
      return $this->_clear(10016);
    }
    
    /**
     * Get <precise_net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetPaymentCost(){
      return $this->_get(10016);
    }
    
    /**
     * Set <precise_net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10016, $value);
    }
    
    /**
     * Check if <gross_position_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossPositionSum(){
      return $this->_has(10017);
    }
    
    /**
     * Clear <gross_position_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearGrossPositionSum(){
      return $this->_clear(10017);
    }
    
    /**
     * Get <gross_position_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossPositionSum(){
      return $this->_get(10017);
    }
    
    /**
     * Set <gross_position_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setGrossPositionSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10017, $value);
    }
    
    /**
     * Check if <surcharge_value> has a value
     *
     * @return boolean
     */
    public function hasSurchargeValue(){
      return $this->_has(10018);
    }
    
    /**
     * Clear <surcharge_value> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearSurchargeValue(){
      return $this->_clear(10018);
    }
    
    /**
     * Get <surcharge_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getSurchargeValue(){
      return $this->_get(10018);
    }
    
    /**
     * Set <surcharge_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setSurchargeValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(10018, $value);
    }
    
    /**
     * Check if <precise_gross_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossShippingCost(){
      return $this->_has(10019);
    }
    
    /**
     * Clear <precise_gross_shipping_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseGrossShippingCost(){
      return $this->_clear(10019);
    }
    
    /**
     * Get <precise_gross_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossShippingCost(){
      return $this->_get(10019);
    }
    
    /**
     * Set <precise_gross_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseGrossShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10019, $value);
    }
    
    /**
     * Check if <precise_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossSum(){
      return $this->_has(10020);
    }
    
    /**
     * Clear <precise_gross_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseGrossSum(){
      return $this->_clear(10020);
    }
    
    /**
     * Get <precise_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossSum(){
      return $this->_get(10020);
    }
    
    /**
     * Set <precise_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10020, $value);
    }
    
    /**
     * Check if <h_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasHTreeNodeId(){
      return $this->_has(10021);
    }
    
    /**
     * Clear <h_tree_node_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearHTreeNodeId(){
      return $this->_clear(10021);
    }
    
    /**
     * Get <h_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getHTreeNodeId(){
      return $this->_get(10021);
    }
    
    /**
     * Set <h_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setHTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10021, $value);
    }
    
    /**
     * Check if <payment_type_id> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeId(){
      return $this->_has(10022);
    }
    
    /**
     * Clear <payment_type_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPaymentTypeId(){
      return $this->_clear(10022);
    }
    
    /**
     * Get <payment_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPaymentTypeId(){
      return $this->_get(10022);
    }
    
    /**
     * Set <payment_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPaymentTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10022, $value);
    }
    
    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(10023);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(10023);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(10023);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setSurchargeTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10023, $value);
    }
    
    /**
     * Check if <order_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasOrderDateAndTime(){
      return $this->_has(10024);
    }
    
    /**
     * Clear <order_date_and_time> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearOrderDateAndTime(){
      return $this->_clear(10024);
    }
    
    /**
     * Get <order_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getOrderDateAndTime(){
      return $this->_get(10024);
    }
    
    /**
     * Set <order_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setOrderDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10024, $value);
    }
    
    /**
     * Check if <value3> has a value
     *
     * @return boolean
     */
    public function hasValue3(){
      return $this->_has(10025);
    }
    
    /**
     * Clear <value3> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearValue3(){
      return $this->_clear(10025);
    }
    
    /**
     * Get <value3> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue3(){
      return $this->_get(10025);
    }
    
    /**
     * Set <value3> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setValue3(\dstore\engine\values\stringValue $value){
      return $this->_set(10025, $value);
    }
    
    /**
     * Check if <value1> has a value
     *
     * @return boolean
     */
    public function hasValue1(){
      return $this->_has(10026);
    }
    
    /**
     * Clear <value1> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearValue1(){
      return $this->_clear(10026);
    }
    
    /**
     * Get <value1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue1(){
      return $this->_get(10026);
    }
    
    /**
     * Set <value1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setValue1(\dstore\engine\values\stringValue $value){
      return $this->_set(10026, $value);
    }
    
    /**
     * Check if <value2> has a value
     *
     * @return boolean
     */
    public function hasValue2(){
      return $this->_has(10027);
    }
    
    /**
     * Clear <value2> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearValue2(){
      return $this->_clear(10027);
    }
    
    /**
     * Get <value2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue2(){
      return $this->_get(10027);
    }
    
    /**
     * Set <value2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setValue2(\dstore\engine\values\stringValue $value){
      return $this->_set(10027, $value);
    }
    
    /**
     * Check if <order_date_and_time_char> has a value
     *
     * @return boolean
     */
    public function hasOrderDateAndTimeChar(){
      return $this->_has(10028);
    }
    
    /**
     * Clear <order_date_and_time_char> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearOrderDateAndTimeChar(){
      return $this->_clear(10028);
    }
    
    /**
     * Get <order_date_and_time_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderDateAndTimeChar(){
      return $this->_get(10028);
    }
    
    /**
     * Set <order_date_and_time_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setOrderDateAndTimeChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10028, $value);
    }
    
    /**
     * Check if <net_sum> has a value
     *
     * @return boolean
     */
    public function hasNetSum(){
      return $this->_has(10029);
    }
    
    /**
     * Clear <net_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearNetSum(){
      return $this->_clear(10029);
    }
    
    /**
     * Get <net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetSum(){
      return $this->_get(10029);
    }
    
    /**
     * Set <net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10029, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10030);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10030);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10030);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10030, $value);
    }
    
    /**
     * Check if <payment_type> has a value
     *
     * @return boolean
     */
    public function hasPaymentType(){
      return $this->_has(10031);
    }
    
    /**
     * Clear <payment_type> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPaymentType(){
      return $this->_clear(10031);
    }
    
    /**
     * Get <payment_type> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPaymentType(){
      return $this->_get(10031);
    }
    
    /**
     * Set <payment_type> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPaymentType(\dstore\engine\values\stringValue $value){
      return $this->_set(10031, $value);
    }
    
    /**
     * Check if <position_count> has a value
     *
     * @return boolean
     */
    public function hasPositionCount(){
      return $this->_has(10032);
    }
    
    /**
     * Clear <position_count> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPositionCount(){
      return $this->_clear(10032);
    }
    
    /**
     * Get <position_count> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPositionCount(){
      return $this->_get(10032);
    }
    
    /**
     * Set <position_count> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPositionCount(\dstore\engine\values\integerValue $value){
      return $this->_set(10032, $value);
    }
    
    /**
     * Check if <net_position_sum> has a value
     *
     * @return boolean
     */
    public function hasNetPositionSum(){
      return $this->_has(10033);
    }
    
    /**
     * Clear <net_position_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearNetPositionSum(){
      return $this->_clear(10033);
    }
    
    /**
     * Get <net_position_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetPositionSum(){
      return $this->_get(10033);
    }
    
    /**
     * Set <net_position_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setNetPositionSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10033, $value);
    }
    
    /**
     * Check if <surcharge_is_absolute_value> has a value
     *
     * @return boolean
     */
    public function hasSurchargeIsAbsoluteValue(){
      return $this->_has(10034);
    }
    
    /**
     * Clear <surcharge_is_absolute_value> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearSurchargeIsAbsoluteValue(){
      return $this->_clear(10034);
    }
    
    /**
     * Get <surcharge_is_absolute_value> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeIsAbsoluteValue(){
      return $this->_get(10034);
    }
    
    /**
     * Set <surcharge_is_absolute_value> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setSurchargeIsAbsoluteValue(\dstore\engine\values\integerValue $value){
      return $this->_set(10034, $value);
    }
    
    /**
     * Check if <precise_net_position_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetPositionSum(){
      return $this->_has(10035);
    }
    
    /**
     * Clear <precise_net_position_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseNetPositionSum(){
      return $this->_clear(10035);
    }
    
    /**
     * Get <precise_net_position_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetPositionSum(){
      return $this->_get(10035);
    }
    
    /**
     * Set <precise_net_position_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseNetPositionSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10035, $value);
    }
    
    /**
     * Check if <net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasNetPaymentCost(){
      return $this->_has(10036);
    }
    
    /**
     * Clear <net_payment_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearNetPaymentCost(){
      return $this->_clear(10036);
    }
    
    /**
     * Get <net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetPaymentCost(){
      return $this->_get(10036);
    }
    
    /**
     * Set <net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10036, $value);
    }
    
    /**
     * Check if <delivery_person_id> has a value
     *
     * @return boolean
     */
    public function hasDeliveryPersonId(){
      return $this->_has(10037);
    }
    
    /**
     * Clear <delivery_person_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearDeliveryPersonId(){
      return $this->_clear(10037);
    }
    
    /**
     * Get <delivery_person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDeliveryPersonId(){
      return $this->_get(10037);
    }
    
    /**
     * Set <delivery_person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setDeliveryPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10037, $value);
    }
    
    /**
     * Check if <quantity> has a value
     *
     * @return boolean
     */
    public function hasQuantity(){
      return $this->_has(10038);
    }
    
    /**
     * Clear <quantity> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearQuantity(){
      return $this->_clear(10038);
    }
    
    /**
     * Get <quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getQuantity(){
      return $this->_get(10038);
    }
    
    /**
     * Set <quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(10038, $value);
    }
    
    /**
     * Check if <gross_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasGrossShippingCost(){
      return $this->_has(10039);
    }
    
    /**
     * Clear <gross_shipping_cost> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearGrossShippingCost(){
      return $this->_clear(10039);
    }
    
    /**
     * Get <gross_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossShippingCost(){
      return $this->_get(10039);
    }
    
    /**
     * Set <gross_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setGrossShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10039, $value);
    }
    
    /**
     * Check if <gross_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossSum(){
      return $this->_has(10040);
    }
    
    /**
     * Clear <gross_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearGrossSum(){
      return $this->_clear(10040);
    }
    
    /**
     * Get <gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossSum(){
      return $this->_get(10040);
    }
    
    /**
     * Set <gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10040, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(10041);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearCurrencyId(){
      return $this->_clear(10041);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(10041);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10041, $value);
    }
    
    /**
     * Check if <precise_gross_position_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossPositionSum(){
      return $this->_has(10042);
    }
    
    /**
     * Clear <precise_gross_position_sum> value
     *
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function clearPreciseGrossPositionSum(){
      return $this->_clear(10042);
    }
    
    /**
     * Get <precise_gross_position_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossPositionSum(){
      return $this->_get(10042);
    }
    
    /**
     * Set <precise_gross_position_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ExportOrders_Ad\Response\Row
     */
    public function setPreciseGrossPositionSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10042, $value);
    }
  }
}

