<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetProcExecRestrForGroup_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $operator = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_nesting_level = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_number = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $restriction_is_active = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $parameter_name = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $restriction_for_user_group_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetProcExecRestrForGroup_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_nesting_level = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "from_nesting_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_number = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "condition_number";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE restriction_is_active = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "restriction_is_active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parameter_name = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "parameter_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE restriction_for_user_group_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "restriction_for_user_group_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <operator> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearOperator(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <operator> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOperator(){
      return $this->_get(10001);
    }
    
    /**
     * Set <operator> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setOperator(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearCondition(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <condition> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCondition(){
      return $this->_get(10002);
    }
    
    /**
     * Set <condition> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setCondition(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <from_nesting_level> has a value
     *
     * @return boolean
     */
    public function hasFromNestingLevel(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <from_nesting_level> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearFromNestingLevel(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <from_nesting_level> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromNestingLevel(){
      return $this->_get(10003);
    }
    
    /**
     * Set <from_nesting_level> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setFromNestingLevel(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <condition_number> has a value
     *
     * @return boolean
     */
    public function hasConditionNumber(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <condition_number> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearConditionNumber(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <condition_number> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionNumber(){
      return $this->_get(10004);
    }
    
    /**
     * Set <condition_number> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setConditionNumber(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <restriction_is_active> has a value
     *
     * @return boolean
     */
    public function hasRestrictionIsActive(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <restriction_is_active> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearRestrictionIsActive(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <restriction_is_active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getRestrictionIsActive(){
      return $this->_get(10005);
    }
    
    /**
     * Set <restriction_is_active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setRestrictionIsActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <condition_id> has a value
     *
     * @return boolean
     */
    public function hasConditionId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <condition_id> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearConditionId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <condition_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <condition_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setConditionId(\dstore\engine\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <parameter_name> has a value
     *
     * @return boolean
     */
    public function hasParameterName(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <parameter_name> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearParameterName(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <parameter_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getParameterName(){
      return $this->_get(10007);
    }
    
    /**
     * Set <parameter_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setParameterName(\dstore\engine\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <restriction_for_user_group_id> has a value
     *
     * @return boolean
     */
    public function hasRestrictionForUserGroupId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <restriction_for_user_group_id> value
     *
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function clearRestrictionForUserGroupId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <restriction_for_user_group_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRestrictionForUserGroupId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <restriction_for_user_group_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcExecRestrForGroup_Ad\Response\Row
     */
    public function setRestrictionForUserGroupId(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
  }
}

