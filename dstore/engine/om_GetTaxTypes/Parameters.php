<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetTaxTypes.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\om_GetTaxTypes {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $tax_type_id = null;
    
    /**  @var boolean */
    public $tax_type_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetTaxTypes.Parameters');

      // OPTIONAL MESSAGE tax_type_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tax_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tax_type_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tax_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tax_type_id> has a value
     *
     * @return boolean
     */
    public function hasTaxTypeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tax_type_id> value
     *
     * @return \dstore\engine\om_GetTaxTypes\Parameters
     */
    public function clearTaxTypeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tax_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTaxTypeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <tax_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetTaxTypes\Parameters
     */
    public function setTaxTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tax_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasTaxTypeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tax_type_id_null> value
     *
     * @return \dstore\engine\om_GetTaxTypes\Parameters
     */
    public function clearTaxTypeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tax_type_id_null> value
     *
     * @return boolean
     */
    public function getTaxTypeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tax_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_GetTaxTypes\Parameters
     */
    public function setTaxTypeIdNull( $value){
      return $this->_set(1001, $value);
    }
  }
}

