<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetLevelForNode_Pu.proto
//   Date: 2016-05-19 08:07:42

namespace dstore\engine\im_GetLevelForNode_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $node_id = null;
    
    /**  @var boolean */
    public $node_id_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $is_node_id = null;
    
    /**  @var boolean */
    public $is_node_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetLevelForNode_Pu.Parameters');

      // OPTIONAL MESSAGE node_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE is_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "is_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL is_node_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "is_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function clearNodeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function setNodeId(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_id_null> has a value
     *
     * @return boolean
     */
    public function hasNodeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <node_id_null> value
     *
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function clearNodeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <node_id_null> value
     *
     * @return boolean
     */
    public function getNodeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function setNodeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <is_node_id> has a value
     *
     * @return boolean
     */
    public function hasIsNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_node_id> value
     *
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function clearIsNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_node_id> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getIsNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_node_id> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function setIsNodeId(\dstore\values\booleanValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasIsNodeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <is_node_id_null> value
     *
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function clearIsNodeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <is_node_id_null> value
     *
     * @return boolean
     */
    public function getIsNodeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <is_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetLevelForNode_Pu\Parameters
     */
    public function setIsNodeIdNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

