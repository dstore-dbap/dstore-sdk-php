<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetProcedureExecutionLog_Ad.proto
//   Date: 2016-05-19 08:07:45

namespace dstore\engine\mi_GetProcedureExecutionLog_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $procedure_id = null;
    
    /**  @var boolean */
    public $procedure_id_null = null;
    
    /**  @var \dstore\values\timestampValue */
    public $from_date = null;
    
    /**  @var boolean */
    public $from_date_null = null;
    
    /**  @var \dstore\values\timestampValue */
    public $to_date = null;
    
    /**  @var boolean */
    public $to_date_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $executed_by_user_id = null;
    
    /**  @var boolean */
    public $executed_by_user_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $executed_on_nesting_level_from = null;
    
    /**  @var boolean */
    public $executed_on_nesting_level_from_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $executed_on_nesting_level_to = null;
    
    /**  @var boolean */
    public $executed_on_nesting_level_to_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $host_name = null;
    
    /**  @var boolean */
    public $host_name_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $program_name = null;
    
    /**  @var boolean */
    public $program_name_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $execution_timems_from = null;
    
    /**  @var boolean */
    public $execution_timems_from_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $execution_timems_to = null;
    
    /**  @var boolean */
    public $execution_timems_to_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $return_code_from = null;
    
    /**  @var boolean */
    public $return_code_from_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $return_code_to = null;
    
    /**  @var boolean */
    public $return_code_to_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $include_logged_param_values = null;
    
    /**  @var boolean */
    public $include_logged_param_values_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetProcedureExecutionLog_Ad.Parameters');

      // OPTIONAL MESSAGE procedure_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "procedure_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "from_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_date_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "from_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "to_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_date_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "to_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE executed_by_user_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "executed_by_user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL executed_by_user_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "executed_by_user_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE executed_on_nesting_level_from = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "executed_on_nesting_level_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL executed_on_nesting_level_from_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "executed_on_nesting_level_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE executed_on_nesting_level_to = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "executed_on_nesting_level_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL executed_on_nesting_level_to_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "executed_on_nesting_level_to_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE host_name = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "host_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL host_name_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "host_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE program_name = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "program_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL program_name_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "program_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE execution_timems_from = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "execution_timems_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL execution_timems_from_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "execution_timems_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE execution_timems_to = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "execution_timems_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL execution_timems_to_null = 1010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1010;
      $f->name      = "execution_timems_to_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE return_code_from = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "return_code_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL return_code_from_null = 1011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1011;
      $f->name      = "return_code_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE return_code_to = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "return_code_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL return_code_to_null = 1012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1012;
      $f->name      = "return_code_to_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_logged_param_values = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "include_logged_param_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_logged_param_values_null = 1013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1013;
      $f->name      = "include_logged_param_values_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_id> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearProcedureId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getProcedureId(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setProcedureId(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <procedure_id_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <procedure_id_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearProcedureIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <procedure_id_null> value
     *
     * @return boolean
     */
    public function getProcedureIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <procedure_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setProcedureIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <from_date> has a value
     *
     * @return boolean
     */
    public function hasFromDate(){
      return $this->_has(2);
    }
    
    /**
     * Clear <from_date> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearFromDate(){
      return $this->_clear(2);
    }
    
    /**
     * Get <from_date> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getFromDate(){
      return $this->_get(2);
    }
    
    /**
     * Set <from_date> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setFromDate(\dstore\values\timestampValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <from_date_null> has a value
     *
     * @return boolean
     */
    public function hasFromDateNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <from_date_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearFromDateNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <from_date_null> value
     *
     * @return boolean
     */
    public function getFromDateNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <from_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setFromDateNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <to_date> has a value
     *
     * @return boolean
     */
    public function hasToDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <to_date> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearToDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <to_date> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getToDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <to_date> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setToDate(\dstore\values\timestampValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <to_date_null> has a value
     *
     * @return boolean
     */
    public function hasToDateNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <to_date_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearToDateNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <to_date_null> value
     *
     * @return boolean
     */
    public function getToDateNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <to_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setToDateNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <executed_by_user_id> has a value
     *
     * @return boolean
     */
    public function hasExecutedByUserId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <executed_by_user_id> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedByUserId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <executed_by_user_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getExecutedByUserId(){
      return $this->_get(4);
    }
    
    /**
     * Set <executed_by_user_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedByUserId(\dstore\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <executed_by_user_id_null> has a value
     *
     * @return boolean
     */
    public function hasExecutedByUserIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <executed_by_user_id_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedByUserIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <executed_by_user_id_null> value
     *
     * @return boolean
     */
    public function getExecutedByUserIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <executed_by_user_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedByUserIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <executed_on_nesting_level_from> has a value
     *
     * @return boolean
     */
    public function hasExecutedOnNestingLevelFrom(){
      return $this->_has(5);
    }
    
    /**
     * Clear <executed_on_nesting_level_from> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedOnNestingLevelFrom(){
      return $this->_clear(5);
    }
    
    /**
     * Get <executed_on_nesting_level_from> value
     *
     * @return \dstore\values\integerValue
     */
    public function getExecutedOnNestingLevelFrom(){
      return $this->_get(5);
    }
    
    /**
     * Set <executed_on_nesting_level_from> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedOnNestingLevelFrom(\dstore\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <executed_on_nesting_level_from_null> has a value
     *
     * @return boolean
     */
    public function hasExecutedOnNestingLevelFromNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <executed_on_nesting_level_from_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedOnNestingLevelFromNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <executed_on_nesting_level_from_null> value
     *
     * @return boolean
     */
    public function getExecutedOnNestingLevelFromNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <executed_on_nesting_level_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedOnNestingLevelFromNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <executed_on_nesting_level_to> has a value
     *
     * @return boolean
     */
    public function hasExecutedOnNestingLevelTo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <executed_on_nesting_level_to> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedOnNestingLevelTo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <executed_on_nesting_level_to> value
     *
     * @return \dstore\values\integerValue
     */
    public function getExecutedOnNestingLevelTo(){
      return $this->_get(6);
    }
    
    /**
     * Set <executed_on_nesting_level_to> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedOnNestingLevelTo(\dstore\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <executed_on_nesting_level_to_null> has a value
     *
     * @return boolean
     */
    public function hasExecutedOnNestingLevelToNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <executed_on_nesting_level_to_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutedOnNestingLevelToNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <executed_on_nesting_level_to_null> value
     *
     * @return boolean
     */
    public function getExecutedOnNestingLevelToNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <executed_on_nesting_level_to_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutedOnNestingLevelToNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <host_name> has a value
     *
     * @return boolean
     */
    public function hasHostName(){
      return $this->_has(7);
    }
    
    /**
     * Clear <host_name> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearHostName(){
      return $this->_clear(7);
    }
    
    /**
     * Get <host_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getHostName(){
      return $this->_get(7);
    }
    
    /**
     * Set <host_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setHostName(\dstore\values\stringValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <host_name_null> has a value
     *
     * @return boolean
     */
    public function hasHostNameNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <host_name_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearHostNameNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <host_name_null> value
     *
     * @return boolean
     */
    public function getHostNameNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <host_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setHostNameNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <program_name> has a value
     *
     * @return boolean
     */
    public function hasProgramName(){
      return $this->_has(8);
    }
    
    /**
     * Clear <program_name> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearProgramName(){
      return $this->_clear(8);
    }
    
    /**
     * Get <program_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getProgramName(){
      return $this->_get(8);
    }
    
    /**
     * Set <program_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setProgramName(\dstore\values\stringValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <program_name_null> has a value
     *
     * @return boolean
     */
    public function hasProgramNameNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <program_name_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearProgramNameNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <program_name_null> value
     *
     * @return boolean
     */
    public function getProgramNameNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <program_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setProgramNameNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <execution_timems_from> has a value
     *
     * @return boolean
     */
    public function hasExecutionTimemsFrom(){
      return $this->_has(9);
    }
    
    /**
     * Clear <execution_timems_from> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutionTimemsFrom(){
      return $this->_clear(9);
    }
    
    /**
     * Get <execution_timems_from> value
     *
     * @return \dstore\values\integerValue
     */
    public function getExecutionTimemsFrom(){
      return $this->_get(9);
    }
    
    /**
     * Set <execution_timems_from> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutionTimemsFrom(\dstore\values\integerValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <execution_timems_from_null> has a value
     *
     * @return boolean
     */
    public function hasExecutionTimemsFromNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <execution_timems_from_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutionTimemsFromNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <execution_timems_from_null> value
     *
     * @return boolean
     */
    public function getExecutionTimemsFromNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <execution_timems_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutionTimemsFromNull( $value){
      return $this->_set(1009, $value);
    }
    
    /**
     * Check if <execution_timems_to> has a value
     *
     * @return boolean
     */
    public function hasExecutionTimemsTo(){
      return $this->_has(10);
    }
    
    /**
     * Clear <execution_timems_to> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutionTimemsTo(){
      return $this->_clear(10);
    }
    
    /**
     * Get <execution_timems_to> value
     *
     * @return \dstore\values\integerValue
     */
    public function getExecutionTimemsTo(){
      return $this->_get(10);
    }
    
    /**
     * Set <execution_timems_to> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutionTimemsTo(\dstore\values\integerValue $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <execution_timems_to_null> has a value
     *
     * @return boolean
     */
    public function hasExecutionTimemsToNull(){
      return $this->_has(1010);
    }
    
    /**
     * Clear <execution_timems_to_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearExecutionTimemsToNull(){
      return $this->_clear(1010);
    }
    
    /**
     * Get <execution_timems_to_null> value
     *
     * @return boolean
     */
    public function getExecutionTimemsToNull(){
      return $this->_get(1010);
    }
    
    /**
     * Set <execution_timems_to_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setExecutionTimemsToNull( $value){
      return $this->_set(1010, $value);
    }
    
    /**
     * Check if <return_code_from> has a value
     *
     * @return boolean
     */
    public function hasReturnCodeFrom(){
      return $this->_has(11);
    }
    
    /**
     * Clear <return_code_from> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearReturnCodeFrom(){
      return $this->_clear(11);
    }
    
    /**
     * Get <return_code_from> value
     *
     * @return \dstore\values\integerValue
     */
    public function getReturnCodeFrom(){
      return $this->_get(11);
    }
    
    /**
     * Set <return_code_from> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setReturnCodeFrom(\dstore\values\integerValue $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <return_code_from_null> has a value
     *
     * @return boolean
     */
    public function hasReturnCodeFromNull(){
      return $this->_has(1011);
    }
    
    /**
     * Clear <return_code_from_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearReturnCodeFromNull(){
      return $this->_clear(1011);
    }
    
    /**
     * Get <return_code_from_null> value
     *
     * @return boolean
     */
    public function getReturnCodeFromNull(){
      return $this->_get(1011);
    }
    
    /**
     * Set <return_code_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setReturnCodeFromNull( $value){
      return $this->_set(1011, $value);
    }
    
    /**
     * Check if <return_code_to> has a value
     *
     * @return boolean
     */
    public function hasReturnCodeTo(){
      return $this->_has(12);
    }
    
    /**
     * Clear <return_code_to> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearReturnCodeTo(){
      return $this->_clear(12);
    }
    
    /**
     * Get <return_code_to> value
     *
     * @return \dstore\values\integerValue
     */
    public function getReturnCodeTo(){
      return $this->_get(12);
    }
    
    /**
     * Set <return_code_to> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setReturnCodeTo(\dstore\values\integerValue $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <return_code_to_null> has a value
     *
     * @return boolean
     */
    public function hasReturnCodeToNull(){
      return $this->_has(1012);
    }
    
    /**
     * Clear <return_code_to_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearReturnCodeToNull(){
      return $this->_clear(1012);
    }
    
    /**
     * Get <return_code_to_null> value
     *
     * @return boolean
     */
    public function getReturnCodeToNull(){
      return $this->_get(1012);
    }
    
    /**
     * Set <return_code_to_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setReturnCodeToNull( $value){
      return $this->_set(1012, $value);
    }
    
    /**
     * Check if <include_logged_param_values> has a value
     *
     * @return boolean
     */
    public function hasIncludeLoggedParamValues(){
      return $this->_has(13);
    }
    
    /**
     * Clear <include_logged_param_values> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearIncludeLoggedParamValues(){
      return $this->_clear(13);
    }
    
    /**
     * Get <include_logged_param_values> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getIncludeLoggedParamValues(){
      return $this->_get(13);
    }
    
    /**
     * Set <include_logged_param_values> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setIncludeLoggedParamValues(\dstore\values\booleanValue $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <include_logged_param_values_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeLoggedParamValuesNull(){
      return $this->_has(1013);
    }
    
    /**
     * Clear <include_logged_param_values_null> value
     *
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function clearIncludeLoggedParamValuesNull(){
      return $this->_clear(1013);
    }
    
    /**
     * Get <include_logged_param_values_null> value
     *
     * @return boolean
     */
    public function getIncludeLoggedParamValuesNull(){
      return $this->_get(1013);
    }
    
    /**
     * Set <include_logged_param_values_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureExecutionLog_Ad\Parameters
     */
    public function setIncludeLoggedParamValuesNull( $value){
      return $this->_set(1013, $value);
    }
  }
}

