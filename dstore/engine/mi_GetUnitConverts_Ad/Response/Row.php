<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetUnitConverts_Ad.proto
//   Date: 2016-05-19 08:07:46

namespace dstore\engine\mi_GetUnitConverts_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\decimalValue */
    public $convert_factor = null;
    
    /**  @var \dstore\values\stringValue */
    public $from_date_and_time = null;
    
    /**  @var \dstore\values\integerValue */
    public $from_unit_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $to_unit_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $from_unit_symbol = null;
    
    /**  @var \dstore\values\stringValue */
    public $to_unit_symbol = null;
    
    /**  @var \dstore\values\stringValue */
    public $to_date_and_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetUnitConverts_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE convert_factor = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "convert_factor";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date_and_time = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "from_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_unit_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "from_unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_unit_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "to_unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_unit_symbol = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "from_unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_unit_symbol = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "to_unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date_and_time = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "to_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <convert_factor> has a value
     *
     * @return boolean
     */
    public function hasConvertFactor(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <convert_factor> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearConvertFactor(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <convert_factor> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getConvertFactor(){
      return $this->_get(10001);
    }
    
    /**
     * Set <convert_factor> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setConvertFactor(\dstore\values\decimalValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <from_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasFromDateAndTime(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <from_date_and_time> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearFromDateAndTime(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <from_date_and_time> value
     *
     * @return \dstore\values\stringValue
     */
    public function getFromDateAndTime(){
      return $this->_get(10002);
    }
    
    /**
     * Set <from_date_and_time> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setFromDateAndTime(\dstore\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <from_unit_id> has a value
     *
     * @return boolean
     */
    public function hasFromUnitId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <from_unit_id> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearFromUnitId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <from_unit_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getFromUnitId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <from_unit_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setFromUnitId(\dstore\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <to_unit_id> has a value
     *
     * @return boolean
     */
    public function hasToUnitId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <to_unit_id> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearToUnitId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <to_unit_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getToUnitId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <to_unit_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setToUnitId(\dstore\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <from_unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasFromUnitSymbol(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <from_unit_symbol> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearFromUnitSymbol(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <from_unit_symbol> value
     *
     * @return \dstore\values\stringValue
     */
    public function getFromUnitSymbol(){
      return $this->_get(10005);
    }
    
    /**
     * Set <from_unit_symbol> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setFromUnitSymbol(\dstore\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <to_unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasToUnitSymbol(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <to_unit_symbol> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearToUnitSymbol(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <to_unit_symbol> value
     *
     * @return \dstore\values\stringValue
     */
    public function getToUnitSymbol(){
      return $this->_get(10006);
    }
    
    /**
     * Set <to_unit_symbol> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setToUnitSymbol(\dstore\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <to_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasToDateAndTime(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <to_date_and_time> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function clearToDateAndTime(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <to_date_and_time> value
     *
     * @return \dstore\values\stringValue
     */
    public function getToDateAndTime(){
      return $this->_get(10007);
    }
    
    /**
     * Set <to_date_and_time> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Response\Row
     */
    public function setToDateAndTime(\dstore\values\stringValue $value){
      return $this->_set(10007, $value);
    }
  }
}

