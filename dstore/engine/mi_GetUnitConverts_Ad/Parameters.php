<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetUnitConverts_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetUnitConverts_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $from_unit_id = null;
    
    /**  @var boolean */
    public $from_unit_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $to_unit_id = null;
    
    /**  @var boolean */
    public $to_unit_id_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $from_date = null;
    
    /**  @var boolean */
    public $from_date_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $to_date = null;
    
    /**  @var boolean */
    public $to_date_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetUnitConverts_Ad.Parameters');

      // OPTIONAL MESSAGE from_unit_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from_unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_unit_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "from_unit_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_unit_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to_unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_unit_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "to_unit_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "from_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_date_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "from_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "to_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_date_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "to_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from_unit_id> has a value
     *
     * @return boolean
     */
    public function hasFromUnitId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from_unit_id> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearFromUnitId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from_unit_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromUnitId(){
      return $this->_get(1);
    }
    
    /**
     * Set <from_unit_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setFromUnitId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from_unit_id_null> has a value
     *
     * @return boolean
     */
    public function hasFromUnitIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <from_unit_id_null> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearFromUnitIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <from_unit_id_null> value
     *
     * @return boolean
     */
    public function getFromUnitIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <from_unit_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setFromUnitIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <to_unit_id> has a value
     *
     * @return boolean
     */
    public function hasToUnitId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to_unit_id> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearToUnitId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to_unit_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getToUnitId(){
      return $this->_get(2);
    }
    
    /**
     * Set <to_unit_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setToUnitId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <to_unit_id_null> has a value
     *
     * @return boolean
     */
    public function hasToUnitIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <to_unit_id_null> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearToUnitIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <to_unit_id_null> value
     *
     * @return boolean
     */
    public function getToUnitIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <to_unit_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setToUnitIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <from_date> has a value
     *
     * @return boolean
     */
    public function hasFromDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <from_date> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearFromDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <from_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getFromDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <from_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setFromDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <from_date_null> has a value
     *
     * @return boolean
     */
    public function hasFromDateNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <from_date_null> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearFromDateNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <from_date_null> value
     *
     * @return boolean
     */
    public function getFromDateNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <from_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setFromDateNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <to_date> has a value
     *
     * @return boolean
     */
    public function hasToDate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <to_date> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearToDate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <to_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getToDate(){
      return $this->_get(4);
    }
    
    /**
     * Set <to_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setToDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <to_date_null> has a value
     *
     * @return boolean
     */
    public function hasToDateNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <to_date_null> value
     *
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function clearToDateNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <to_date_null> value
     *
     * @return boolean
     */
    public function getToDateNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <to_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUnitConverts_Ad\Parameters
     */
    public function setToDateNull( $value){
      return $this->_set(1004, $value);
    }
  }
}

