<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetCurrentDate.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetCurrentDate {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $date_and_time_format = null;
    
    /**  @var boolean */
    public $date_and_time_format_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $include_time = null;
    
    /**  @var boolean */
    public $include_time_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetCurrentDate.Parameters');

      // OPTIONAL MESSAGE date_and_time_format = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "date_and_time_format";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL date_and_time_format_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "date_and_time_format_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "include_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_time_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "include_time_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <date_and_time_format> has a value
     *
     * @return boolean
     */
    public function hasDateAndTimeFormat(){
      return $this->_has(1);
    }
    
    /**
     * Clear <date_and_time_format> value
     *
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function clearDateAndTimeFormat(){
      return $this->_clear(1);
    }
    
    /**
     * Get <date_and_time_format> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDateAndTimeFormat(){
      return $this->_get(1);
    }
    
    /**
     * Set <date_and_time_format> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function setDateAndTimeFormat(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <date_and_time_format_null> has a value
     *
     * @return boolean
     */
    public function hasDateAndTimeFormatNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <date_and_time_format_null> value
     *
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function clearDateAndTimeFormatNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <date_and_time_format_null> value
     *
     * @return boolean
     */
    public function getDateAndTimeFormatNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <date_and_time_format_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function setDateAndTimeFormatNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <include_time> has a value
     *
     * @return boolean
     */
    public function hasIncludeTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <include_time> value
     *
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function clearIncludeTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <include_time> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getIncludeTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <include_time> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function setIncludeTime(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <include_time_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeTimeNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <include_time_null> value
     *
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function clearIncludeTimeNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <include_time_null> value
     *
     * @return boolean
     */
    public function getIncludeTimeNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <include_time_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetCurrentDate\Parameters
     */
    public function setIncludeTimeNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

