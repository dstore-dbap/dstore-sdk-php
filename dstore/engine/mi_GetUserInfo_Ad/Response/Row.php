<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetUserInfo_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetUserInfo_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $user_name = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $user_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $group_name = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $group_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $user_group_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $sort_no = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetUserInfo_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_name = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE group_name = 20001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20001;
      $f->name      = "group_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE group_description = 20002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20002;
      $f->name      = "group_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_group_id = 20005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20005;
      $f->name      = "user_group_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no = 20006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20006;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearUserName(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUserName(){
      return $this->_get(10001);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setUserName(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <user_id> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <user_id> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearUserId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUserId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <group_name> has a value
     *
     * @return boolean
     */
    public function hasGroupName(){
      return $this->_has(20001);
    }
    
    /**
     * Clear <group_name> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearGroupName(){
      return $this->_clear(20001);
    }
    
    /**
     * Get <group_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getGroupName(){
      return $this->_get(20001);
    }
    
    /**
     * Set <group_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setGroupName(\dstore\engine\values\stringValue $value){
      return $this->_set(20001, $value);
    }
    
    /**
     * Check if <group_description> has a value
     *
     * @return boolean
     */
    public function hasGroupDescription(){
      return $this->_has(20002);
    }
    
    /**
     * Clear <group_description> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearGroupDescription(){
      return $this->_clear(20002);
    }
    
    /**
     * Get <group_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getGroupDescription(){
      return $this->_get(20002);
    }
    
    /**
     * Set <group_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setGroupDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(20002, $value);
    }
    
    /**
     * Check if <user_group_id> has a value
     *
     * @return boolean
     */
    public function hasUserGroupId(){
      return $this->_has(20005);
    }
    
    /**
     * Clear <user_group_id> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearUserGroupId(){
      return $this->_clear(20005);
    }
    
    /**
     * Get <user_group_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUserGroupId(){
      return $this->_get(20005);
    }
    
    /**
     * Set <user_group_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setUserGroupId(\dstore\engine\values\integerValue $value){
      return $this->_set(20005, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(20006);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function clearSortNo(){
      return $this->_clear(20006);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSortNo(){
      return $this->_get(20006);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUserInfo_Ad\Response\Row
     */
    public function setSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(20006, $value);
    }
  }
}

