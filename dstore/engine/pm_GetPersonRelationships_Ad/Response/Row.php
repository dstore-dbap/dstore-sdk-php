<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/pm_GetPersonRelationships_Ad.proto
//   Date: 2015-10-06 11:20:06

namespace dstore\engine\pm_GetPersonRelationships_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $related_person_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $relationship_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_type_id_of_related_person = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $valid_to = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $valid_to_char = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $valid_from = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $sort_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $access_level = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $valid_from_char = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.pm_GetPersonRelationships_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE related_person_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "related_person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE relationship_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "relationship_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_type_id_of_related_person = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "person_type_id_of_related_person";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "valid_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to_char = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "valid_to_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "valid_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE access_level = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "access_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from_char = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "valid_from_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <related_person_id> has a value
     *
     * @return boolean
     */
    public function hasRelatedPersonId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <related_person_id> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearRelatedPersonId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <related_person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRelatedPersonId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <related_person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setRelatedPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearPersonId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <relationship_id> has a value
     *
     * @return boolean
     */
    public function hasRelationshipId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <relationship_id> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearRelationshipId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <relationship_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRelationshipId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <relationship_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setRelationshipId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <person_type_id_of_related_person> has a value
     *
     * @return boolean
     */
    public function hasPersonTypeIdOfRelatedPerson(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <person_type_id_of_related_person> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearPersonTypeIdOfRelatedPerson(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <person_type_id_of_related_person> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonTypeIdOfRelatedPerson(){
      return $this->_get(10004);
    }
    
    /**
     * Set <person_type_id_of_related_person> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setPersonTypeIdOfRelatedPerson(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <valid_to> has a value
     *
     * @return boolean
     */
    public function hasValidTo(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <valid_to> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearValidTo(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <valid_to> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getValidTo(){
      return $this->_get(10005);
    }
    
    /**
     * Set <valid_to> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setValidTo(\dstore\engine\values\timestampValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <valid_to_char> has a value
     *
     * @return boolean
     */
    public function hasValidToChar(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <valid_to_char> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearValidToChar(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <valid_to_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValidToChar(){
      return $this->_get(10006);
    }
    
    /**
     * Set <valid_to_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setValidToChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <valid_from> has a value
     *
     * @return boolean
     */
    public function hasValidFrom(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <valid_from> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearValidFrom(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <valid_from> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getValidFrom(){
      return $this->_get(10007);
    }
    
    /**
     * Set <valid_from> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setValidFrom(\dstore\engine\values\timestampValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearSortNo(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSortNo(){
      return $this->_get(10008);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <access_level> has a value
     *
     * @return boolean
     */
    public function hasAccessLevel(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <access_level> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearAccessLevel(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <access_level> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getAccessLevel(){
      return $this->_get(10009);
    }
    
    /**
     * Set <access_level> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setAccessLevel(\dstore\engine\values\integerValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <valid_from_char> has a value
     *
     * @return boolean
     */
    public function hasValidFromChar(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <valid_from_char> value
     *
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function clearValidFromChar(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <valid_from_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValidFromChar(){
      return $this->_get(10010);
    }
    
    /**
     * Set <valid_from_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_GetPersonRelationships_Ad\Response\Row
     */
    public function setValidFromChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10010, $value);
    }
  }
}

