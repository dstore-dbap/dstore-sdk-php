<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_ModifyBundleItemSets_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\om_ModifyBundleItemSets_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $item_condition_id = null;
    
    /**  @var boolean */
    public $item_condition_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $quantity = null;
    
    /**  @var boolean */
    public $quantity_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $distinct_items_only = null;
    
    /**  @var boolean */
    public $distinct_items_only_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $delete_set = null;
    
    /**  @var boolean */
    public $delete_set_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_ModifyBundleItemSets_Ad.Parameters');

      // OPTIONAL MESSAGE item_condition_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "item_condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL item_condition_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "item_condition_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quantity = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL quantity_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "quantity_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE distinct_items_only = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "distinct_items_only";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL distinct_items_only_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "distinct_items_only_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_set = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "delete_set";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_set_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "delete_set_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <item_condition_id> has a value
     *
     * @return boolean
     */
    public function hasItemConditionId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <item_condition_id> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearItemConditionId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <item_condition_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemConditionId(){
      return $this->_get(1);
    }
    
    /**
     * Set <item_condition_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setItemConditionId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <item_condition_id_null> has a value
     *
     * @return boolean
     */
    public function hasItemConditionIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <item_condition_id_null> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearItemConditionIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <item_condition_id_null> value
     *
     * @return boolean
     */
    public function getItemConditionIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <item_condition_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setItemConditionIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <quantity> has a value
     *
     * @return boolean
     */
    public function hasQuantity(){
      return $this->_has(2);
    }
    
    /**
     * Clear <quantity> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearQuantity(){
      return $this->_clear(2);
    }
    
    /**
     * Get <quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getQuantity(){
      return $this->_get(2);
    }
    
    /**
     * Set <quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <quantity_null> has a value
     *
     * @return boolean
     */
    public function hasQuantityNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <quantity_null> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearQuantityNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <quantity_null> value
     *
     * @return boolean
     */
    public function getQuantityNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <quantity_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setQuantityNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <distinct_items_only> has a value
     *
     * @return boolean
     */
    public function hasDistinctItemsOnly(){
      return $this->_has(3);
    }
    
    /**
     * Clear <distinct_items_only> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearDistinctItemsOnly(){
      return $this->_clear(3);
    }
    
    /**
     * Get <distinct_items_only> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDistinctItemsOnly(){
      return $this->_get(3);
    }
    
    /**
     * Set <distinct_items_only> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setDistinctItemsOnly(\dstore\engine\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <distinct_items_only_null> has a value
     *
     * @return boolean
     */
    public function hasDistinctItemsOnlyNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <distinct_items_only_null> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearDistinctItemsOnlyNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <distinct_items_only_null> value
     *
     * @return boolean
     */
    public function getDistinctItemsOnlyNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <distinct_items_only_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setDistinctItemsOnlyNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <delete_set> has a value
     *
     * @return boolean
     */
    public function hasDeleteSet(){
      return $this->_has(4);
    }
    
    /**
     * Clear <delete_set> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearDeleteSet(){
      return $this->_clear(4);
    }
    
    /**
     * Get <delete_set> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDeleteSet(){
      return $this->_get(4);
    }
    
    /**
     * Set <delete_set> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setDeleteSet(\dstore\engine\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <delete_set_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteSetNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <delete_set_null> value
     *
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function clearDeleteSetNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <delete_set_null> value
     *
     * @return boolean
     */
    public function getDeleteSetNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <delete_set_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyBundleItemSets_Ad\Parameters
     */
    public function setDeleteSetNull( $value){
      return $this->_set(1004, $value);
    }
  }
}

