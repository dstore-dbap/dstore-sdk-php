<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetOrderStateHistory_Pu.proto
//   Date: 2015-10-06 11:19:58

namespace dstore\engine\om_GetOrderStateHistory_Pu\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $changing_date_and_time = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $to_order_state_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $user_name = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $to_order_state_id__public_descr = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $to_order_state = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_content_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $from_order_state__public_desc = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $from_order_state = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $user_id = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $complete_order = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_order_state_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $changing_date_and_time_char = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetOrderStateHistory_Pu.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE changing_date_and_time = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "changing_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_order_state_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "to_order_state_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_name = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_order_state_id__public_descr = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "to_order_state_id__public_descr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_order_state = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "to_order_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "order_content_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_order_state__public_desc = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "from_order_state__public_desc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_order_state = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "from_order_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_id = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE complete_order = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "complete_order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_order_state_id = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "from_order_state_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE changing_date_and_time_char = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "changing_date_and_time_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <changing_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasChangingDateAndTime(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <changing_date_and_time> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearChangingDateAndTime(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <changing_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getChangingDateAndTime(){
      return $this->_get(10001);
    }
    
    /**
     * Set <changing_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setChangingDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <to_order_state_id> has a value
     *
     * @return boolean
     */
    public function hasToOrderStateId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <to_order_state_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearToOrderStateId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <to_order_state_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getToOrderStateId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <to_order_state_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setToOrderStateId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearUserName(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUserName(){
      return $this->_get(10003);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setUserName(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <to_order_state_id__public_descr> has a value
     *
     * @return boolean
     */
    public function hasToOrderStateId_PublicDescr(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <to_order_state_id__public_descr> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearToOrderStateId_PublicDescr(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <to_order_state_id__public_descr> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getToOrderStateId_PublicDescr(){
      return $this->_get(10004);
    }
    
    /**
     * Set <to_order_state_id__public_descr> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setToOrderStateId_PublicDescr(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <order_id> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <order_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearOrderId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <order_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <order_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setOrderId(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <to_order_state> has a value
     *
     * @return boolean
     */
    public function hasToOrderState(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <to_order_state> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearToOrderState(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <to_order_state> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getToOrderState(){
      return $this->_get(10006);
    }
    
    /**
     * Set <to_order_state> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setToOrderState(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <order_content_id> has a value
     *
     * @return boolean
     */
    public function hasOrderContentId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <order_content_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearOrderContentId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <order_content_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderContentId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <order_content_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setOrderContentId(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <from_order_state__public_desc> has a value
     *
     * @return boolean
     */
    public function hasFromOrderState_PublicDesc(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <from_order_state__public_desc> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearFromOrderState_PublicDesc(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <from_order_state__public_desc> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getFromOrderState_PublicDesc(){
      return $this->_get(10008);
    }
    
    /**
     * Set <from_order_state__public_desc> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setFromOrderState_PublicDesc(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <from_order_state> has a value
     *
     * @return boolean
     */
    public function hasFromOrderState(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <from_order_state> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearFromOrderState(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <from_order_state> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getFromOrderState(){
      return $this->_get(10009);
    }
    
    /**
     * Set <from_order_state> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setFromOrderState(\dstore\engine\values\stringValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <user_id> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <user_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearUserId(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUserId(){
      return $this->_get(10010);
    }
    
    /**
     * Set <user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <complete_order> has a value
     *
     * @return boolean
     */
    public function hasCompleteOrder(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <complete_order> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearCompleteOrder(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <complete_order> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCompleteOrder(){
      return $this->_get(10011);
    }
    
    /**
     * Set <complete_order> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setCompleteOrder(\dstore\engine\values\booleanValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <from_order_state_id> has a value
     *
     * @return boolean
     */
    public function hasFromOrderStateId(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <from_order_state_id> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearFromOrderStateId(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <from_order_state_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromOrderStateId(){
      return $this->_get(10012);
    }
    
    /**
     * Set <from_order_state_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setFromOrderStateId(\dstore\engine\values\integerValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <changing_date_and_time_char> has a value
     *
     * @return boolean
     */
    public function hasChangingDateAndTimeChar(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <changing_date_and_time_char> value
     *
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function clearChangingDateAndTimeChar(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <changing_date_and_time_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getChangingDateAndTimeChar(){
      return $this->_get(10013);
    }
    
    /**
     * Set <changing_date_and_time_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrderStateHistory_Pu\Response\Row
     */
    public function setChangingDateAndTimeChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10013, $value);
    }
  }
}

