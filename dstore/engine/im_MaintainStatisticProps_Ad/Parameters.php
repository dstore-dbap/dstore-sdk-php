<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_MaintainStatisticProps_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\im_MaintainStatisticProps_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var boolean */
    public $node_characteristic_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $level_id = null;
    
    /**  @var boolean */
    public $level_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_days = null;
    
    /**  @var boolean */
    public $number_of_days_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $domain_tree_node_id = null;
    
    /**  @var boolean */
    public $domain_tree_node_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $basic_characteristic_no = null;
    
    /**  @var boolean */
    public $basic_characteristic_no_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $max_nodes_to_process = null;
    
    /**  @var boolean */
    public $max_nodes_to_process_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_MaintainStatisticProps_Ad.Parameters');

      // OPTIONAL MESSAGE node_characteristic_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_characteristic_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "node_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "level_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL level_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "level_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_days = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "number_of_days";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL number_of_days_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "number_of_days_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE domain_tree_node_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "domain_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL domain_tree_node_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "domain_tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE basic_characteristic_no = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "basic_characteristic_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL basic_characteristic_no_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "basic_characteristic_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_nodes_to_process = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "max_nodes_to_process";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL max_nodes_to_process_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "max_nodes_to_process_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setNodeCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <node_characteristic_id_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearNodeCharacteristicIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <node_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getNodeCharacteristicIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <node_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setNodeCharacteristicIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <level_id> has a value
     *
     * @return boolean
     */
    public function hasLevelId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <level_id> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearLevelId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <level_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLevelId(){
      return $this->_get(2);
    }
    
    /**
     * Set <level_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setLevelId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <level_id_null> has a value
     *
     * @return boolean
     */
    public function hasLevelIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <level_id_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearLevelIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <level_id_null> value
     *
     * @return boolean
     */
    public function getLevelIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <level_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setLevelIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <number_of_days> has a value
     *
     * @return boolean
     */
    public function hasNumberOfDays(){
      return $this->_has(3);
    }
    
    /**
     * Clear <number_of_days> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearNumberOfDays(){
      return $this->_clear(3);
    }
    
    /**
     * Get <number_of_days> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfDays(){
      return $this->_get(3);
    }
    
    /**
     * Set <number_of_days> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setNumberOfDays(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <number_of_days_null> has a value
     *
     * @return boolean
     */
    public function hasNumberOfDaysNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <number_of_days_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearNumberOfDaysNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <number_of_days_null> value
     *
     * @return boolean
     */
    public function getNumberOfDaysNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <number_of_days_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setNumberOfDaysNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <domain_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <domain_tree_node_id> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearDomainTreeNodeId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <domain_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDomainTreeNodeId(){
      return $this->_get(4);
    }
    
    /**
     * Set <domain_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setDomainTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <domain_tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <domain_tree_node_id_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearDomainTreeNodeIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <domain_tree_node_id_null> value
     *
     * @return boolean
     */
    public function getDomainTreeNodeIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <domain_tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setDomainTreeNodeIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <basic_characteristic_no> has a value
     *
     * @return boolean
     */
    public function hasBasicCharacteristicNo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <basic_characteristic_no> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearBasicCharacteristicNo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <basic_characteristic_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getBasicCharacteristicNo(){
      return $this->_get(5);
    }
    
    /**
     * Set <basic_characteristic_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setBasicCharacteristicNo(\dstore\engine\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <basic_characteristic_no_null> has a value
     *
     * @return boolean
     */
    public function hasBasicCharacteristicNoNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <basic_characteristic_no_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearBasicCharacteristicNoNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <basic_characteristic_no_null> value
     *
     * @return boolean
     */
    public function getBasicCharacteristicNoNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <basic_characteristic_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setBasicCharacteristicNoNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <max_nodes_to_process> has a value
     *
     * @return boolean
     */
    public function hasMaxNodesToProcess(){
      return $this->_has(6);
    }
    
    /**
     * Clear <max_nodes_to_process> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearMaxNodesToProcess(){
      return $this->_clear(6);
    }
    
    /**
     * Get <max_nodes_to_process> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMaxNodesToProcess(){
      return $this->_get(6);
    }
    
    /**
     * Set <max_nodes_to_process> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setMaxNodesToProcess(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <max_nodes_to_process_null> has a value
     *
     * @return boolean
     */
    public function hasMaxNodesToProcessNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <max_nodes_to_process_null> value
     *
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function clearMaxNodesToProcessNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <max_nodes_to_process_null> value
     *
     * @return boolean
     */
    public function getMaxNodesToProcessNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <max_nodes_to_process_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_MaintainStatisticProps_Ad\Parameters
     */
    public function setMaxNodesToProcessNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

