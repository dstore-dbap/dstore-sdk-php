<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetTemplates_Pu.proto
//   Date: 2016-05-19 08:07:43

namespace dstore\engine\im_GetTemplates_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\stringValue */
    public $parameter = null;
    
    /**  @var boolean */
    public $parameter_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $type = null;
    
    /**  @var boolean */
    public $type_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $language_id = null;
    
    /**  @var boolean */
    public $language_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $source_template_id = null;
    
    /**  @var boolean */
    public $source_template_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $frame_name = null;
    
    /**  @var boolean */
    public $frame_name_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetTemplates_Pu.Parameters');

      // OPTIONAL MESSAGE parameter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "parameter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL parameter_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "parameter_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE type = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL type_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "type_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL language_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "language_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE source_template_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_template_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL source_template_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "source_template_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE frame_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "frame_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL frame_name_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "frame_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <parameter> has a value
     *
     * @return boolean
     */
    public function hasParameter(){
      return $this->_has(1);
    }
    
    /**
     * Clear <parameter> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearParameter(){
      return $this->_clear(1);
    }
    
    /**
     * Get <parameter> value
     *
     * @return \dstore\values\stringValue
     */
    public function getParameter(){
      return $this->_get(1);
    }
    
    /**
     * Set <parameter> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setParameter(\dstore\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameter_null> has a value
     *
     * @return boolean
     */
    public function hasParameterNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <parameter_null> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearParameterNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <parameter_null> value
     *
     * @return boolean
     */
    public function getParameterNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <parameter_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setParameterNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearType(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type> value
     *
     * @return \dstore\values\stringValue
     */
    public function getType(){
      return $this->_get(2);
    }
    
    /**
     * Set <type> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setType(\dstore\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <type_null> has a value
     *
     * @return boolean
     */
    public function hasTypeNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <type_null> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearTypeNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <type_null> value
     *
     * @return boolean
     */
    public function getTypeNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <type_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setTypeNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearLanguageId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(3);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setLanguageId(\dstore\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <language_id_null> has a value
     *
     * @return boolean
     */
    public function hasLanguageIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <language_id_null> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearLanguageIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <language_id_null> value
     *
     * @return boolean
     */
    public function getLanguageIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <language_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setLanguageIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <source_template_id> has a value
     *
     * @return boolean
     */
    public function hasSourceTemplateId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_template_id> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearSourceTemplateId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_template_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSourceTemplateId(){
      return $this->_get(4);
    }
    
    /**
     * Set <source_template_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setSourceTemplateId(\dstore\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <source_template_id_null> has a value
     *
     * @return boolean
     */
    public function hasSourceTemplateIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <source_template_id_null> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearSourceTemplateIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <source_template_id_null> value
     *
     * @return boolean
     */
    public function getSourceTemplateIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <source_template_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setSourceTemplateIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <frame_name> has a value
     *
     * @return boolean
     */
    public function hasFrameName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <frame_name> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearFrameName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <frame_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getFrameName(){
      return $this->_get(5);
    }
    
    /**
     * Set <frame_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setFrameName(\dstore\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <frame_name_null> has a value
     *
     * @return boolean
     */
    public function hasFrameNameNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <frame_name_null> value
     *
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function clearFrameNameNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <frame_name_null> value
     *
     * @return boolean
     */
    public function getFrameNameNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <frame_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetTemplates_Pu\Parameters
     */
    public function setFrameNameNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

