<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GenerateVariants_Ad.proto
//   Date: 2015-10-06 11:19:46

namespace dstore\engine\im_GenerateVariants_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $how_many_variant_characteristics = null;
    
    /**  @var boolean */
    public $how_many_variant_characteristics_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $predecessor = null;
    
    /**  @var boolean */
    public $predecessor_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $delimiter = null;
    
    /**  @var boolean */
    public $delimiter_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GenerateVariants_Ad.Parameters');

      // OPTIONAL MESSAGE how_many_variant_characteristics = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "how_many_variant_characteristics";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL how_many_variant_characteristics_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "how_many_variant_characteristics_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predecessor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "predecessor";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL predecessor_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "predecessor_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delimiter = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "delimiter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delimiter_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "delimiter_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <how_many_variant_characteristics> has a value
     *
     * @return boolean
     */
    public function hasHowManyVariantCharacteristics(){
      return $this->_has(1);
    }
    
    /**
     * Clear <how_many_variant_characteristics> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearHowManyVariantCharacteristics(){
      return $this->_clear(1);
    }
    
    /**
     * Get <how_many_variant_characteristics> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getHowManyVariantCharacteristics(){
      return $this->_get(1);
    }
    
    /**
     * Set <how_many_variant_characteristics> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setHowManyVariantCharacteristics(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <how_many_variant_characteristics_null> has a value
     *
     * @return boolean
     */
    public function hasHowManyVariantCharacteristicsNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <how_many_variant_characteristics_null> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearHowManyVariantCharacteristicsNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <how_many_variant_characteristics_null> value
     *
     * @return boolean
     */
    public function getHowManyVariantCharacteristicsNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <how_many_variant_characteristics_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setHowManyVariantCharacteristicsNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <predecessor> has a value
     *
     * @return boolean
     */
    public function hasPredecessor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <predecessor> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearPredecessor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <predecessor> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPredecessor(){
      return $this->_get(2);
    }
    
    /**
     * Set <predecessor> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setPredecessor(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <predecessor_null> has a value
     *
     * @return boolean
     */
    public function hasPredecessorNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <predecessor_null> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearPredecessorNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <predecessor_null> value
     *
     * @return boolean
     */
    public function getPredecessorNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <predecessor_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setPredecessorNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <delimiter> has a value
     *
     * @return boolean
     */
    public function hasDelimiter(){
      return $this->_has(3);
    }
    
    /**
     * Clear <delimiter> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearDelimiter(){
      return $this->_clear(3);
    }
    
    /**
     * Get <delimiter> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDelimiter(){
      return $this->_get(3);
    }
    
    /**
     * Set <delimiter> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setDelimiter(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <delimiter_null> has a value
     *
     * @return boolean
     */
    public function hasDelimiterNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <delimiter_null> value
     *
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function clearDelimiterNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <delimiter_null> value
     *
     * @return boolean
     */
    public function getDelimiterNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <delimiter_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GenerateVariants_Ad\Parameters
     */
    public function setDelimiterNull( $value){
      return $this->_set(1003, $value);
    }
  }
}

