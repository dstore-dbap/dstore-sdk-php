<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetVisitorInformation_Pu.proto
//   Date: 2015-10-06 11:19:53

namespace dstore\engine\mi_GetVisitorInformation_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $unique_id = null;
    
    /**  @var boolean */
    public $unique_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $information_type_id = null;
    
    /**  @var boolean */
    public $information_type_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $start_at_row_no = null;
    
    /**  @var boolean */
    public $start_at_row_no_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_rows = null;
    
    /**  @var boolean */
    public $number_of_rows_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $sort_desc = null;
    
    /**  @var boolean */
    public $sort_desc_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $sort_by_information_type_id = null;
    
    /**  @var boolean */
    public $sort_by_information_type_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetVisitorInformation_Pu.Parameters');

      // OPTIONAL MESSAGE unique_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "unique_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unique_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "unique_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE information_type_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "information_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL information_type_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "information_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE start_at_row_no = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "start_at_row_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL start_at_row_no_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "start_at_row_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_rows = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "number_of_rows";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL number_of_rows_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "number_of_rows_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_desc = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sort_desc";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL sort_desc_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "sort_desc_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_by_information_type_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "sort_by_information_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL sort_by_information_type_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "sort_by_information_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <unique_id> has a value
     *
     * @return boolean
     */
    public function hasUniqueId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <unique_id> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearUniqueId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <unique_id> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUniqueId(){
      return $this->_get(1);
    }
    
    /**
     * Set <unique_id> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setUniqueId(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <unique_id_null> has a value
     *
     * @return boolean
     */
    public function hasUniqueIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <unique_id_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearUniqueIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <unique_id_null> value
     *
     * @return boolean
     */
    public function getUniqueIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <unique_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setUniqueIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <information_type_id> has a value
     *
     * @return boolean
     */
    public function hasInformationTypeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <information_type_id> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearInformationTypeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <information_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInformationTypeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <information_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setInformationTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <information_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasInformationTypeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <information_type_id_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearInformationTypeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <information_type_id_null> value
     *
     * @return boolean
     */
    public function getInformationTypeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <information_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setInformationTypeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <start_at_row_no> has a value
     *
     * @return boolean
     */
    public function hasStartAtRowNo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <start_at_row_no> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearStartAtRowNo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <start_at_row_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getStartAtRowNo(){
      return $this->_get(3);
    }
    
    /**
     * Set <start_at_row_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setStartAtRowNo(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <start_at_row_no_null> has a value
     *
     * @return boolean
     */
    public function hasStartAtRowNoNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <start_at_row_no_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearStartAtRowNoNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <start_at_row_no_null> value
     *
     * @return boolean
     */
    public function getStartAtRowNoNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <start_at_row_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setStartAtRowNoNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <number_of_rows> has a value
     *
     * @return boolean
     */
    public function hasNumberOfRows(){
      return $this->_has(4);
    }
    
    /**
     * Clear <number_of_rows> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearNumberOfRows(){
      return $this->_clear(4);
    }
    
    /**
     * Get <number_of_rows> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfRows(){
      return $this->_get(4);
    }
    
    /**
     * Set <number_of_rows> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setNumberOfRows(\dstore\engine\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <number_of_rows_null> has a value
     *
     * @return boolean
     */
    public function hasNumberOfRowsNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <number_of_rows_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearNumberOfRowsNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <number_of_rows_null> value
     *
     * @return boolean
     */
    public function getNumberOfRowsNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <number_of_rows_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setNumberOfRowsNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <sort_desc> has a value
     *
     * @return boolean
     */
    public function hasSortDesc(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sort_desc> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearSortDesc(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sort_desc> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getSortDesc(){
      return $this->_get(5);
    }
    
    /**
     * Set <sort_desc> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setSortDesc(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <sort_desc_null> has a value
     *
     * @return boolean
     */
    public function hasSortDescNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <sort_desc_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearSortDescNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <sort_desc_null> value
     *
     * @return boolean
     */
    public function getSortDescNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <sort_desc_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setSortDescNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <sort_by_information_type_id> has a value
     *
     * @return boolean
     */
    public function hasSortByInformationTypeId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <sort_by_information_type_id> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearSortByInformationTypeId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <sort_by_information_type_id> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getSortByInformationTypeId(){
      return $this->_get(6);
    }
    
    /**
     * Set <sort_by_information_type_id> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setSortByInformationTypeId(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sort_by_information_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasSortByInformationTypeIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <sort_by_information_type_id_null> value
     *
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function clearSortByInformationTypeIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <sort_by_information_type_id_null> value
     *
     * @return boolean
     */
    public function getSortByInformationTypeIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <sort_by_information_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetVisitorInformation_Pu\Parameters
     */
    public function setSortByInformationTypeIdNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

