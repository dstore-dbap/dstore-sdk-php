<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetShippingTypes_Ad.proto
//   Date: 2015-10-06 11:19:59

namespace dstore\engine\om_GetShippingTypes_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $priority_no = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $shipping_type_description = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $surcharge_unit_symbol = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $surcharge_value = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_sum_to = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $currency_symbol = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $created_at_date_and_time = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $active = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $cost_currency_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $translated_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_sum_from = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $region = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_is_absolute_value = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $cost_currency_symbol = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $shipping_type_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $region_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $surcharge_type_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_unit_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetShippingTypes_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE priority_no = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "priority_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_description = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "shipping_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_unit_symbol = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "surcharge_unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_value = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "surcharge_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cost = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_sum_to = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "gross_sum_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_symbol = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "currency_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE created_at_date_and_time = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "created_at_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cost_currency_id = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "cost_currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE translated_description = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "translated_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_sum_from = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "gross_sum_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE region = 10014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10014;
      $f->name      = "region";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_is_absolute_value = 10015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10015;
      $f->name      = "surcharge_is_absolute_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cost_currency_symbol = 10016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10016;
      $f->name      = "cost_currency_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_id = 10017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10017;
      $f->name      = "shipping_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE region_id = 10018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10018;
      $f->name      = "region_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_description = 10019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10019;
      $f->name      = "surcharge_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_id = 10020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10020;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_unit_id = 10021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10021;
      $f->name      = "surcharge_unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <priority_no> has a value
     *
     * @return boolean
     */
    public function hasPriorityNo(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <priority_no> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearPriorityNo(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <priority_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPriorityNo(){
      return $this->_get(10001);
    }
    
    /**
     * Set <priority_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setPriorityNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <shipping_type_description> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeDescription(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <shipping_type_description> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearShippingTypeDescription(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <shipping_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getShippingTypeDescription(){
      return $this->_get(10002);
    }
    
    /**
     * Set <shipping_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setShippingTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <surcharge_unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasSurchargeUnitSymbol(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <surcharge_unit_symbol> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeUnitSymbol(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <surcharge_unit_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSurchargeUnitSymbol(){
      return $this->_get(10003);
    }
    
    /**
     * Set <surcharge_unit_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeUnitSymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <surcharge_value> has a value
     *
     * @return boolean
     */
    public function hasSurchargeValue(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <surcharge_value> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeValue(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <surcharge_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getSurchargeValue(){
      return $this->_get(10004);
    }
    
    /**
     * Set <surcharge_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <cost> has a value
     *
     * @return boolean
     */
    public function hasCost(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <cost> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCost(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getCost(){
      return $this->_get(10005);
    }
    
    /**
     * Set <cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <gross_sum_to> has a value
     *
     * @return boolean
     */
    public function hasGrossSumTo(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <gross_sum_to> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearGrossSumTo(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <gross_sum_to> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossSumTo(){
      return $this->_get(10006);
    }
    
    /**
     * Set <gross_sum_to> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setGrossSumTo(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCurrencyId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <currency_symbol> has a value
     *
     * @return boolean
     */
    public function hasCurrencySymbol(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <currency_symbol> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCurrencySymbol(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <currency_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCurrencySymbol(){
      return $this->_get(10008);
    }
    
    /**
     * Set <currency_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCurrencySymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <created_at_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasCreatedAtDateAndTime(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <created_at_date_and_time> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCreatedAtDateAndTime(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <created_at_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getCreatedAtDateAndTime(){
      return $this->_get(10009);
    }
    
    /**
     * Set <created_at_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCreatedAtDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearActive(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getActive(){
      return $this->_get(10010);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <cost_currency_id> has a value
     *
     * @return boolean
     */
    public function hasCostCurrencyId(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <cost_currency_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCostCurrencyId(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <cost_currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCostCurrencyId(){
      return $this->_get(10011);
    }
    
    /**
     * Set <cost_currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCostCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <translated_description> has a value
     *
     * @return boolean
     */
    public function hasTranslatedDescription(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <translated_description> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearTranslatedDescription(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <translated_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTranslatedDescription(){
      return $this->_get(10012);
    }
    
    /**
     * Set <translated_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setTranslatedDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <gross_sum_from> has a value
     *
     * @return boolean
     */
    public function hasGrossSumFrom(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <gross_sum_from> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearGrossSumFrom(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <gross_sum_from> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossSumFrom(){
      return $this->_get(10013);
    }
    
    /**
     * Set <gross_sum_from> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setGrossSumFrom(\dstore\engine\values\decimalValue $value){
      return $this->_set(10013, $value);
    }
    
    /**
     * Check if <region> has a value
     *
     * @return boolean
     */
    public function hasRegion(){
      return $this->_has(10014);
    }
    
    /**
     * Clear <region> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearRegion(){
      return $this->_clear(10014);
    }
    
    /**
     * Get <region> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getRegion(){
      return $this->_get(10014);
    }
    
    /**
     * Set <region> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setRegion(\dstore\engine\values\stringValue $value){
      return $this->_set(10014, $value);
    }
    
    /**
     * Check if <surcharge_is_absolute_value> has a value
     *
     * @return boolean
     */
    public function hasSurchargeIsAbsoluteValue(){
      return $this->_has(10015);
    }
    
    /**
     * Clear <surcharge_is_absolute_value> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeIsAbsoluteValue(){
      return $this->_clear(10015);
    }
    
    /**
     * Get <surcharge_is_absolute_value> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeIsAbsoluteValue(){
      return $this->_get(10015);
    }
    
    /**
     * Set <surcharge_is_absolute_value> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeIsAbsoluteValue(\dstore\engine\values\integerValue $value){
      return $this->_set(10015, $value);
    }
    
    /**
     * Check if <cost_currency_symbol> has a value
     *
     * @return boolean
     */
    public function hasCostCurrencySymbol(){
      return $this->_has(10016);
    }
    
    /**
     * Clear <cost_currency_symbol> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearCostCurrencySymbol(){
      return $this->_clear(10016);
    }
    
    /**
     * Get <cost_currency_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCostCurrencySymbol(){
      return $this->_get(10016);
    }
    
    /**
     * Set <cost_currency_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setCostCurrencySymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10016, $value);
    }
    
    /**
     * Check if <shipping_type_id> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeId(){
      return $this->_has(10017);
    }
    
    /**
     * Clear <shipping_type_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearShippingTypeId(){
      return $this->_clear(10017);
    }
    
    /**
     * Get <shipping_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getShippingTypeId(){
      return $this->_get(10017);
    }
    
    /**
     * Set <shipping_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setShippingTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10017, $value);
    }
    
    /**
     * Check if <region_id> has a value
     *
     * @return boolean
     */
    public function hasRegionId(){
      return $this->_has(10018);
    }
    
    /**
     * Clear <region_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearRegionId(){
      return $this->_clear(10018);
    }
    
    /**
     * Get <region_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRegionId(){
      return $this->_get(10018);
    }
    
    /**
     * Set <region_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setRegionId(\dstore\engine\values\integerValue $value){
      return $this->_set(10018, $value);
    }
    
    /**
     * Check if <surcharge_type_description> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeDescription(){
      return $this->_has(10019);
    }
    
    /**
     * Clear <surcharge_type_description> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeTypeDescription(){
      return $this->_clear(10019);
    }
    
    /**
     * Get <surcharge_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSurchargeTypeDescription(){
      return $this->_get(10019);
    }
    
    /**
     * Set <surcharge_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10019, $value);
    }
    
    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(10020);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(10020);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(10020);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10020, $value);
    }
    
    /**
     * Check if <surcharge_unit_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeUnitId(){
      return $this->_has(10021);
    }
    
    /**
     * Clear <surcharge_unit_id> value
     *
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function clearSurchargeUnitId(){
      return $this->_clear(10021);
    }
    
    /**
     * Get <surcharge_unit_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeUnitId(){
      return $this->_get(10021);
    }
    
    /**
     * Set <surcharge_unit_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetShippingTypes_Ad\Response\Row
     */
    public function setSurchargeUnitId(\dstore\engine\values\integerValue $value){
      return $this->_set(10021, $value);
    }
  }
}

