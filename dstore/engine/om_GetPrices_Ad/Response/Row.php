<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetPrices_Ad.proto
//   Date: 2016-05-19 08:07:50

namespace dstore\engine\om_GetPrices_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\decimalValue */
    public $unit_net_price = null;
    
    /**  @var \dstore\values\decimalValue */
    public $absolute_unit_net_surcharge = null;
    
    /**  @var \dstore\values\stringValue */
    public $surcharge_generated_by_camp_ids = null;
    
    /**  @var \dstore\values\decimalValue */
    public $unit_gross_price = null;
    
    /**  @var \dstore\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\values\decimalValue */
    public $absolute_unit_gross_surcharge = null;
    
    /**  @var \dstore\values\decimalValue */
    public $relative_surcharge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetPrices_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_net_price = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "unit_net_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE absolute_unit_net_surcharge = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "absolute_unit_net_surcharge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_generated_by_camp_ids = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "surcharge_generated_by_camp_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_gross_price = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "unit_gross_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE absolute_unit_gross_surcharge = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "absolute_unit_gross_surcharge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE relative_surcharge = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "relative_surcharge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <unit_net_price> has a value
     *
     * @return boolean
     */
    public function hasUnitNetPrice(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <unit_net_price> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearUnitNetPrice(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <unit_net_price> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getUnitNetPrice(){
      return $this->_get(10001);
    }
    
    /**
     * Set <unit_net_price> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setUnitNetPrice(\dstore\values\decimalValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <absolute_unit_net_surcharge> has a value
     *
     * @return boolean
     */
    public function hasAbsoluteUnitNetSurcharge(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <absolute_unit_net_surcharge> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearAbsoluteUnitNetSurcharge(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <absolute_unit_net_surcharge> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getAbsoluteUnitNetSurcharge(){
      return $this->_get(10002);
    }
    
    /**
     * Set <absolute_unit_net_surcharge> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setAbsoluteUnitNetSurcharge(\dstore\values\decimalValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <surcharge_generated_by_camp_ids> has a value
     *
     * @return boolean
     */
    public function hasSurchargeGeneratedByCampIds(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <surcharge_generated_by_camp_ids> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearSurchargeGeneratedByCampIds(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <surcharge_generated_by_camp_ids> value
     *
     * @return \dstore\values\stringValue
     */
    public function getSurchargeGeneratedByCampIds(){
      return $this->_get(10003);
    }
    
    /**
     * Set <surcharge_generated_by_camp_ids> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setSurchargeGeneratedByCampIds(\dstore\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <unit_gross_price> has a value
     *
     * @return boolean
     */
    public function hasUnitGrossPrice(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <unit_gross_price> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearUnitGrossPrice(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <unit_gross_price> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getUnitGrossPrice(){
      return $this->_get(10004);
    }
    
    /**
     * Set <unit_gross_price> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setUnitGrossPrice(\dstore\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearTreeNodeId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setTreeNodeId(\dstore\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setNodeId(\dstore\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <absolute_unit_gross_surcharge> has a value
     *
     * @return boolean
     */
    public function hasAbsoluteUnitGrossSurcharge(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <absolute_unit_gross_surcharge> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearAbsoluteUnitGrossSurcharge(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <absolute_unit_gross_surcharge> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getAbsoluteUnitGrossSurcharge(){
      return $this->_get(10007);
    }
    
    /**
     * Set <absolute_unit_gross_surcharge> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setAbsoluteUnitGrossSurcharge(\dstore\values\decimalValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <relative_surcharge> has a value
     *
     * @return boolean
     */
    public function hasRelativeSurcharge(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <relative_surcharge> value
     *
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function clearRelativeSurcharge(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <relative_surcharge> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getRelativeSurcharge(){
      return $this->_get(10008);
    }
    
    /**
     * Set <relative_surcharge> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetPrices_Ad\Response\Row
     */
    public function setRelativeSurcharge(\dstore\values\decimalValue $value){
      return $this->_set(10008, $value);
    }
  }
}

