<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_CheckCampCondsForTNIDs_Ad.proto
//   Date: 2016-05-19 08:07:47

namespace dstore\engine\om_CheckCampCondsForTNIDs_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\stringValue */
    public $tree_node_id_list = null;
    
    /**  @var boolean */
    public $tree_node_id_list_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $campaign_id = null;
    
    /**  @var boolean */
    public $campaign_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $quantity_list = null;
    
    /**  @var boolean */
    public $quantity_list_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $person_id = null;
    
    /**  @var boolean */
    public $person_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $currency_id = null;
    
    /**  @var boolean */
    public $currency_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $price_node_characteristic_id = null;
    
    /**  @var boolean */
    public $price_node_characteristic_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_CheckCampCondsForTNIDs_Ad.Parameters');

      // OPTIONAL MESSAGE tree_node_id_list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tree_node_id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_list_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tree_node_id_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE campaign_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "campaign_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL campaign_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "campaign_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quantity_list = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "quantity_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL quantity_list_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "quantity_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL person_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "person_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL currency_id_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "currency_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE price_node_characteristic_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "price_node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL price_node_characteristic_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "price_node_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tree_node_id_list> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tree_node_id_list> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearTreeNodeIdList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tree_node_id_list> value
     *
     * @return \dstore\values\stringValue
     */
    public function getTreeNodeIdList(){
      return $this->_get(1);
    }
    
    /**
     * Set <tree_node_id_list> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setTreeNodeIdList(\dstore\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_id_list_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdListNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tree_node_id_list_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearTreeNodeIdListNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tree_node_id_list_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdListNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tree_node_id_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setTreeNodeIdListNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <campaign_id> has a value
     *
     * @return boolean
     */
    public function hasCampaignId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <campaign_id> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearCampaignId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <campaign_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getCampaignId(){
      return $this->_get(2);
    }
    
    /**
     * Set <campaign_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setCampaignId(\dstore\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <campaign_id_null> has a value
     *
     * @return boolean
     */
    public function hasCampaignIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <campaign_id_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearCampaignIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <campaign_id_null> value
     *
     * @return boolean
     */
    public function getCampaignIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <campaign_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setCampaignIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <quantity_list> has a value
     *
     * @return boolean
     */
    public function hasQuantityList(){
      return $this->_has(3);
    }
    
    /**
     * Clear <quantity_list> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearQuantityList(){
      return $this->_clear(3);
    }
    
    /**
     * Get <quantity_list> value
     *
     * @return \dstore\values\stringValue
     */
    public function getQuantityList(){
      return $this->_get(3);
    }
    
    /**
     * Set <quantity_list> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setQuantityList(\dstore\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <quantity_list_null> has a value
     *
     * @return boolean
     */
    public function hasQuantityListNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <quantity_list_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearQuantityListNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <quantity_list_null> value
     *
     * @return boolean
     */
    public function getQuantityListNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <quantity_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setQuantityListNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearPersonId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(4);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setPersonId(\dstore\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <person_id_null> has a value
     *
     * @return boolean
     */
    public function hasPersonIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <person_id_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearPersonIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <person_id_null> value
     *
     * @return boolean
     */
    public function getPersonIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <person_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setPersonIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearCurrencyId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(5);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setCurrencyId(\dstore\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <currency_id_null> has a value
     *
     * @return boolean
     */
    public function hasCurrencyIdNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <currency_id_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearCurrencyIdNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <currency_id_null> value
     *
     * @return boolean
     */
    public function getCurrencyIdNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <currency_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setCurrencyIdNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <price_node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasPriceNodeCharacteristicId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <price_node_characteristic_id> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearPriceNodeCharacteristicId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <price_node_characteristic_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getPriceNodeCharacteristicId(){
      return $this->_get(6);
    }
    
    /**
     * Set <price_node_characteristic_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setPriceNodeCharacteristicId(\dstore\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <price_node_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasPriceNodeCharacteristicIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <price_node_characteristic_id_null> value
     *
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function clearPriceNodeCharacteristicIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <price_node_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getPriceNodeCharacteristicIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <price_node_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CheckCampCondsForTNIDs_Ad\Parameters
     */
    public function setPriceNodeCharacteristicIdNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

