<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetTaxes.proto
//   Date: 2016-05-19 08:07:50

namespace dstore\engine\om_GetTaxes\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $tax_type = null;
    
    /**  @var \dstore\values\integerValue */
    public $tax_type_id = null;
    
    /**  @var \dstore\values\timestampValue */
    public $valid_to = null;
    
    /**  @var \dstore\values\decimalValue */
    public $tax_rate = null;
    
    /**  @var \dstore\values\timestampValue */
    public $valid_from = null;
    
    /**  @var \dstore\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $surcharge_type_category_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetTaxes.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tax_type = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "tax_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tax_type_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "tax_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "valid_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tax_rate = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "tax_rate";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "valid_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_category_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "surcharge_type_category_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <tax_type> has a value
     *
     * @return boolean
     */
    public function hasTaxType(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <tax_type> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearTaxType(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <tax_type> value
     *
     * @return \dstore\values\stringValue
     */
    public function getTaxType(){
      return $this->_get(10001);
    }
    
    /**
     * Set <tax_type> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setTaxType(\dstore\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <tax_type_id> has a value
     *
     * @return boolean
     */
    public function hasTaxTypeId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <tax_type_id> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearTaxTypeId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <tax_type_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getTaxTypeId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <tax_type_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setTaxTypeId(\dstore\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <valid_to> has a value
     *
     * @return boolean
     */
    public function hasValidTo(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <valid_to> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearValidTo(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <valid_to> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getValidTo(){
      return $this->_get(10003);
    }
    
    /**
     * Set <valid_to> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setValidTo(\dstore\values\timestampValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <tax_rate> has a value
     *
     * @return boolean
     */
    public function hasTaxRate(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <tax_rate> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearTaxRate(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <tax_rate> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getTaxRate(){
      return $this->_get(10004);
    }
    
    /**
     * Set <tax_rate> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setTaxRate(\dstore\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <valid_from> has a value
     *
     * @return boolean
     */
    public function hasValidFrom(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <valid_from> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearValidFrom(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <valid_from> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getValidFrom(){
      return $this->_get(10005);
    }
    
    /**
     * Set <valid_from> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setValidFrom(\dstore\values\timestampValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setSurchargeTypeId(\dstore\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <surcharge_type_category_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeCategoryId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <surcharge_type_category_id> value
     *
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function clearSurchargeTypeCategoryId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <surcharge_type_category_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSurchargeTypeCategoryId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <surcharge_type_category_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_GetTaxes\Response\Row
     */
    public function setSurchargeTypeCategoryId(\dstore\values\integerValue $value){
      return $this->_set(10007, $value);
    }
  }
}

