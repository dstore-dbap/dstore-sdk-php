<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/do_GetProcedureReturnCodes_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\do_GetProcedureReturnCodes_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $procedure_name = null;
    
    /**  @var boolean */
    public $procedure_name_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $procedure_category_id = null;
    
    /**  @var boolean */
    public $procedure_category_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $return_code = null;
    
    /**  @var boolean */
    public $return_code_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $include_indirect_return_codes = null;
    
    /**  @var boolean */
    public $include_indirect_return_codes_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.do_GetProcedureReturnCodes_Ad.Parameters');

      // OPTIONAL MESSAGE procedure_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "procedure_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_category_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "procedure_category_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_category_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "procedure_category_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE return_code = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "return_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL return_code_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "return_code_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_indirect_return_codes = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "include_indirect_return_codes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_indirect_return_codes_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "include_indirect_return_codes_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearProcedureName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <procedure_name_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <procedure_name_null> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearProcedureNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <procedure_name_null> value
     *
     * @return boolean
     */
    public function getProcedureNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <procedure_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setProcedureNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <procedure_category_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureCategoryId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <procedure_category_id> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearProcedureCategoryId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <procedure_category_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getProcedureCategoryId(){
      return $this->_get(2);
    }
    
    /**
     * Set <procedure_category_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setProcedureCategoryId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <procedure_category_id_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureCategoryIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <procedure_category_id_null> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearProcedureCategoryIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <procedure_category_id_null> value
     *
     * @return boolean
     */
    public function getProcedureCategoryIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <procedure_category_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setProcedureCategoryIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <return_code> has a value
     *
     * @return boolean
     */
    public function hasReturnCode(){
      return $this->_has(3);
    }
    
    /**
     * Clear <return_code> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearReturnCode(){
      return $this->_clear(3);
    }
    
    /**
     * Get <return_code> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getReturnCode(){
      return $this->_get(3);
    }
    
    /**
     * Set <return_code> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setReturnCode(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <return_code_null> has a value
     *
     * @return boolean
     */
    public function hasReturnCodeNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <return_code_null> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearReturnCodeNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <return_code_null> value
     *
     * @return boolean
     */
    public function getReturnCodeNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <return_code_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setReturnCodeNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <include_indirect_return_codes> has a value
     *
     * @return boolean
     */
    public function hasIncludeIndirectReturnCodes(){
      return $this->_has(4);
    }
    
    /**
     * Clear <include_indirect_return_codes> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearIncludeIndirectReturnCodes(){
      return $this->_clear(4);
    }
    
    /**
     * Get <include_indirect_return_codes> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIncludeIndirectReturnCodes(){
      return $this->_get(4);
    }
    
    /**
     * Set <include_indirect_return_codes> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setIncludeIndirectReturnCodes(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <include_indirect_return_codes_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeIndirectReturnCodesNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <include_indirect_return_codes_null> value
     *
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function clearIncludeIndirectReturnCodesNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <include_indirect_return_codes_null> value
     *
     * @return boolean
     */
    public function getIncludeIndirectReturnCodesNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <include_indirect_return_codes_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\do_GetProcedureReturnCodes_Ad\Parameters
     */
    public function setIncludeIndirectReturnCodesNull( $value){
      return $this->_set(1004, $value);
    }
  }
}

