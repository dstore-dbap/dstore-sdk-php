<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_CreateSimpleCampItemCond_Ad.proto
//   Date: 2016-05-19 08:07:47

namespace dstore\engine\om_CreateSimpleCampItemCond_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $campaign_id = null;
    
    /**  @var boolean */
    public $campaign_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $condition_description = null;
    
    /**  @var boolean */
    public $condition_description_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $level_ids = null;
    
    /**  @var boolean */
    public $level_ids_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $domain_tree_node_ids = null;
    
    /**  @var boolean */
    public $domain_tree_node_ids_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var boolean */
    public $node_characteristic_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $operator1 = null;
    
    /**  @var boolean */
    public $operator1_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $condition1 = null;
    
    /**  @var boolean */
    public $condition1_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $operator2 = null;
    
    /**  @var boolean */
    public $operator2_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $condition2 = null;
    
    /**  @var boolean */
    public $condition2_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $inherit_depth = null;
    
    /**  @var boolean */
    public $inherit_depth_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $recursive_evaluation = null;
    
    /**  @var boolean */
    public $recursive_evaluation_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $country = null;
    
    /**  @var boolean */
    public $country_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $extended_condition_description = null;
    
    /**  @var boolean */
    public $extended_condition_description_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $min_number_of_items = null;
    
    /**  @var boolean */
    public $min_number_of_items_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $max_number_of_items = null;
    
    /**  @var boolean */
    public $max_number_of_items_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $from_quantity = null;
    
    /**  @var boolean */
    public $from_quantity_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $to_quantity = null;
    
    /**  @var boolean */
    public $to_quantity_null = null;
    
    /**  @var \dstore\values\decimalValue */
    public $from_item_basic_price = null;
    
    /**  @var boolean */
    public $from_item_basic_price_null = null;
    
    /**  @var \dstore\values\decimalValue */
    public $to_item_basic_price = null;
    
    /**  @var boolean */
    public $to_item_basic_price_null = null;
    
    /**  @var \dstore\values\decimalValue */
    public $from_basic_price_sum = null;
    
    /**  @var boolean */
    public $from_basic_price_sum_null = null;
    
    /**  @var \dstore\values\decimalValue */
    public $to_basic_price_sum = null;
    
    /**  @var boolean */
    public $to_basic_price_sum_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $combine_groups_with_a_n_d_operator = null;
    
    /**  @var boolean */
    public $combine_groups_with_a_n_d_operator_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $combine_parts_with_a_n_d_operator = null;
    
    /**  @var boolean */
    public $combine_parts_with_a_n_d_operator_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_CreateSimpleCampItemCond_Ad.Parameters');

      // OPTIONAL MESSAGE campaign_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "campaign_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL campaign_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "campaign_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "condition_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_description_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "condition_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_ids = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "level_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL level_ids_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "level_ids_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE domain_tree_node_ids = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "domain_tree_node_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL domain_tree_node_ids_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "domain_tree_node_ids_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_characteristic_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_characteristic_id_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "node_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator1 = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "operator1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL operator1_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "operator1_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition1 = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "condition1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition1_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "condition1_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator2 = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "operator2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL operator2_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "operator2_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition2 = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "condition2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition2_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "condition2_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inherit_depth = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "inherit_depth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL inherit_depth_null = 1010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1010;
      $f->name      = "inherit_depth_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recursive_evaluation = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "recursive_evaluation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL recursive_evaluation_null = 1011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1011;
      $f->name      = "recursive_evaluation_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL country_null = 1012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1012;
      $f->name      = "country_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE extended_condition_description = 13
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 13;
      $f->name      = "extended_condition_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL extended_condition_description_null = 1013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1013;
      $f->name      = "extended_condition_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE min_number_of_items = 14
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 14;
      $f->name      = "min_number_of_items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL min_number_of_items_null = 1014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1014;
      $f->name      = "min_number_of_items_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_number_of_items = 15
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 15;
      $f->name      = "max_number_of_items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL max_number_of_items_null = 1015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1015;
      $f->name      = "max_number_of_items_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_quantity = 16
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 16;
      $f->name      = "from_quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_quantity_null = 1016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1016;
      $f->name      = "from_quantity_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_quantity = 17
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 17;
      $f->name      = "to_quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_quantity_null = 1017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1017;
      $f->name      = "to_quantity_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_item_basic_price = 18
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 18;
      $f->name      = "from_item_basic_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_item_basic_price_null = 1018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1018;
      $f->name      = "from_item_basic_price_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_item_basic_price = 19
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 19;
      $f->name      = "to_item_basic_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_item_basic_price_null = 1019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1019;
      $f->name      = "to_item_basic_price_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_basic_price_sum = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "from_basic_price_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_basic_price_sum_null = 1020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1020;
      $f->name      = "from_basic_price_sum_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_basic_price_sum = 21
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 21;
      $f->name      = "to_basic_price_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_basic_price_sum_null = 1021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1021;
      $f->name      = "to_basic_price_sum_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE combine_groups_with_a_n_d_operator = 22
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 22;
      $f->name      = "combine_groups_with_a_n_d_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL combine_groups_with_a_n_d_operator_null = 1022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1022;
      $f->name      = "combine_groups_with_a_n_d_operator_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE combine_parts_with_a_n_d_operator = 23
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 23;
      $f->name      = "combine_parts_with_a_n_d_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL combine_parts_with_a_n_d_operator_null = 1023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1023;
      $f->name      = "combine_parts_with_a_n_d_operator_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <campaign_id> has a value
     *
     * @return boolean
     */
    public function hasCampaignId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <campaign_id> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCampaignId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <campaign_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getCampaignId(){
      return $this->_get(1);
    }
    
    /**
     * Set <campaign_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCampaignId(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <campaign_id_null> has a value
     *
     * @return boolean
     */
    public function hasCampaignIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <campaign_id_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCampaignIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <campaign_id_null> value
     *
     * @return boolean
     */
    public function getCampaignIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <campaign_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCampaignIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <condition_description> has a value
     *
     * @return boolean
     */
    public function hasConditionDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <condition_description> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearConditionDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <condition_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getConditionDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <condition_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setConditionDescription(\dstore\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <condition_description_null> has a value
     *
     * @return boolean
     */
    public function hasConditionDescriptionNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <condition_description_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearConditionDescriptionNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <condition_description_null> value
     *
     * @return boolean
     */
    public function getConditionDescriptionNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <condition_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setConditionDescriptionNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <level_ids> has a value
     *
     * @return boolean
     */
    public function hasLevelIds(){
      return $this->_has(3);
    }
    
    /**
     * Clear <level_ids> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearLevelIds(){
      return $this->_clear(3);
    }
    
    /**
     * Get <level_ids> value
     *
     * @return \dstore\values\stringValue
     */
    public function getLevelIds(){
      return $this->_get(3);
    }
    
    /**
     * Set <level_ids> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setLevelIds(\dstore\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level_ids_null> has a value
     *
     * @return boolean
     */
    public function hasLevelIdsNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <level_ids_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearLevelIdsNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <level_ids_null> value
     *
     * @return boolean
     */
    public function getLevelIdsNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <level_ids_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setLevelIdsNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <domain_tree_node_ids> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeIds(){
      return $this->_has(4);
    }
    
    /**
     * Clear <domain_tree_node_ids> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearDomainTreeNodeIds(){
      return $this->_clear(4);
    }
    
    /**
     * Get <domain_tree_node_ids> value
     *
     * @return \dstore\values\stringValue
     */
    public function getDomainTreeNodeIds(){
      return $this->_get(4);
    }
    
    /**
     * Set <domain_tree_node_ids> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setDomainTreeNodeIds(\dstore\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <domain_tree_node_ids_null> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeIdsNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <domain_tree_node_ids_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearDomainTreeNodeIdsNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <domain_tree_node_ids_null> value
     *
     * @return boolean
     */
    public function getDomainTreeNodeIdsNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <domain_tree_node_ids_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setDomainTreeNodeIdsNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(5);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setNodeCharacteristicId(\dstore\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <node_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicIdNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <node_characteristic_id_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearNodeCharacteristicIdNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <node_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getNodeCharacteristicIdNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <node_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setNodeCharacteristicIdNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <operator1> has a value
     *
     * @return boolean
     */
    public function hasOperator1(){
      return $this->_has(6);
    }
    
    /**
     * Clear <operator1> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearOperator1(){
      return $this->_clear(6);
    }
    
    /**
     * Get <operator1> value
     *
     * @return \dstore\values\stringValue
     */
    public function getOperator1(){
      return $this->_get(6);
    }
    
    /**
     * Set <operator1> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setOperator1(\dstore\values\stringValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <operator1_null> has a value
     *
     * @return boolean
     */
    public function hasOperator1Null(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <operator1_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearOperator1Null(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <operator1_null> value
     *
     * @return boolean
     */
    public function getOperator1Null(){
      return $this->_get(1006);
    }
    
    /**
     * Set <operator1_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setOperator1Null( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <condition1> has a value
     *
     * @return boolean
     */
    public function hasCondition1(){
      return $this->_has(7);
    }
    
    /**
     * Clear <condition1> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCondition1(){
      return $this->_clear(7);
    }
    
    /**
     * Get <condition1> value
     *
     * @return \dstore\values\stringValue
     */
    public function getCondition1(){
      return $this->_get(7);
    }
    
    /**
     * Set <condition1> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCondition1(\dstore\values\stringValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <condition1_null> has a value
     *
     * @return boolean
     */
    public function hasCondition1Null(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <condition1_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCondition1Null(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <condition1_null> value
     *
     * @return boolean
     */
    public function getCondition1Null(){
      return $this->_get(1007);
    }
    
    /**
     * Set <condition1_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCondition1Null( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <operator2> has a value
     *
     * @return boolean
     */
    public function hasOperator2(){
      return $this->_has(8);
    }
    
    /**
     * Clear <operator2> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearOperator2(){
      return $this->_clear(8);
    }
    
    /**
     * Get <operator2> value
     *
     * @return \dstore\values\stringValue
     */
    public function getOperator2(){
      return $this->_get(8);
    }
    
    /**
     * Set <operator2> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setOperator2(\dstore\values\stringValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <operator2_null> has a value
     *
     * @return boolean
     */
    public function hasOperator2Null(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <operator2_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearOperator2Null(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <operator2_null> value
     *
     * @return boolean
     */
    public function getOperator2Null(){
      return $this->_get(1008);
    }
    
    /**
     * Set <operator2_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setOperator2Null( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <condition2> has a value
     *
     * @return boolean
     */
    public function hasCondition2(){
      return $this->_has(9);
    }
    
    /**
     * Clear <condition2> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCondition2(){
      return $this->_clear(9);
    }
    
    /**
     * Get <condition2> value
     *
     * @return \dstore\values\stringValue
     */
    public function getCondition2(){
      return $this->_get(9);
    }
    
    /**
     * Set <condition2> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCondition2(\dstore\values\stringValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <condition2_null> has a value
     *
     * @return boolean
     */
    public function hasCondition2Null(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <condition2_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCondition2Null(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <condition2_null> value
     *
     * @return boolean
     */
    public function getCondition2Null(){
      return $this->_get(1009);
    }
    
    /**
     * Set <condition2_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCondition2Null( $value){
      return $this->_set(1009, $value);
    }
    
    /**
     * Check if <inherit_depth> has a value
     *
     * @return boolean
     */
    public function hasInheritDepth(){
      return $this->_has(10);
    }
    
    /**
     * Clear <inherit_depth> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearInheritDepth(){
      return $this->_clear(10);
    }
    
    /**
     * Get <inherit_depth> value
     *
     * @return \dstore\values\integerValue
     */
    public function getInheritDepth(){
      return $this->_get(10);
    }
    
    /**
     * Set <inherit_depth> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setInheritDepth(\dstore\values\integerValue $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <inherit_depth_null> has a value
     *
     * @return boolean
     */
    public function hasInheritDepthNull(){
      return $this->_has(1010);
    }
    
    /**
     * Clear <inherit_depth_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearInheritDepthNull(){
      return $this->_clear(1010);
    }
    
    /**
     * Get <inherit_depth_null> value
     *
     * @return boolean
     */
    public function getInheritDepthNull(){
      return $this->_get(1010);
    }
    
    /**
     * Set <inherit_depth_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setInheritDepthNull( $value){
      return $this->_set(1010, $value);
    }
    
    /**
     * Check if <recursive_evaluation> has a value
     *
     * @return boolean
     */
    public function hasRecursiveEvaluation(){
      return $this->_has(11);
    }
    
    /**
     * Clear <recursive_evaluation> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearRecursiveEvaluation(){
      return $this->_clear(11);
    }
    
    /**
     * Get <recursive_evaluation> value
     *
     * @return \dstore\values\integerValue
     */
    public function getRecursiveEvaluation(){
      return $this->_get(11);
    }
    
    /**
     * Set <recursive_evaluation> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setRecursiveEvaluation(\dstore\values\integerValue $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <recursive_evaluation_null> has a value
     *
     * @return boolean
     */
    public function hasRecursiveEvaluationNull(){
      return $this->_has(1011);
    }
    
    /**
     * Clear <recursive_evaluation_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearRecursiveEvaluationNull(){
      return $this->_clear(1011);
    }
    
    /**
     * Get <recursive_evaluation_null> value
     *
     * @return boolean
     */
    public function getRecursiveEvaluationNull(){
      return $this->_get(1011);
    }
    
    /**
     * Set <recursive_evaluation_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setRecursiveEvaluationNull( $value){
      return $this->_set(1011, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(12);
    }
    
    /**
     * Clear <country> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCountry(){
      return $this->_clear(12);
    }
    
    /**
     * Get <country> value
     *
     * @return \dstore\values\stringValue
     */
    public function getCountry(){
      return $this->_get(12);
    }
    
    /**
     * Set <country> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCountry(\dstore\values\stringValue $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <country_null> has a value
     *
     * @return boolean
     */
    public function hasCountryNull(){
      return $this->_has(1012);
    }
    
    /**
     * Clear <country_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCountryNull(){
      return $this->_clear(1012);
    }
    
    /**
     * Get <country_null> value
     *
     * @return boolean
     */
    public function getCountryNull(){
      return $this->_get(1012);
    }
    
    /**
     * Set <country_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCountryNull( $value){
      return $this->_set(1012, $value);
    }
    
    /**
     * Check if <extended_condition_description> has a value
     *
     * @return boolean
     */
    public function hasExtendedConditionDescription(){
      return $this->_has(13);
    }
    
    /**
     * Clear <extended_condition_description> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearExtendedConditionDescription(){
      return $this->_clear(13);
    }
    
    /**
     * Get <extended_condition_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getExtendedConditionDescription(){
      return $this->_get(13);
    }
    
    /**
     * Set <extended_condition_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setExtendedConditionDescription(\dstore\values\stringValue $value){
      return $this->_set(13, $value);
    }
    
    /**
     * Check if <extended_condition_description_null> has a value
     *
     * @return boolean
     */
    public function hasExtendedConditionDescriptionNull(){
      return $this->_has(1013);
    }
    
    /**
     * Clear <extended_condition_description_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearExtendedConditionDescriptionNull(){
      return $this->_clear(1013);
    }
    
    /**
     * Get <extended_condition_description_null> value
     *
     * @return boolean
     */
    public function getExtendedConditionDescriptionNull(){
      return $this->_get(1013);
    }
    
    /**
     * Set <extended_condition_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setExtendedConditionDescriptionNull( $value){
      return $this->_set(1013, $value);
    }
    
    /**
     * Check if <min_number_of_items> has a value
     *
     * @return boolean
     */
    public function hasMinNumberOfItems(){
      return $this->_has(14);
    }
    
    /**
     * Clear <min_number_of_items> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearMinNumberOfItems(){
      return $this->_clear(14);
    }
    
    /**
     * Get <min_number_of_items> value
     *
     * @return \dstore\values\integerValue
     */
    public function getMinNumberOfItems(){
      return $this->_get(14);
    }
    
    /**
     * Set <min_number_of_items> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setMinNumberOfItems(\dstore\values\integerValue $value){
      return $this->_set(14, $value);
    }
    
    /**
     * Check if <min_number_of_items_null> has a value
     *
     * @return boolean
     */
    public function hasMinNumberOfItemsNull(){
      return $this->_has(1014);
    }
    
    /**
     * Clear <min_number_of_items_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearMinNumberOfItemsNull(){
      return $this->_clear(1014);
    }
    
    /**
     * Get <min_number_of_items_null> value
     *
     * @return boolean
     */
    public function getMinNumberOfItemsNull(){
      return $this->_get(1014);
    }
    
    /**
     * Set <min_number_of_items_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setMinNumberOfItemsNull( $value){
      return $this->_set(1014, $value);
    }
    
    /**
     * Check if <max_number_of_items> has a value
     *
     * @return boolean
     */
    public function hasMaxNumberOfItems(){
      return $this->_has(15);
    }
    
    /**
     * Clear <max_number_of_items> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearMaxNumberOfItems(){
      return $this->_clear(15);
    }
    
    /**
     * Get <max_number_of_items> value
     *
     * @return \dstore\values\integerValue
     */
    public function getMaxNumberOfItems(){
      return $this->_get(15);
    }
    
    /**
     * Set <max_number_of_items> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setMaxNumberOfItems(\dstore\values\integerValue $value){
      return $this->_set(15, $value);
    }
    
    /**
     * Check if <max_number_of_items_null> has a value
     *
     * @return boolean
     */
    public function hasMaxNumberOfItemsNull(){
      return $this->_has(1015);
    }
    
    /**
     * Clear <max_number_of_items_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearMaxNumberOfItemsNull(){
      return $this->_clear(1015);
    }
    
    /**
     * Get <max_number_of_items_null> value
     *
     * @return boolean
     */
    public function getMaxNumberOfItemsNull(){
      return $this->_get(1015);
    }
    
    /**
     * Set <max_number_of_items_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setMaxNumberOfItemsNull( $value){
      return $this->_set(1015, $value);
    }
    
    /**
     * Check if <from_quantity> has a value
     *
     * @return boolean
     */
    public function hasFromQuantity(){
      return $this->_has(16);
    }
    
    /**
     * Clear <from_quantity> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromQuantity(){
      return $this->_clear(16);
    }
    
    /**
     * Get <from_quantity> value
     *
     * @return \dstore\values\integerValue
     */
    public function getFromQuantity(){
      return $this->_get(16);
    }
    
    /**
     * Set <from_quantity> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromQuantity(\dstore\values\integerValue $value){
      return $this->_set(16, $value);
    }
    
    /**
     * Check if <from_quantity_null> has a value
     *
     * @return boolean
     */
    public function hasFromQuantityNull(){
      return $this->_has(1016);
    }
    
    /**
     * Clear <from_quantity_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromQuantityNull(){
      return $this->_clear(1016);
    }
    
    /**
     * Get <from_quantity_null> value
     *
     * @return boolean
     */
    public function getFromQuantityNull(){
      return $this->_get(1016);
    }
    
    /**
     * Set <from_quantity_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromQuantityNull( $value){
      return $this->_set(1016, $value);
    }
    
    /**
     * Check if <to_quantity> has a value
     *
     * @return boolean
     */
    public function hasToQuantity(){
      return $this->_has(17);
    }
    
    /**
     * Clear <to_quantity> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToQuantity(){
      return $this->_clear(17);
    }
    
    /**
     * Get <to_quantity> value
     *
     * @return \dstore\values\integerValue
     */
    public function getToQuantity(){
      return $this->_get(17);
    }
    
    /**
     * Set <to_quantity> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToQuantity(\dstore\values\integerValue $value){
      return $this->_set(17, $value);
    }
    
    /**
     * Check if <to_quantity_null> has a value
     *
     * @return boolean
     */
    public function hasToQuantityNull(){
      return $this->_has(1017);
    }
    
    /**
     * Clear <to_quantity_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToQuantityNull(){
      return $this->_clear(1017);
    }
    
    /**
     * Get <to_quantity_null> value
     *
     * @return boolean
     */
    public function getToQuantityNull(){
      return $this->_get(1017);
    }
    
    /**
     * Set <to_quantity_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToQuantityNull( $value){
      return $this->_set(1017, $value);
    }
    
    /**
     * Check if <from_item_basic_price> has a value
     *
     * @return boolean
     */
    public function hasFromItemBasicPrice(){
      return $this->_has(18);
    }
    
    /**
     * Clear <from_item_basic_price> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromItemBasicPrice(){
      return $this->_clear(18);
    }
    
    /**
     * Get <from_item_basic_price> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getFromItemBasicPrice(){
      return $this->_get(18);
    }
    
    /**
     * Set <from_item_basic_price> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromItemBasicPrice(\dstore\values\decimalValue $value){
      return $this->_set(18, $value);
    }
    
    /**
     * Check if <from_item_basic_price_null> has a value
     *
     * @return boolean
     */
    public function hasFromItemBasicPriceNull(){
      return $this->_has(1018);
    }
    
    /**
     * Clear <from_item_basic_price_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromItemBasicPriceNull(){
      return $this->_clear(1018);
    }
    
    /**
     * Get <from_item_basic_price_null> value
     *
     * @return boolean
     */
    public function getFromItemBasicPriceNull(){
      return $this->_get(1018);
    }
    
    /**
     * Set <from_item_basic_price_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromItemBasicPriceNull( $value){
      return $this->_set(1018, $value);
    }
    
    /**
     * Check if <to_item_basic_price> has a value
     *
     * @return boolean
     */
    public function hasToItemBasicPrice(){
      return $this->_has(19);
    }
    
    /**
     * Clear <to_item_basic_price> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToItemBasicPrice(){
      return $this->_clear(19);
    }
    
    /**
     * Get <to_item_basic_price> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getToItemBasicPrice(){
      return $this->_get(19);
    }
    
    /**
     * Set <to_item_basic_price> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToItemBasicPrice(\dstore\values\decimalValue $value){
      return $this->_set(19, $value);
    }
    
    /**
     * Check if <to_item_basic_price_null> has a value
     *
     * @return boolean
     */
    public function hasToItemBasicPriceNull(){
      return $this->_has(1019);
    }
    
    /**
     * Clear <to_item_basic_price_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToItemBasicPriceNull(){
      return $this->_clear(1019);
    }
    
    /**
     * Get <to_item_basic_price_null> value
     *
     * @return boolean
     */
    public function getToItemBasicPriceNull(){
      return $this->_get(1019);
    }
    
    /**
     * Set <to_item_basic_price_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToItemBasicPriceNull( $value){
      return $this->_set(1019, $value);
    }
    
    /**
     * Check if <from_basic_price_sum> has a value
     *
     * @return boolean
     */
    public function hasFromBasicPriceSum(){
      return $this->_has(20);
    }
    
    /**
     * Clear <from_basic_price_sum> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromBasicPriceSum(){
      return $this->_clear(20);
    }
    
    /**
     * Get <from_basic_price_sum> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getFromBasicPriceSum(){
      return $this->_get(20);
    }
    
    /**
     * Set <from_basic_price_sum> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromBasicPriceSum(\dstore\values\decimalValue $value){
      return $this->_set(20, $value);
    }
    
    /**
     * Check if <from_basic_price_sum_null> has a value
     *
     * @return boolean
     */
    public function hasFromBasicPriceSumNull(){
      return $this->_has(1020);
    }
    
    /**
     * Clear <from_basic_price_sum_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearFromBasicPriceSumNull(){
      return $this->_clear(1020);
    }
    
    /**
     * Get <from_basic_price_sum_null> value
     *
     * @return boolean
     */
    public function getFromBasicPriceSumNull(){
      return $this->_get(1020);
    }
    
    /**
     * Set <from_basic_price_sum_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setFromBasicPriceSumNull( $value){
      return $this->_set(1020, $value);
    }
    
    /**
     * Check if <to_basic_price_sum> has a value
     *
     * @return boolean
     */
    public function hasToBasicPriceSum(){
      return $this->_has(21);
    }
    
    /**
     * Clear <to_basic_price_sum> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToBasicPriceSum(){
      return $this->_clear(21);
    }
    
    /**
     * Get <to_basic_price_sum> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getToBasicPriceSum(){
      return $this->_get(21);
    }
    
    /**
     * Set <to_basic_price_sum> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToBasicPriceSum(\dstore\values\decimalValue $value){
      return $this->_set(21, $value);
    }
    
    /**
     * Check if <to_basic_price_sum_null> has a value
     *
     * @return boolean
     */
    public function hasToBasicPriceSumNull(){
      return $this->_has(1021);
    }
    
    /**
     * Clear <to_basic_price_sum_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearToBasicPriceSumNull(){
      return $this->_clear(1021);
    }
    
    /**
     * Get <to_basic_price_sum_null> value
     *
     * @return boolean
     */
    public function getToBasicPriceSumNull(){
      return $this->_get(1021);
    }
    
    /**
     * Set <to_basic_price_sum_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setToBasicPriceSumNull( $value){
      return $this->_set(1021, $value);
    }
    
    /**
     * Check if <combine_groups_with_a_n_d_operator> has a value
     *
     * @return boolean
     */
    public function hasCombineGroupsWithANDOperator(){
      return $this->_has(22);
    }
    
    /**
     * Clear <combine_groups_with_a_n_d_operator> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCombineGroupsWithANDOperator(){
      return $this->_clear(22);
    }
    
    /**
     * Get <combine_groups_with_a_n_d_operator> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getCombineGroupsWithANDOperator(){
      return $this->_get(22);
    }
    
    /**
     * Set <combine_groups_with_a_n_d_operator> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCombineGroupsWithANDOperator(\dstore\values\booleanValue $value){
      return $this->_set(22, $value);
    }
    
    /**
     * Check if <combine_groups_with_a_n_d_operator_null> has a value
     *
     * @return boolean
     */
    public function hasCombineGroupsWithANDOperatorNull(){
      return $this->_has(1022);
    }
    
    /**
     * Clear <combine_groups_with_a_n_d_operator_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCombineGroupsWithANDOperatorNull(){
      return $this->_clear(1022);
    }
    
    /**
     * Get <combine_groups_with_a_n_d_operator_null> value
     *
     * @return boolean
     */
    public function getCombineGroupsWithANDOperatorNull(){
      return $this->_get(1022);
    }
    
    /**
     * Set <combine_groups_with_a_n_d_operator_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCombineGroupsWithANDOperatorNull( $value){
      return $this->_set(1022, $value);
    }
    
    /**
     * Check if <combine_parts_with_a_n_d_operator> has a value
     *
     * @return boolean
     */
    public function hasCombinePartsWithANDOperator(){
      return $this->_has(23);
    }
    
    /**
     * Clear <combine_parts_with_a_n_d_operator> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCombinePartsWithANDOperator(){
      return $this->_clear(23);
    }
    
    /**
     * Get <combine_parts_with_a_n_d_operator> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getCombinePartsWithANDOperator(){
      return $this->_get(23);
    }
    
    /**
     * Set <combine_parts_with_a_n_d_operator> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCombinePartsWithANDOperator(\dstore\values\booleanValue $value){
      return $this->_set(23, $value);
    }
    
    /**
     * Check if <combine_parts_with_a_n_d_operator_null> has a value
     *
     * @return boolean
     */
    public function hasCombinePartsWithANDOperatorNull(){
      return $this->_has(1023);
    }
    
    /**
     * Clear <combine_parts_with_a_n_d_operator_null> value
     *
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function clearCombinePartsWithANDOperatorNull(){
      return $this->_clear(1023);
    }
    
    /**
     * Get <combine_parts_with_a_n_d_operator_null> value
     *
     * @return boolean
     */
    public function getCombinePartsWithANDOperatorNull(){
      return $this->_get(1023);
    }
    
    /**
     * Set <combine_parts_with_a_n_d_operator_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_CreateSimpleCampItemCond_Ad\Parameters
     */
    public function setCombinePartsWithANDOperatorNull( $value){
      return $this->_set(1023, $value);
    }
  }
}

