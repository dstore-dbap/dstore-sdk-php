<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetDirectSuccessors_Tree_Pu.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\im_GetDirectSuccessors_Tree_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var boolean */
    public $tree_node_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $language_id = null;
    
    /**  @var boolean */
    public $language_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $filter_by_characteristic_id = null;
    
    /**  @var boolean */
    public $filter_by_characteristic_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $filter_by_charac_value = null;
    
    /**  @var boolean */
    public $filter_by_charac_value_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $apply_filter_for_all_nodes = null;
    
    /**  @var boolean */
    public $apply_filter_for_all_nodes_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $negate_filter_by_params = null;
    
    /**  @var boolean */
    public $negate_filter_by_params_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetDirectSuccessors_Tree_Pu.Parameters');

      // OPTIONAL MESSAGE tree_node_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL language_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "language_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter_by_characteristic_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "filter_by_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL filter_by_characteristic_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "filter_by_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter_by_charac_value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "filter_by_charac_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL filter_by_charac_value_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "filter_by_charac_value_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE apply_filter_for_all_nodes = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "apply_filter_for_all_nodes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL apply_filter_for_all_nodes_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "apply_filter_for_all_nodes_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE negate_filter_by_params = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "negate_filter_by_params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL negate_filter_by_params_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "negate_filter_by_params_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearTreeNodeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tree_node_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearTreeNodeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tree_node_id_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setTreeNodeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearLanguageId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(2);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setLanguageId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <language_id_null> has a value
     *
     * @return boolean
     */
    public function hasLanguageIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <language_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearLanguageIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <language_id_null> value
     *
     * @return boolean
     */
    public function getLanguageIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <language_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setLanguageIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <filter_by_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacteristicId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <filter_by_characteristic_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearFilterByCharacteristicId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <filter_by_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFilterByCharacteristicId(){
      return $this->_get(3);
    }
    
    /**
     * Set <filter_by_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setFilterByCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <filter_by_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacteristicIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <filter_by_characteristic_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearFilterByCharacteristicIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <filter_by_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getFilterByCharacteristicIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <filter_by_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setFilterByCharacteristicIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <filter_by_charac_value> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <filter_by_charac_value> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearFilterByCharacValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <filter_by_charac_value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getFilterByCharacValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <filter_by_charac_value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setFilterByCharacValue(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <filter_by_charac_value_null> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacValueNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <filter_by_charac_value_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearFilterByCharacValueNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <filter_by_charac_value_null> value
     *
     * @return boolean
     */
    public function getFilterByCharacValueNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <filter_by_charac_value_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setFilterByCharacValueNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <apply_filter_for_all_nodes> has a value
     *
     * @return boolean
     */
    public function hasApplyFilterForAllNodes(){
      return $this->_has(5);
    }
    
    /**
     * Clear <apply_filter_for_all_nodes> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearApplyFilterForAllNodes(){
      return $this->_clear(5);
    }
    
    /**
     * Get <apply_filter_for_all_nodes> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getApplyFilterForAllNodes(){
      return $this->_get(5);
    }
    
    /**
     * Set <apply_filter_for_all_nodes> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setApplyFilterForAllNodes(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <apply_filter_for_all_nodes_null> has a value
     *
     * @return boolean
     */
    public function hasApplyFilterForAllNodesNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <apply_filter_for_all_nodes_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearApplyFilterForAllNodesNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <apply_filter_for_all_nodes_null> value
     *
     * @return boolean
     */
    public function getApplyFilterForAllNodesNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <apply_filter_for_all_nodes_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setApplyFilterForAllNodesNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <negate_filter_by_params> has a value
     *
     * @return boolean
     */
    public function hasNegateFilterByParams(){
      return $this->_has(6);
    }
    
    /**
     * Clear <negate_filter_by_params> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearNegateFilterByParams(){
      return $this->_clear(6);
    }
    
    /**
     * Get <negate_filter_by_params> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getNegateFilterByParams(){
      return $this->_get(6);
    }
    
    /**
     * Set <negate_filter_by_params> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setNegateFilterByParams(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <negate_filter_by_params_null> has a value
     *
     * @return boolean
     */
    public function hasNegateFilterByParamsNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <negate_filter_by_params_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function clearNegateFilterByParamsNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <negate_filter_by_params_null> value
     *
     * @return boolean
     */
    public function getNegateFilterByParamsNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <negate_filter_by_params_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Pu\Parameters
     */
    public function setNegateFilterByParamsNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

