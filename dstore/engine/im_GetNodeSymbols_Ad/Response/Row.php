<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetNodeSymbols_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\im_GetNodeSymbols_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\byteValue */
    public $symbol = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $symbol_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetNodeSymbols_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE symbol = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\byteValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE symbol_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "symbol_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <symbol> has a value
     *
     * @return boolean
     */
    public function hasSymbol(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <symbol> value
     *
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function clearSymbol(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <symbol> value
     *
     * @return \dstore\engine\values\byteValue
     */
    public function getSymbol(){
      return $this->_get(10001);
    }
    
    /**
     * Set <symbol> value
     *
     * @param \dstore\engine\values\byteValue $value
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function setSymbol(\dstore\engine\values\byteValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <symbol_id> has a value
     *
     * @return boolean
     */
    public function hasSymbolId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <symbol_id> value
     *
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function clearSymbolId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <symbol_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSymbolId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <symbol_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeSymbols_Ad\Response\Row
     */
    public function setSymbolId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
  }
}

