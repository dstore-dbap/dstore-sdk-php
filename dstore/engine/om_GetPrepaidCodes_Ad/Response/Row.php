<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetPrepaidCodes_Ad.proto
//   Date: 2015-10-06 11:19:59

namespace dstore\engine\om_GetPrepaidCodes_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $generated_by_order_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $generated_at_date_and_time = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $used_for_transaction_id = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $code_already_used = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $prepaid_code = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $prepaid_value = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $code_valid_until = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetPrepaidCodes_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE generated_by_order_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "generated_by_order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE generated_at_date_and_time = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "generated_at_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE used_for_transaction_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "used_for_transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE code_already_used = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "code_already_used";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE prepaid_code = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "prepaid_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE prepaid_value = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "prepaid_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE code_valid_until = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "code_valid_until";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <generated_by_order_id> has a value
     *
     * @return boolean
     */
    public function hasGeneratedByOrderId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <generated_by_order_id> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearGeneratedByOrderId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <generated_by_order_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getGeneratedByOrderId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <generated_by_order_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setGeneratedByOrderId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <generated_at_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasGeneratedAtDateAndTime(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <generated_at_date_and_time> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearGeneratedAtDateAndTime(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <generated_at_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getGeneratedAtDateAndTime(){
      return $this->_get(10002);
    }
    
    /**
     * Set <generated_at_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setGeneratedAtDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <used_for_transaction_id> has a value
     *
     * @return boolean
     */
    public function hasUsedForTransactionId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <used_for_transaction_id> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearUsedForTransactionId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <used_for_transaction_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUsedForTransactionId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <used_for_transaction_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setUsedForTransactionId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <code_already_used> has a value
     *
     * @return boolean
     */
    public function hasCodeAlreadyUsed(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <code_already_used> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearCodeAlreadyUsed(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <code_already_used> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCodeAlreadyUsed(){
      return $this->_get(10004);
    }
    
    /**
     * Set <code_already_used> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setCodeAlreadyUsed(\dstore\engine\values\booleanValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <prepaid_code> has a value
     *
     * @return boolean
     */
    public function hasPrepaidCode(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <prepaid_code> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearPrepaidCode(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <prepaid_code> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPrepaidCode(){
      return $this->_get(10005);
    }
    
    /**
     * Set <prepaid_code> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setPrepaidCode(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <prepaid_value> has a value
     *
     * @return boolean
     */
    public function hasPrepaidValue(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <prepaid_value> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearPrepaidValue(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <prepaid_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPrepaidValue(){
      return $this->_get(10006);
    }
    
    /**
     * Set <prepaid_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setPrepaidValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <code_valid_until> has a value
     *
     * @return boolean
     */
    public function hasCodeValidUntil(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <code_valid_until> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearCodeValidUntil(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <code_valid_until> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getCodeValidUntil(){
      return $this->_get(10007);
    }
    
    /**
     * Set <code_valid_until> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setCodeValidUntil(\dstore\engine\values\timestampValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function clearCurrencyId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetPrepaidCodes_Ad\Response\Row
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
  }
}

