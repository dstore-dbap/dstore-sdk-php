<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetProcedureParameters.proto
//   Date: 2015-10-06 11:19:51

namespace dstore\engine\mi_GetProcedureParameters {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $procedure_name = null;
    
    /**  @var boolean */
    public $procedure_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $parameter_name = null;
    
    /**  @var boolean */
    public $parameter_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $database_name = null;
    
    /**  @var boolean */
    public $database_name_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetProcedureParameters.Parameters');

      // OPTIONAL MESSAGE procedure_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "procedure_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parameter_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameter_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL parameter_name_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "parameter_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE database_name = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "database_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL database_name_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "database_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearProcedureName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <procedure_name_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <procedure_name_null> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearProcedureNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <procedure_name_null> value
     *
     * @return boolean
     */
    public function getProcedureNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <procedure_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setProcedureNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <parameter_name> has a value
     *
     * @return boolean
     */
    public function hasParameterName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameter_name> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearParameterName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameter_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getParameterName(){
      return $this->_get(2);
    }
    
    /**
     * Set <parameter_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setParameterName(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <parameter_name_null> has a value
     *
     * @return boolean
     */
    public function hasParameterNameNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <parameter_name_null> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearParameterNameNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <parameter_name_null> value
     *
     * @return boolean
     */
    public function getParameterNameNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <parameter_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setParameterNameNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <database_name> has a value
     *
     * @return boolean
     */
    public function hasDatabaseName(){
      return $this->_has(3);
    }
    
    /**
     * Clear <database_name> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearDatabaseName(){
      return $this->_clear(3);
    }
    
    /**
     * Get <database_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDatabaseName(){
      return $this->_get(3);
    }
    
    /**
     * Set <database_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setDatabaseName(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <database_name_null> has a value
     *
     * @return boolean
     */
    public function hasDatabaseNameNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <database_name_null> value
     *
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function clearDatabaseNameNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <database_name_null> value
     *
     * @return boolean
     */
    public function getDatabaseNameNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <database_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetProcedureParameters\Parameters
     */
    public function setDatabaseNameNull( $value){
      return $this->_set(1003, $value);
    }
  }
}

