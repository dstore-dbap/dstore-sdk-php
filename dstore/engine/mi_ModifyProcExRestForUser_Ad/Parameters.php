<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ModifyProcExRestForUser_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_ModifyProcExRestForUser_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $procedure_id = null;
    
    /**  @var boolean */
    public $procedure_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $restriction_for_user_id = null;
    
    /**  @var boolean */
    public $restriction_for_user_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_nesting_level = null;
    
    /**  @var boolean */
    public $from_nesting_level_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_id = null;
    
    /**  @var boolean */
    public $condition_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $parameter_name = null;
    
    /**  @var boolean */
    public $parameter_name_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_number = null;
    
    /**  @var boolean */
    public $condition_number_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $operator = null;
    
    /**  @var boolean */
    public $operator_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition = null;
    
    /**  @var boolean */
    public $condition_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $restriction_is_active = null;
    
    /**  @var boolean */
    public $restriction_is_active_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $set_restriction_is_active_only = null;
    
    /**  @var boolean */
    public $set_restriction_is_active_only_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $delete = null;
    
    /**  @var boolean */
    public $delete_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ModifyProcExRestForUser_Ad.Parameters');

      // OPTIONAL MESSAGE procedure_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "procedure_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE restriction_for_user_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "restriction_for_user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL restriction_for_user_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "restriction_for_user_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_nesting_level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "from_nesting_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_nesting_level_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "from_nesting_level_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "condition_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parameter_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "parameter_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL parameter_name_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "parameter_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_number = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "condition_number";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_number_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "condition_number_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL operator_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "operator_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "condition_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE restriction_is_active = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "restriction_is_active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL restriction_is_active_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "restriction_is_active_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE set_restriction_is_active_only = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "set_restriction_is_active_only";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL set_restriction_is_active_only_null = 1010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1010;
      $f->name      = "set_restriction_is_active_only_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "delete";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_null = 1011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1011;
      $f->name      = "delete_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_id> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearProcedureId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getProcedureId(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setProcedureId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <procedure_id_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <procedure_id_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearProcedureIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <procedure_id_null> value
     *
     * @return boolean
     */
    public function getProcedureIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <procedure_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setProcedureIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <restriction_for_user_id> has a value
     *
     * @return boolean
     */
    public function hasRestrictionForUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <restriction_for_user_id> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearRestrictionForUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <restriction_for_user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRestrictionForUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <restriction_for_user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setRestrictionForUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <restriction_for_user_id_null> has a value
     *
     * @return boolean
     */
    public function hasRestrictionForUserIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <restriction_for_user_id_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearRestrictionForUserIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <restriction_for_user_id_null> value
     *
     * @return boolean
     */
    public function getRestrictionForUserIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <restriction_for_user_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setRestrictionForUserIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <from_nesting_level> has a value
     *
     * @return boolean
     */
    public function hasFromNestingLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <from_nesting_level> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearFromNestingLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <from_nesting_level> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromNestingLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <from_nesting_level> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setFromNestingLevel(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <from_nesting_level_null> has a value
     *
     * @return boolean
     */
    public function hasFromNestingLevelNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <from_nesting_level_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearFromNestingLevelNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <from_nesting_level_null> value
     *
     * @return boolean
     */
    public function getFromNestingLevelNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <from_nesting_level_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setFromNestingLevelNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <condition_id> has a value
     *
     * @return boolean
     */
    public function hasConditionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <condition_id> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearConditionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <condition_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <condition_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setConditionId(\dstore\engine\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <condition_id_null> has a value
     *
     * @return boolean
     */
    public function hasConditionIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <condition_id_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearConditionIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <condition_id_null> value
     *
     * @return boolean
     */
    public function getConditionIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <condition_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setConditionIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <parameter_name> has a value
     *
     * @return boolean
     */
    public function hasParameterName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <parameter_name> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearParameterName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <parameter_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getParameterName(){
      return $this->_get(5);
    }
    
    /**
     * Set <parameter_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setParameterName(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <parameter_name_null> has a value
     *
     * @return boolean
     */
    public function hasParameterNameNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <parameter_name_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearParameterNameNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <parameter_name_null> value
     *
     * @return boolean
     */
    public function getParameterNameNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <parameter_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setParameterNameNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <condition_number> has a value
     *
     * @return boolean
     */
    public function hasConditionNumber(){
      return $this->_has(6);
    }
    
    /**
     * Clear <condition_number> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearConditionNumber(){
      return $this->_clear(6);
    }
    
    /**
     * Get <condition_number> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionNumber(){
      return $this->_get(6);
    }
    
    /**
     * Set <condition_number> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setConditionNumber(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <condition_number_null> has a value
     *
     * @return boolean
     */
    public function hasConditionNumberNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <condition_number_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearConditionNumberNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <condition_number_null> value
     *
     * @return boolean
     */
    public function getConditionNumberNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <condition_number_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setConditionNumberNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(7);
    }
    
    /**
     * Clear <operator> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearOperator(){
      return $this->_clear(7);
    }
    
    /**
     * Get <operator> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOperator(){
      return $this->_get(7);
    }
    
    /**
     * Set <operator> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setOperator(\dstore\engine\values\stringValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <operator_null> has a value
     *
     * @return boolean
     */
    public function hasOperatorNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <operator_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearOperatorNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <operator_null> value
     *
     * @return boolean
     */
    public function getOperatorNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <operator_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setOperatorNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(8);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearCondition(){
      return $this->_clear(8);
    }
    
    /**
     * Get <condition> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCondition(){
      return $this->_get(8);
    }
    
    /**
     * Set <condition> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setCondition(\dstore\engine\values\stringValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <condition_null> has a value
     *
     * @return boolean
     */
    public function hasConditionNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <condition_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearConditionNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <condition_null> value
     *
     * @return boolean
     */
    public function getConditionNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <condition_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setConditionNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <restriction_is_active> has a value
     *
     * @return boolean
     */
    public function hasRestrictionIsActive(){
      return $this->_has(9);
    }
    
    /**
     * Clear <restriction_is_active> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearRestrictionIsActive(){
      return $this->_clear(9);
    }
    
    /**
     * Get <restriction_is_active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getRestrictionIsActive(){
      return $this->_get(9);
    }
    
    /**
     * Set <restriction_is_active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setRestrictionIsActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <restriction_is_active_null> has a value
     *
     * @return boolean
     */
    public function hasRestrictionIsActiveNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <restriction_is_active_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearRestrictionIsActiveNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <restriction_is_active_null> value
     *
     * @return boolean
     */
    public function getRestrictionIsActiveNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <restriction_is_active_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setRestrictionIsActiveNull( $value){
      return $this->_set(1009, $value);
    }
    
    /**
     * Check if <set_restriction_is_active_only> has a value
     *
     * @return boolean
     */
    public function hasSetRestrictionIsActiveOnly(){
      return $this->_has(10);
    }
    
    /**
     * Clear <set_restriction_is_active_only> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearSetRestrictionIsActiveOnly(){
      return $this->_clear(10);
    }
    
    /**
     * Get <set_restriction_is_active_only> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSetRestrictionIsActiveOnly(){
      return $this->_get(10);
    }
    
    /**
     * Set <set_restriction_is_active_only> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setSetRestrictionIsActiveOnly(\dstore\engine\values\integerValue $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <set_restriction_is_active_only_null> has a value
     *
     * @return boolean
     */
    public function hasSetRestrictionIsActiveOnlyNull(){
      return $this->_has(1010);
    }
    
    /**
     * Clear <set_restriction_is_active_only_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearSetRestrictionIsActiveOnlyNull(){
      return $this->_clear(1010);
    }
    
    /**
     * Get <set_restriction_is_active_only_null> value
     *
     * @return boolean
     */
    public function getSetRestrictionIsActiveOnlyNull(){
      return $this->_get(1010);
    }
    
    /**
     * Set <set_restriction_is_active_only_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setSetRestrictionIsActiveOnlyNull( $value){
      return $this->_set(1010, $value);
    }
    
    /**
     * Check if <delete> has a value
     *
     * @return boolean
     */
    public function hasDelete(){
      return $this->_has(11);
    }
    
    /**
     * Clear <delete> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearDelete(){
      return $this->_clear(11);
    }
    
    /**
     * Get <delete> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDelete(){
      return $this->_get(11);
    }
    
    /**
     * Set <delete> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setDelete(\dstore\engine\values\integerValue $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <delete_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteNull(){
      return $this->_has(1011);
    }
    
    /**
     * Clear <delete_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function clearDeleteNull(){
      return $this->_clear(1011);
    }
    
    /**
     * Get <delete_null> value
     *
     * @return boolean
     */
    public function getDeleteNull(){
      return $this->_get(1011);
    }
    
    /**
     * Set <delete_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRestForUser_Ad\Parameters
     */
    public function setDeleteNull( $value){
      return $this->_set(1011, $value);
    }
  }
}

