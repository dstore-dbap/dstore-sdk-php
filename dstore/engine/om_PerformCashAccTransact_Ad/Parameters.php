<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_PerformCashAccTransact_Ad.proto
//   Date: 2015-10-06 11:20:04

namespace dstore\engine\om_PerformCashAccTransact_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    
    /**  @var boolean */
    public $person_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $cash_account_type_id = null;
    
    /**  @var boolean */
    public $cash_account_type_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $transaction_type_id = null;
    
    /**  @var boolean */
    public $transaction_type_id_null = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $transaction_value = null;
    
    /**  @var boolean */
    public $transaction_value_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $transaction_comment = null;
    
    /**  @var boolean */
    public $transaction_comment_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var boolean */
    public $currency_id_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $suspend_until = null;
    
    /**  @var boolean */
    public $suspend_until_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $internal_comment = null;
    
    /**  @var boolean */
    public $internal_comment_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_PerformCashAccTransact_Ad.Parameters');

      // OPTIONAL MESSAGE person_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL person_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "person_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cash_account_type_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cash_account_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL cash_account_type_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "cash_account_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction_type_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "transaction_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL transaction_type_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "transaction_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction_value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "transaction_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL transaction_value_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "transaction_value_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE transaction_comment = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "transaction_comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL transaction_comment_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "transaction_comment_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL currency_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "currency_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE suspend_until = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "suspend_until";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL suspend_until_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "suspend_until_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE internal_comment = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "internal_comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL internal_comment_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "internal_comment_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearPersonId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(1);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <person_id_null> has a value
     *
     * @return boolean
     */
    public function hasPersonIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <person_id_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearPersonIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <person_id_null> value
     *
     * @return boolean
     */
    public function getPersonIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <person_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setPersonIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <cash_account_type_id> has a value
     *
     * @return boolean
     */
    public function hasCashAccountTypeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cash_account_type_id> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearCashAccountTypeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cash_account_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCashAccountTypeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <cash_account_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setCashAccountTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cash_account_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasCashAccountTypeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <cash_account_type_id_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearCashAccountTypeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <cash_account_type_id_null> value
     *
     * @return boolean
     */
    public function getCashAccountTypeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <cash_account_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setCashAccountTypeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <transaction_type_id> has a value
     *
     * @return boolean
     */
    public function hasTransactionTypeId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <transaction_type_id> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionTypeId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <transaction_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTransactionTypeId(){
      return $this->_get(3);
    }
    
    /**
     * Set <transaction_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <transaction_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasTransactionTypeIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <transaction_type_id_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionTypeIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <transaction_type_id_null> value
     *
     * @return boolean
     */
    public function getTransactionTypeIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <transaction_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionTypeIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <transaction_value> has a value
     *
     * @return boolean
     */
    public function hasTransactionValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <transaction_value> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <transaction_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getTransactionValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <transaction_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <transaction_value_null> has a value
     *
     * @return boolean
     */
    public function hasTransactionValueNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <transaction_value_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionValueNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <transaction_value_null> value
     *
     * @return boolean
     */
    public function getTransactionValueNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <transaction_value_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionValueNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <transaction_comment> has a value
     *
     * @return boolean
     */
    public function hasTransactionComment(){
      return $this->_has(5);
    }
    
    /**
     * Clear <transaction_comment> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionComment(){
      return $this->_clear(5);
    }
    
    /**
     * Get <transaction_comment> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTransactionComment(){
      return $this->_get(5);
    }
    
    /**
     * Set <transaction_comment> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionComment(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <transaction_comment_null> has a value
     *
     * @return boolean
     */
    public function hasTransactionCommentNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <transaction_comment_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearTransactionCommentNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <transaction_comment_null> value
     *
     * @return boolean
     */
    public function getTransactionCommentNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <transaction_comment_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setTransactionCommentNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearCurrencyId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(6);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <currency_id_null> has a value
     *
     * @return boolean
     */
    public function hasCurrencyIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <currency_id_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearCurrencyIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <currency_id_null> value
     *
     * @return boolean
     */
    public function getCurrencyIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <currency_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setCurrencyIdNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <suspend_until> has a value
     *
     * @return boolean
     */
    public function hasSuspendUntil(){
      return $this->_has(7);
    }
    
    /**
     * Clear <suspend_until> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearSuspendUntil(){
      return $this->_clear(7);
    }
    
    /**
     * Get <suspend_until> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getSuspendUntil(){
      return $this->_get(7);
    }
    
    /**
     * Set <suspend_until> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setSuspendUntil(\dstore\engine\values\timestampValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <suspend_until_null> has a value
     *
     * @return boolean
     */
    public function hasSuspendUntilNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <suspend_until_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearSuspendUntilNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <suspend_until_null> value
     *
     * @return boolean
     */
    public function getSuspendUntilNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <suspend_until_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setSuspendUntilNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <internal_comment> has a value
     *
     * @return boolean
     */
    public function hasInternalComment(){
      return $this->_has(8);
    }
    
    /**
     * Clear <internal_comment> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearInternalComment(){
      return $this->_clear(8);
    }
    
    /**
     * Get <internal_comment> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getInternalComment(){
      return $this->_get(8);
    }
    
    /**
     * Set <internal_comment> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setInternalComment(\dstore\engine\values\stringValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <internal_comment_null> has a value
     *
     * @return boolean
     */
    public function hasInternalCommentNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <internal_comment_null> value
     *
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function clearInternalCommentNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <internal_comment_null> value
     *
     * @return boolean
     */
    public function getInternalCommentNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <internal_comment_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_PerformCashAccTransact_Ad\Parameters
     */
    public function setInternalCommentNull( $value){
      return $this->_set(1008, $value);
    }
  }
}

