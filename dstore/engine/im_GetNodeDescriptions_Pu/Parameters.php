<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetNodeDescriptions_Pu.proto
//   Date: 2016-05-19 08:07:42

namespace dstore\engine\im_GetNodeDescriptions_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\stringValue */
    public $node_ids = null;
    
    /**  @var boolean */
    public $node_ids_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $is_tree_node_id = null;
    
    /**  @var boolean */
    public $is_tree_node_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $language_id = null;
    
    /**  @var boolean */
    public $language_id_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $look_for_product_descriptions = null;
    
    /**  @var boolean */
    public $look_for_product_descriptions_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $store_tree_node_ids_in_result = null;
    
    /**  @var boolean */
    public $store_tree_node_ids_in_result_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetNodeDescriptions_Pu.Parameters');

      // OPTIONAL MESSAGE node_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_ids_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "node_ids_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE is_tree_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "is_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL is_tree_node_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "is_tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL language_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "language_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE look_for_product_descriptions = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "look_for_product_descriptions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL look_for_product_descriptions_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "look_for_product_descriptions_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE store_tree_node_ids_in_result = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "store_tree_node_ids_in_result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL store_tree_node_ids_in_result_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "store_tree_node_ids_in_result_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_ids> has a value
     *
     * @return boolean
     */
    public function hasNodeIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_ids> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearNodeIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_ids> value
     *
     * @return \dstore\values\stringValue
     */
    public function getNodeIds(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_ids> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setNodeIds(\dstore\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_ids_null> has a value
     *
     * @return boolean
     */
    public function hasNodeIdsNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <node_ids_null> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearNodeIdsNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <node_ids_null> value
     *
     * @return boolean
     */
    public function getNodeIdsNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <node_ids_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setNodeIdsNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <is_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasIsTreeNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <is_tree_node_id> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearIsTreeNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <is_tree_node_id> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getIsTreeNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <is_tree_node_id> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setIsTreeNodeId(\dstore\values\booleanValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <is_tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasIsTreeNodeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <is_tree_node_id_null> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearIsTreeNodeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <is_tree_node_id_null> value
     *
     * @return boolean
     */
    public function getIsTreeNodeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <is_tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setIsTreeNodeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearLanguageId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(3);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setLanguageId(\dstore\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <language_id_null> has a value
     *
     * @return boolean
     */
    public function hasLanguageIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <language_id_null> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearLanguageIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <language_id_null> value
     *
     * @return boolean
     */
    public function getLanguageIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <language_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setLanguageIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <look_for_product_descriptions> has a value
     *
     * @return boolean
     */
    public function hasLookForProductDescriptions(){
      return $this->_has(4);
    }
    
    /**
     * Clear <look_for_product_descriptions> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearLookForProductDescriptions(){
      return $this->_clear(4);
    }
    
    /**
     * Get <look_for_product_descriptions> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getLookForProductDescriptions(){
      return $this->_get(4);
    }
    
    /**
     * Set <look_for_product_descriptions> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setLookForProductDescriptions(\dstore\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <look_for_product_descriptions_null> has a value
     *
     * @return boolean
     */
    public function hasLookForProductDescriptionsNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <look_for_product_descriptions_null> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearLookForProductDescriptionsNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <look_for_product_descriptions_null> value
     *
     * @return boolean
     */
    public function getLookForProductDescriptionsNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <look_for_product_descriptions_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setLookForProductDescriptionsNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <store_tree_node_ids_in_result> has a value
     *
     * @return boolean
     */
    public function hasStoreTreeNodeIdsInResult(){
      return $this->_has(5);
    }
    
    /**
     * Clear <store_tree_node_ids_in_result> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearStoreTreeNodeIdsInResult(){
      return $this->_clear(5);
    }
    
    /**
     * Get <store_tree_node_ids_in_result> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getStoreTreeNodeIdsInResult(){
      return $this->_get(5);
    }
    
    /**
     * Set <store_tree_node_ids_in_result> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setStoreTreeNodeIdsInResult(\dstore\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <store_tree_node_ids_in_result_null> has a value
     *
     * @return boolean
     */
    public function hasStoreTreeNodeIdsInResultNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <store_tree_node_ids_in_result_null> value
     *
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function clearStoreTreeNodeIdsInResultNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <store_tree_node_ids_in_result_null> value
     *
     * @return boolean
     */
    public function getStoreTreeNodeIdsInResultNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <store_tree_node_ids_in_result_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetNodeDescriptions_Pu\Parameters
     */
    public function setStoreTreeNodeIdsInResultNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

