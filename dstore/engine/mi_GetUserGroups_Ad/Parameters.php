<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetUserGroups_Ad.proto
//   Date: 2015-10-06 11:19:52

namespace dstore\engine\mi_GetUserGroups_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $user_group_id = null;
    
    /**  @var boolean */
    public $user_group_id_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $get_assigned_users = null;
    
    /**  @var boolean */
    public $get_assigned_users_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetUserGroups_Ad.Parameters');

      // OPTIONAL MESSAGE user_group_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user_group_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL user_group_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "user_group_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE get_assigned_users = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "get_assigned_users";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL get_assigned_users_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "get_assigned_users_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user_group_id> has a value
     *
     * @return boolean
     */
    public function hasUserGroupId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user_group_id> value
     *
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function clearUserGroupId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user_group_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUserGroupId(){
      return $this->_get(1);
    }
    
    /**
     * Set <user_group_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function setUserGroupId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user_group_id_null> has a value
     *
     * @return boolean
     */
    public function hasUserGroupIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <user_group_id_null> value
     *
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function clearUserGroupIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <user_group_id_null> value
     *
     * @return boolean
     */
    public function getUserGroupIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <user_group_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function setUserGroupIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <get_assigned_users> has a value
     *
     * @return boolean
     */
    public function hasGetAssignedUsers(){
      return $this->_has(2);
    }
    
    /**
     * Clear <get_assigned_users> value
     *
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function clearGetAssignedUsers(){
      return $this->_clear(2);
    }
    
    /**
     * Get <get_assigned_users> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getGetAssignedUsers(){
      return $this->_get(2);
    }
    
    /**
     * Set <get_assigned_users> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function setGetAssignedUsers(\dstore\engine\values\booleanValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <get_assigned_users_null> has a value
     *
     * @return boolean
     */
    public function hasGetAssignedUsersNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <get_assigned_users_null> value
     *
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function clearGetAssignedUsersNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <get_assigned_users_null> value
     *
     * @return boolean
     */
    public function getGetAssignedUsersNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <get_assigned_users_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetUserGroups_Ad\Parameters
     */
    public function setGetAssignedUsersNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

