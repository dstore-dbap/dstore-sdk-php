<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetBatchJobs_Ad.proto
//   Date: 2015-10-06 11:19:50

namespace dstore\engine\mi_GetBatchJobs_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $status = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $procedure_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $last_call_from_user = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $procedure_name = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $last_run = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetBatchJobs_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "status";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "procedure_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_call_from_user = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "last_call_from_user";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_name = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_run = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "last_run";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <status> has a value
     *
     * @return boolean
     */
    public function hasStatus(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <status> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearStatus(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <status> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getStatus(){
      return $this->_get(10001);
    }
    
    /**
     * Set <status> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setStatus(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <procedure_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <procedure_id> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearProcedureId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <procedure_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getProcedureId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <procedure_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setProcedureId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <last_call_from_user> has a value
     *
     * @return boolean
     */
    public function hasLastCallFromUser(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <last_call_from_user> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearLastCallFromUser(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <last_call_from_user> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLastCallFromUser(){
      return $this->_get(10003);
    }
    
    /**
     * Set <last_call_from_user> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setLastCallFromUser(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearProcedureName(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(10004);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <last_run> has a value
     *
     * @return boolean
     */
    public function hasLastRun(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <last_run> value
     *
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function clearLastRun(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <last_run> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLastRun(){
      return $this->_get(10005);
    }
    
    /**
     * Set <last_run> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetBatchJobs_Ad\Response\Row
     */
    public function setLastRun(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
  }
}

