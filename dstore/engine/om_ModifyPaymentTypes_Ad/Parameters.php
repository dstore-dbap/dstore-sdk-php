<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_ModifyPaymentTypes_Ad.proto
//   Date: 2015-08-17 11:45:23

namespace dstore\engine\om_ModifyPaymentTypes_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $payment_type_id = null;
    
    /**  @var boolean */
    public $payment_type_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $payment_type_description = null;
    
    /**  @var boolean */
    public $payment_type_description_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $region_id = null;
    
    /**  @var boolean */
    public $region_id_null = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $brutto_sum_from = null;
    
    /**  @var boolean */
    public $brutto_sum_from_null = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $brutto_sum_to = null;
    
    /**  @var boolean */
    public $brutto_sum_to_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var boolean */
    public $currency_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var boolean */
    public $surcharge_type_id_null = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $cost = null;
    
    /**  @var boolean */
    public $cost_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete_payment_type = null;
    
    /**  @var boolean */
    public $delete_payment_type_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $active = null;
    
    /**  @var boolean */
    public $active_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $predef_bill_content_description = null;
    
    /**  @var boolean */
    public $predef_bill_content_description_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_ModifyPaymentTypes_Ad.Parameters');

      // OPTIONAL MESSAGE payment_type_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "payment_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL payment_type_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "payment_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "payment_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL payment_type_description_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "payment_type_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE region_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "region_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL region_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "region_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE brutto_sum_from = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "brutto_sum_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL brutto_sum_from_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "brutto_sum_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE brutto_sum_to = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "brutto_sum_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL brutto_sum_to_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "brutto_sum_to_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL currency_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "currency_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL surcharge_type_id_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "surcharge_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cost = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL cost_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "cost_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_payment_type = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "delete_payment_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_payment_type_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "delete_payment_type_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL active_null = 1010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1010;
      $f->name      = "active_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predef_bill_content_description = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "predef_bill_content_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL predef_bill_content_description_null = 1011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1011;
      $f->name      = "predef_bill_content_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <payment_type_id> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <payment_type_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPaymentTypeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <payment_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPaymentTypeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <payment_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPaymentTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <payment_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <payment_type_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPaymentTypeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <payment_type_id_null> value
     *
     * @return boolean
     */
    public function getPaymentTypeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <payment_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPaymentTypeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <payment_type_description> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <payment_type_description> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPaymentTypeDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <payment_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPaymentTypeDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <payment_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPaymentTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <payment_type_description_null> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeDescriptionNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <payment_type_description_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPaymentTypeDescriptionNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <payment_type_description_null> value
     *
     * @return boolean
     */
    public function getPaymentTypeDescriptionNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <payment_type_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPaymentTypeDescriptionNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <region_id> has a value
     *
     * @return boolean
     */
    public function hasRegionId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <region_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearRegionId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <region_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRegionId(){
      return $this->_get(3);
    }
    
    /**
     * Set <region_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setRegionId(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <region_id_null> has a value
     *
     * @return boolean
     */
    public function hasRegionIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <region_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearRegionIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <region_id_null> value
     *
     * @return boolean
     */
    public function getRegionIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <region_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setRegionIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <brutto_sum_from> has a value
     *
     * @return boolean
     */
    public function hasBruttoSumFrom(){
      return $this->_has(4);
    }
    
    /**
     * Clear <brutto_sum_from> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearBruttoSumFrom(){
      return $this->_clear(4);
    }
    
    /**
     * Get <brutto_sum_from> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getBruttoSumFrom(){
      return $this->_get(4);
    }
    
    /**
     * Set <brutto_sum_from> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setBruttoSumFrom(\dstore\engine\values\decimalValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <brutto_sum_from_null> has a value
     *
     * @return boolean
     */
    public function hasBruttoSumFromNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <brutto_sum_from_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearBruttoSumFromNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <brutto_sum_from_null> value
     *
     * @return boolean
     */
    public function getBruttoSumFromNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <brutto_sum_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setBruttoSumFromNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <brutto_sum_to> has a value
     *
     * @return boolean
     */
    public function hasBruttoSumTo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <brutto_sum_to> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearBruttoSumTo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <brutto_sum_to> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getBruttoSumTo(){
      return $this->_get(5);
    }
    
    /**
     * Set <brutto_sum_to> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setBruttoSumTo(\dstore\engine\values\decimalValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <brutto_sum_to_null> has a value
     *
     * @return boolean
     */
    public function hasBruttoSumToNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <brutto_sum_to_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearBruttoSumToNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <brutto_sum_to_null> value
     *
     * @return boolean
     */
    public function getBruttoSumToNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <brutto_sum_to_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setBruttoSumToNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearCurrencyId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(6);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <currency_id_null> has a value
     *
     * @return boolean
     */
    public function hasCurrencyIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <currency_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearCurrencyIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <currency_id_null> value
     *
     * @return boolean
     */
    public function getCurrencyIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <currency_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setCurrencyIdNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(7);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setSurchargeTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <surcharge_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeIdNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <surcharge_type_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearSurchargeTypeIdNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <surcharge_type_id_null> value
     *
     * @return boolean
     */
    public function getSurchargeTypeIdNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <surcharge_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setSurchargeTypeIdNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <cost> has a value
     *
     * @return boolean
     */
    public function hasCost(){
      return $this->_has(8);
    }
    
    /**
     * Clear <cost> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearCost(){
      return $this->_clear(8);
    }
    
    /**
     * Get <cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getCost(){
      return $this->_get(8);
    }
    
    /**
     * Set <cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <cost_null> has a value
     *
     * @return boolean
     */
    public function hasCostNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <cost_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearCostNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <cost_null> value
     *
     * @return boolean
     */
    public function getCostNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <cost_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setCostNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <delete_payment_type> has a value
     *
     * @return boolean
     */
    public function hasDeletePaymentType(){
      return $this->_has(9);
    }
    
    /**
     * Clear <delete_payment_type> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearDeletePaymentType(){
      return $this->_clear(9);
    }
    
    /**
     * Get <delete_payment_type> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeletePaymentType(){
      return $this->_get(9);
    }
    
    /**
     * Set <delete_payment_type> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setDeletePaymentType(\dstore\engine\values\booleanValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <delete_payment_type_null> has a value
     *
     * @return boolean
     */
    public function hasDeletePaymentTypeNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <delete_payment_type_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearDeletePaymentTypeNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <delete_payment_type_null> value
     *
     * @return boolean
     */
    public function getDeletePaymentTypeNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <delete_payment_type_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setDeletePaymentTypeNull( $value){
      return $this->_set(1009, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(10);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearActive(){
      return $this->_clear(10);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getActive(){
      return $this->_get(10);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <active_null> has a value
     *
     * @return boolean
     */
    public function hasActiveNull(){
      return $this->_has(1010);
    }
    
    /**
     * Clear <active_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearActiveNull(){
      return $this->_clear(1010);
    }
    
    /**
     * Get <active_null> value
     *
     * @return boolean
     */
    public function getActiveNull(){
      return $this->_get(1010);
    }
    
    /**
     * Set <active_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setActiveNull( $value){
      return $this->_set(1010, $value);
    }
    
    /**
     * Check if <predef_bill_content_description> has a value
     *
     * @return boolean
     */
    public function hasPredefBillContentDescription(){
      return $this->_has(11);
    }
    
    /**
     * Clear <predef_bill_content_description> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPredefBillContentDescription(){
      return $this->_clear(11);
    }
    
    /**
     * Get <predef_bill_content_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPredefBillContentDescription(){
      return $this->_get(11);
    }
    
    /**
     * Set <predef_bill_content_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPredefBillContentDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <predef_bill_content_description_null> has a value
     *
     * @return boolean
     */
    public function hasPredefBillContentDescriptionNull(){
      return $this->_has(1011);
    }
    
    /**
     * Clear <predef_bill_content_description_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function clearPredefBillContentDescriptionNull(){
      return $this->_clear(1011);
    }
    
    /**
     * Get <predef_bill_content_description_null> value
     *
     * @return boolean
     */
    public function getPredefBillContentDescriptionNull(){
      return $this->_get(1011);
    }
    
    /**
     * Set <predef_bill_content_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypes_Ad\Parameters
     */
    public function setPredefBillContentDescriptionNull( $value){
      return $this->_set(1011, $value);
    }
  }
}

