<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetIndexDLL_Ad.proto
//   Date: 2015-10-06 11:19:51

namespace dstore\engine\mi_GetIndexDLL_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $table_name = null;
    
    /**  @var boolean */
    public $table_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $index_name = null;
    
    /**  @var boolean */
    public $index_name_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetIndexDLL_Ad.Parameters');

      // OPTIONAL MESSAGE table_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL table_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "table_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE index_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "index_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL index_name_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "index_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function clearTableName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <table_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTableName(){
      return $this->_get(1);
    }
    
    /**
     * Set <table_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function setTableName(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <table_name_null> has a value
     *
     * @return boolean
     */
    public function hasTableNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <table_name_null> value
     *
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function clearTableNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <table_name_null> value
     *
     * @return boolean
     */
    public function getTableNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <table_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function setTableNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <index_name> has a value
     *
     * @return boolean
     */
    public function hasIndexName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <index_name> value
     *
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function clearIndexName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <index_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getIndexName(){
      return $this->_get(2);
    }
    
    /**
     * Set <index_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function setIndexName(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <index_name_null> has a value
     *
     * @return boolean
     */
    public function hasIndexNameNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <index_name_null> value
     *
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function clearIndexNameNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <index_name_null> value
     *
     * @return boolean
     */
    public function getIndexNameNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <index_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetIndexDLL_Ad\Parameters
     */
    public function setIndexNameNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

