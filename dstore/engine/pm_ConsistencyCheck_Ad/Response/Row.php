<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto
//   Date: 2015-08-17 11:45:23

namespace dstore\engine\pm_ConsistencyCheck_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_characteristic_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $value_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $used_by_person_type__bitmap = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $sort_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $correct__used_by_person_type__btmp = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $wrong__used_by_person_type__btmp = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $wrong__count_values = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $first_four_characters_lower_case = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $correct__count_values = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $correct__count_persons = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $inconsistence_type = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $wrong__count_persons = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_type_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value_lowercase = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.pm_ConsistencyCheck_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_characteristic_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "person_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE used_by_person_type__bitmap = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "used_by_person_type__bitmap";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE correct__used_by_person_type__btmp = 20001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20001;
      $f->name      = "correct__used_by_person_type__btmp";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE wrong__used_by_person_type__btmp = 20005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20005;
      $f->name      = "wrong__used_by_person_type__btmp";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE wrong__count_values = 30001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30001;
      $f->name      = "wrong__count_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE first_four_characters_lower_case = 30002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30002;
      $f->name      = "first_four_characters_lower_case";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE correct__count_values = 30004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30004;
      $f->name      = "correct__count_values";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE correct__count_persons = 30005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30005;
      $f->name      = "correct__count_persons";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inconsistence_type = 30006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30006;
      $f->name      = "inconsistence_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE wrong__count_persons = 30007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30007;
      $f->name      = "wrong__count_persons";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_type_id = 30008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30008;
      $f->name      = "person_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_lowercase = 40001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40001;
      $f->name      = "value_lowercase";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 40002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 40002;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <person_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasPersonCharacteristicId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <person_characteristic_id> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearPersonCharacteristicId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <person_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonCharacteristicId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <person_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setPersonCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearValue(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue(){
      return $this->_get(10002);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setValue(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <value_id> has a value
     *
     * @return boolean
     */
    public function hasValueId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <value_id> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearValueId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <value_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getValueId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <value_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setValueId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <used_by_person_type__bitmap> has a value
     *
     * @return boolean
     */
    public function hasUsedByPersonType_Bitmap(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <used_by_person_type__bitmap> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearUsedByPersonType_Bitmap(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <used_by_person_type__bitmap> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUsedByPersonType_Bitmap(){
      return $this->_get(10004);
    }
    
    /**
     * Set <used_by_person_type__bitmap> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setUsedByPersonType_Bitmap(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearSortNo(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSortNo(){
      return $this->_get(10005);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <correct__used_by_person_type__btmp> has a value
     *
     * @return boolean
     */
    public function hasCorrect_UsedByPersonType_Btmp(){
      return $this->_has(20001);
    }
    
    /**
     * Clear <correct__used_by_person_type__btmp> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearCorrect_UsedByPersonType_Btmp(){
      return $this->_clear(20001);
    }
    
    /**
     * Get <correct__used_by_person_type__btmp> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCorrect_UsedByPersonType_Btmp(){
      return $this->_get(20001);
    }
    
    /**
     * Set <correct__used_by_person_type__btmp> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setCorrect_UsedByPersonType_Btmp(\dstore\engine\values\integerValue $value){
      return $this->_set(20001, $value);
    }
    
    /**
     * Check if <wrong__used_by_person_type__btmp> has a value
     *
     * @return boolean
     */
    public function hasWrong_UsedByPersonType_Btmp(){
      return $this->_has(20005);
    }
    
    /**
     * Clear <wrong__used_by_person_type__btmp> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearWrong_UsedByPersonType_Btmp(){
      return $this->_clear(20005);
    }
    
    /**
     * Get <wrong__used_by_person_type__btmp> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getWrong_UsedByPersonType_Btmp(){
      return $this->_get(20005);
    }
    
    /**
     * Set <wrong__used_by_person_type__btmp> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setWrong_UsedByPersonType_Btmp(\dstore\engine\values\integerValue $value){
      return $this->_set(20005, $value);
    }
    
    /**
     * Check if <wrong__count_values> has a value
     *
     * @return boolean
     */
    public function hasWrong_CountValues(){
      return $this->_has(30001);
    }
    
    /**
     * Clear <wrong__count_values> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearWrong_CountValues(){
      return $this->_clear(30001);
    }
    
    /**
     * Get <wrong__count_values> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getWrong_CountValues(){
      return $this->_get(30001);
    }
    
    /**
     * Set <wrong__count_values> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setWrong_CountValues(\dstore\engine\values\integerValue $value){
      return $this->_set(30001, $value);
    }
    
    /**
     * Check if <first_four_characters_lower_case> has a value
     *
     * @return boolean
     */
    public function hasFirstFourCharactersLowerCase(){
      return $this->_has(30002);
    }
    
    /**
     * Clear <first_four_characters_lower_case> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearFirstFourCharactersLowerCase(){
      return $this->_clear(30002);
    }
    
    /**
     * Get <first_four_characters_lower_case> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getFirstFourCharactersLowerCase(){
      return $this->_get(30002);
    }
    
    /**
     * Set <first_four_characters_lower_case> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setFirstFourCharactersLowerCase(\dstore\engine\values\stringValue $value){
      return $this->_set(30002, $value);
    }
    
    /**
     * Check if <correct__count_values> has a value
     *
     * @return boolean
     */
    public function hasCorrect_CountValues(){
      return $this->_has(30004);
    }
    
    /**
     * Clear <correct__count_values> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearCorrect_CountValues(){
      return $this->_clear(30004);
    }
    
    /**
     * Get <correct__count_values> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCorrect_CountValues(){
      return $this->_get(30004);
    }
    
    /**
     * Set <correct__count_values> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setCorrect_CountValues(\dstore\engine\values\integerValue $value){
      return $this->_set(30004, $value);
    }
    
    /**
     * Check if <correct__count_persons> has a value
     *
     * @return boolean
     */
    public function hasCorrect_CountPersons(){
      return $this->_has(30005);
    }
    
    /**
     * Clear <correct__count_persons> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearCorrect_CountPersons(){
      return $this->_clear(30005);
    }
    
    /**
     * Get <correct__count_persons> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCorrect_CountPersons(){
      return $this->_get(30005);
    }
    
    /**
     * Set <correct__count_persons> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setCorrect_CountPersons(\dstore\engine\values\integerValue $value){
      return $this->_set(30005, $value);
    }
    
    /**
     * Check if <inconsistence_type> has a value
     *
     * @return boolean
     */
    public function hasInconsistenceType(){
      return $this->_has(30006);
    }
    
    /**
     * Clear <inconsistence_type> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearInconsistenceType(){
      return $this->_clear(30006);
    }
    
    /**
     * Get <inconsistence_type> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInconsistenceType(){
      return $this->_get(30006);
    }
    
    /**
     * Set <inconsistence_type> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setInconsistenceType(\dstore\engine\values\integerValue $value){
      return $this->_set(30006, $value);
    }
    
    /**
     * Check if <wrong__count_persons> has a value
     *
     * @return boolean
     */
    public function hasWrong_CountPersons(){
      return $this->_has(30007);
    }
    
    /**
     * Clear <wrong__count_persons> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearWrong_CountPersons(){
      return $this->_clear(30007);
    }
    
    /**
     * Get <wrong__count_persons> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getWrong_CountPersons(){
      return $this->_get(30007);
    }
    
    /**
     * Set <wrong__count_persons> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setWrong_CountPersons(\dstore\engine\values\integerValue $value){
      return $this->_set(30007, $value);
    }
    
    /**
     * Check if <person_type_id> has a value
     *
     * @return boolean
     */
    public function hasPersonTypeId(){
      return $this->_has(30008);
    }
    
    /**
     * Clear <person_type_id> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearPersonTypeId(){
      return $this->_clear(30008);
    }
    
    /**
     * Get <person_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonTypeId(){
      return $this->_get(30008);
    }
    
    /**
     * Set <person_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setPersonTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(30008, $value);
    }
    
    /**
     * Check if <value_lowercase> has a value
     *
     * @return boolean
     */
    public function hasValueLowercase(){
      return $this->_has(40001);
    }
    
    /**
     * Clear <value_lowercase> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearValueLowercase(){
      return $this->_clear(40001);
    }
    
    /**
     * Get <value_lowercase> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValueLowercase(){
      return $this->_get(40001);
    }
    
    /**
     * Set <value_lowercase> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setValueLowercase(\dstore\engine\values\stringValue $value){
      return $this->_set(40001, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(40002);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function clearPersonId(){
      return $this->_clear(40002);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(40002);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_ConsistencyCheck_Ad\Response\Row
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(40002, $value);
    }
  }
}

