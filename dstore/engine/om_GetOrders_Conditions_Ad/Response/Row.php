<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetOrders_Conditions_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\om_GetOrders_Conditions_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_date_and_time = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $payment_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $delivery_date_and_time = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $last_edited_by_user_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $charac_val2_restr_by_pattern = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $valid_content_net_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_valid_content_net_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $payment_type_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $position_count = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_state_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $shipping_type_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_type_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_computed_gross_sum = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $has_valid_contents = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_payment_cost = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $delivery_person_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $shipping_type_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $unit_symbol = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_payment_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $customer_characteristic_value2 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $public_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $customer_characteristic_value1 = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $computed_gross_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $charac_val1_restr_by_pattern = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $payment_type_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_valid_content_gross_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_computed_net_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_state = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $computed_net_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $valid_content_gross_sum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetOrders_Conditions_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_date_and_time = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "order_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_cost = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_date_and_time = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "delivery_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_shipping_cost = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_no = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "order_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_edited_by_user_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "last_edited_by_user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_shipping_cost = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "precise_net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charac_val2_restr_by_pattern = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "charac_val2_restr_by_pattern";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_sum = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_content_net_sum = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "valid_content_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_valid_content_net_sum = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "precise_valid_content_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_description = 10014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10014;
      $f->name      = "payment_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_sum = 10015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10015;
      $f->name      = "precise_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE position_count = 10016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10016;
      $f->name      = "position_count";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_state_id = 10017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10017;
      $f->name      = "order_state_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_id = 10018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10018;
      $f->name      = "shipping_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_type_id = 10019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10019;
      $f->name      = "person_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_computed_gross_sum = 10020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10020;
      $f->name      = "precise_computed_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE has_valid_contents = 10021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10021;
      $f->name      = "has_valid_contents";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_payment_cost = 10022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10022;
      $f->name      = "net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_person_id = 10023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10023;
      $f->name      = "delivery_person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_description = 10024
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10024;
      $f->name      = "shipping_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_sum = 10025
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10025;
      $f->name      = "gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_symbol = 10026
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10026;
      $f->name      = "unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_payment_cost = 10027
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10027;
      $f->name      = "precise_net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE customer_characteristic_value2 = 10028
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10028;
      $f->name      = "customer_characteristic_value2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE public_description = 10029
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10029;
      $f->name      = "public_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 10030
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10030;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE customer_characteristic_value1 = 10031
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10031;
      $f->name      = "customer_characteristic_value1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_sum = 10032
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10032;
      $f->name      = "precise_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE computed_gross_sum = 10033
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10033;
      $f->name      = "computed_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_cost = 10034
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10034;
      $f->name      = "shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charac_val1_restr_by_pattern = 10035
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10035;
      $f->name      = "charac_val1_restr_by_pattern";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_id = 10036
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10036;
      $f->name      = "payment_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_valid_content_gross_sum = 10037
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10037;
      $f->name      = "precise_valid_content_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_computed_net_sum = 10038
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10038;
      $f->name      = "precise_computed_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_state = 10039
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10039;
      $f->name      = "order_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE computed_net_sum = 10040
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10040;
      $f->name      = "computed_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_content_gross_sum = 10041
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10041;
      $f->name      = "valid_content_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <order_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasOrderDateAndTime(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <order_date_and_time> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearOrderDateAndTime(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <order_date_and_time> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderDateAndTime(){
      return $this->_get(10001);
    }
    
    /**
     * Set <order_date_and_time> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setOrderDateAndTime(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPaymentCost(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPaymentCost(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPaymentCost(){
      return $this->_get(10002);
    }
    
    /**
     * Set <payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <delivery_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasDeliveryDateAndTime(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <delivery_date_and_time> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearDeliveryDateAndTime(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <delivery_date_and_time> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDeliveryDateAndTime(){
      return $this->_get(10003);
    }
    
    /**
     * Set <delivery_date_and_time> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setDeliveryDateAndTime(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasNetShippingCost(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <net_shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearNetShippingCost(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetShippingCost(){
      return $this->_get(10004);
    }
    
    /**
     * Set <net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <order_no> has a value
     *
     * @return boolean
     */
    public function hasOrderNo(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <order_no> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearOrderNo(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <order_no> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderNo(){
      return $this->_get(10005);
    }
    
    /**
     * Set <order_no> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setOrderNo(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <last_edited_by_user_id> has a value
     *
     * @return boolean
     */
    public function hasLastEditedByUserId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <last_edited_by_user_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearLastEditedByUserId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <last_edited_by_user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLastEditedByUserId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <last_edited_by_user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setLastEditedByUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <order_id> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <order_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearOrderId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <order_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <order_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setOrderId(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <precise_net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetShippingCost(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseNetShippingCost(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetShippingCost(){
      return $this->_get(10008);
    }
    
    /**
     * Set <precise_net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <charac_val2_restr_by_pattern> has a value
     *
     * @return boolean
     */
    public function hasCharacVal2RestrByPattern(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <charac_val2_restr_by_pattern> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearCharacVal2RestrByPattern(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <charac_val2_restr_by_pattern> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCharacVal2RestrByPattern(){
      return $this->_get(10009);
    }
    
    /**
     * Set <charac_val2_restr_by_pattern> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setCharacVal2RestrByPattern(\dstore\engine\values\stringValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <net_sum> has a value
     *
     * @return boolean
     */
    public function hasNetSum(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearNetSum(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetSum(){
      return $this->_get(10010);
    }
    
    /**
     * Set <net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <valid_content_net_sum> has a value
     *
     * @return boolean
     */
    public function hasValidContentNetSum(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <valid_content_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearValidContentNetSum(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <valid_content_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getValidContentNetSum(){
      return $this->_get(10011);
    }
    
    /**
     * Set <valid_content_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setValidContentNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <precise_valid_content_net_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseValidContentNetSum(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <precise_valid_content_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseValidContentNetSum(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <precise_valid_content_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseValidContentNetSum(){
      return $this->_get(10012);
    }
    
    /**
     * Set <precise_valid_content_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseValidContentNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPersonId(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(10013);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10013, $value);
    }
    
    /**
     * Check if <payment_type_description> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeDescription(){
      return $this->_has(10014);
    }
    
    /**
     * Clear <payment_type_description> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPaymentTypeDescription(){
      return $this->_clear(10014);
    }
    
    /**
     * Get <payment_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPaymentTypeDescription(){
      return $this->_get(10014);
    }
    
    /**
     * Set <payment_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPaymentTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10014, $value);
    }
    
    /**
     * Check if <precise_net_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetSum(){
      return $this->_has(10015);
    }
    
    /**
     * Clear <precise_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseNetSum(){
      return $this->_clear(10015);
    }
    
    /**
     * Get <precise_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetSum(){
      return $this->_get(10015);
    }
    
    /**
     * Set <precise_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10015, $value);
    }
    
    /**
     * Check if <position_count> has a value
     *
     * @return boolean
     */
    public function hasPositionCount(){
      return $this->_has(10016);
    }
    
    /**
     * Clear <position_count> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPositionCount(){
      return $this->_clear(10016);
    }
    
    /**
     * Get <position_count> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPositionCount(){
      return $this->_get(10016);
    }
    
    /**
     * Set <position_count> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPositionCount(\dstore\engine\values\integerValue $value){
      return $this->_set(10016, $value);
    }
    
    /**
     * Check if <order_state_id> has a value
     *
     * @return boolean
     */
    public function hasOrderStateId(){
      return $this->_has(10017);
    }
    
    /**
     * Clear <order_state_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearOrderStateId(){
      return $this->_clear(10017);
    }
    
    /**
     * Get <order_state_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderStateId(){
      return $this->_get(10017);
    }
    
    /**
     * Set <order_state_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setOrderStateId(\dstore\engine\values\integerValue $value){
      return $this->_set(10017, $value);
    }
    
    /**
     * Check if <shipping_type_id> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeId(){
      return $this->_has(10018);
    }
    
    /**
     * Clear <shipping_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearShippingTypeId(){
      return $this->_clear(10018);
    }
    
    /**
     * Get <shipping_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getShippingTypeId(){
      return $this->_get(10018);
    }
    
    /**
     * Set <shipping_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setShippingTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10018, $value);
    }
    
    /**
     * Check if <person_type_id> has a value
     *
     * @return boolean
     */
    public function hasPersonTypeId(){
      return $this->_has(10019);
    }
    
    /**
     * Clear <person_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPersonTypeId(){
      return $this->_clear(10019);
    }
    
    /**
     * Get <person_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonTypeId(){
      return $this->_get(10019);
    }
    
    /**
     * Set <person_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPersonTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10019, $value);
    }
    
    /**
     * Check if <precise_computed_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseComputedGrossSum(){
      return $this->_has(10020);
    }
    
    /**
     * Clear <precise_computed_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseComputedGrossSum(){
      return $this->_clear(10020);
    }
    
    /**
     * Get <precise_computed_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseComputedGrossSum(){
      return $this->_get(10020);
    }
    
    /**
     * Set <precise_computed_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseComputedGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10020, $value);
    }
    
    /**
     * Check if <has_valid_contents> has a value
     *
     * @return boolean
     */
    public function hasHasValidContents(){
      return $this->_has(10021);
    }
    
    /**
     * Clear <has_valid_contents> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearHasValidContents(){
      return $this->_clear(10021);
    }
    
    /**
     * Get <has_valid_contents> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getHasValidContents(){
      return $this->_get(10021);
    }
    
    /**
     * Set <has_valid_contents> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setHasValidContents(\dstore\engine\values\booleanValue $value){
      return $this->_set(10021, $value);
    }
    
    /**
     * Check if <net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasNetPaymentCost(){
      return $this->_has(10022);
    }
    
    /**
     * Clear <net_payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearNetPaymentCost(){
      return $this->_clear(10022);
    }
    
    /**
     * Get <net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetPaymentCost(){
      return $this->_get(10022);
    }
    
    /**
     * Set <net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10022, $value);
    }
    
    /**
     * Check if <delivery_person_id> has a value
     *
     * @return boolean
     */
    public function hasDeliveryPersonId(){
      return $this->_has(10023);
    }
    
    /**
     * Clear <delivery_person_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearDeliveryPersonId(){
      return $this->_clear(10023);
    }
    
    /**
     * Get <delivery_person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDeliveryPersonId(){
      return $this->_get(10023);
    }
    
    /**
     * Set <delivery_person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setDeliveryPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10023, $value);
    }
    
    /**
     * Check if <shipping_type_description> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeDescription(){
      return $this->_has(10024);
    }
    
    /**
     * Clear <shipping_type_description> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearShippingTypeDescription(){
      return $this->_clear(10024);
    }
    
    /**
     * Get <shipping_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getShippingTypeDescription(){
      return $this->_get(10024);
    }
    
    /**
     * Set <shipping_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setShippingTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10024, $value);
    }
    
    /**
     * Check if <gross_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossSum(){
      return $this->_has(10025);
    }
    
    /**
     * Clear <gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearGrossSum(){
      return $this->_clear(10025);
    }
    
    /**
     * Get <gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossSum(){
      return $this->_get(10025);
    }
    
    /**
     * Set <gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10025, $value);
    }
    
    /**
     * Check if <unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasUnitSymbol(){
      return $this->_has(10026);
    }
    
    /**
     * Clear <unit_symbol> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearUnitSymbol(){
      return $this->_clear(10026);
    }
    
    /**
     * Get <unit_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUnitSymbol(){
      return $this->_get(10026);
    }
    
    /**
     * Set <unit_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setUnitSymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10026, $value);
    }
    
    /**
     * Check if <precise_net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetPaymentCost(){
      return $this->_has(10027);
    }
    
    /**
     * Clear <precise_net_payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseNetPaymentCost(){
      return $this->_clear(10027);
    }
    
    /**
     * Get <precise_net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetPaymentCost(){
      return $this->_get(10027);
    }
    
    /**
     * Set <precise_net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10027, $value);
    }
    
    /**
     * Check if <customer_characteristic_value2> has a value
     *
     * @return boolean
     */
    public function hasCustomerCharacteristicValue2(){
      return $this->_has(10028);
    }
    
    /**
     * Clear <customer_characteristic_value2> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearCustomerCharacteristicValue2(){
      return $this->_clear(10028);
    }
    
    /**
     * Get <customer_characteristic_value2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCustomerCharacteristicValue2(){
      return $this->_get(10028);
    }
    
    /**
     * Set <customer_characteristic_value2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setCustomerCharacteristicValue2(\dstore\engine\values\stringValue $value){
      return $this->_set(10028, $value);
    }
    
    /**
     * Check if <public_description> has a value
     *
     * @return boolean
     */
    public function hasPublicDescription(){
      return $this->_has(10029);
    }
    
    /**
     * Clear <public_description> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPublicDescription(){
      return $this->_clear(10029);
    }
    
    /**
     * Get <public_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPublicDescription(){
      return $this->_get(10029);
    }
    
    /**
     * Set <public_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPublicDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10029, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(10030);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearCurrencyId(){
      return $this->_clear(10030);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(10030);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10030, $value);
    }
    
    /**
     * Check if <customer_characteristic_value1> has a value
     *
     * @return boolean
     */
    public function hasCustomerCharacteristicValue1(){
      return $this->_has(10031);
    }
    
    /**
     * Clear <customer_characteristic_value1> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearCustomerCharacteristicValue1(){
      return $this->_clear(10031);
    }
    
    /**
     * Get <customer_characteristic_value1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCustomerCharacteristicValue1(){
      return $this->_get(10031);
    }
    
    /**
     * Set <customer_characteristic_value1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setCustomerCharacteristicValue1(\dstore\engine\values\stringValue $value){
      return $this->_set(10031, $value);
    }
    
    /**
     * Check if <precise_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossSum(){
      return $this->_has(10032);
    }
    
    /**
     * Clear <precise_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseGrossSum(){
      return $this->_clear(10032);
    }
    
    /**
     * Get <precise_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossSum(){
      return $this->_get(10032);
    }
    
    /**
     * Set <precise_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10032, $value);
    }
    
    /**
     * Check if <computed_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasComputedGrossSum(){
      return $this->_has(10033);
    }
    
    /**
     * Clear <computed_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearComputedGrossSum(){
      return $this->_clear(10033);
    }
    
    /**
     * Get <computed_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getComputedGrossSum(){
      return $this->_get(10033);
    }
    
    /**
     * Set <computed_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setComputedGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10033, $value);
    }
    
    /**
     * Check if <shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasShippingCost(){
      return $this->_has(10034);
    }
    
    /**
     * Clear <shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearShippingCost(){
      return $this->_clear(10034);
    }
    
    /**
     * Get <shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getShippingCost(){
      return $this->_get(10034);
    }
    
    /**
     * Set <shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10034, $value);
    }
    
    /**
     * Check if <charac_val1_restr_by_pattern> has a value
     *
     * @return boolean
     */
    public function hasCharacVal1RestrByPattern(){
      return $this->_has(10035);
    }
    
    /**
     * Clear <charac_val1_restr_by_pattern> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearCharacVal1RestrByPattern(){
      return $this->_clear(10035);
    }
    
    /**
     * Get <charac_val1_restr_by_pattern> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCharacVal1RestrByPattern(){
      return $this->_get(10035);
    }
    
    /**
     * Set <charac_val1_restr_by_pattern> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setCharacVal1RestrByPattern(\dstore\engine\values\stringValue $value){
      return $this->_set(10035, $value);
    }
    
    /**
     * Check if <payment_type_id> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeId(){
      return $this->_has(10036);
    }
    
    /**
     * Clear <payment_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPaymentTypeId(){
      return $this->_clear(10036);
    }
    
    /**
     * Get <payment_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPaymentTypeId(){
      return $this->_get(10036);
    }
    
    /**
     * Set <payment_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPaymentTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10036, $value);
    }
    
    /**
     * Check if <precise_valid_content_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseValidContentGrossSum(){
      return $this->_has(10037);
    }
    
    /**
     * Clear <precise_valid_content_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseValidContentGrossSum(){
      return $this->_clear(10037);
    }
    
    /**
     * Get <precise_valid_content_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseValidContentGrossSum(){
      return $this->_get(10037);
    }
    
    /**
     * Set <precise_valid_content_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseValidContentGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10037, $value);
    }
    
    /**
     * Check if <precise_computed_net_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseComputedNetSum(){
      return $this->_has(10038);
    }
    
    /**
     * Clear <precise_computed_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearPreciseComputedNetSum(){
      return $this->_clear(10038);
    }
    
    /**
     * Get <precise_computed_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseComputedNetSum(){
      return $this->_get(10038);
    }
    
    /**
     * Set <precise_computed_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setPreciseComputedNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10038, $value);
    }
    
    /**
     * Check if <order_state> has a value
     *
     * @return boolean
     */
    public function hasOrderState(){
      return $this->_has(10039);
    }
    
    /**
     * Clear <order_state> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearOrderState(){
      return $this->_clear(10039);
    }
    
    /**
     * Get <order_state> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderState(){
      return $this->_get(10039);
    }
    
    /**
     * Set <order_state> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setOrderState(\dstore\engine\values\stringValue $value){
      return $this->_set(10039, $value);
    }
    
    /**
     * Check if <computed_net_sum> has a value
     *
     * @return boolean
     */
    public function hasComputedNetSum(){
      return $this->_has(10040);
    }
    
    /**
     * Clear <computed_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearComputedNetSum(){
      return $this->_clear(10040);
    }
    
    /**
     * Get <computed_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getComputedNetSum(){
      return $this->_get(10040);
    }
    
    /**
     * Set <computed_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setComputedNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10040, $value);
    }
    
    /**
     * Check if <valid_content_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasValidContentGrossSum(){
      return $this->_has(10041);
    }
    
    /**
     * Clear <valid_content_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function clearValidContentGrossSum(){
      return $this->_clear(10041);
    }
    
    /**
     * Get <valid_content_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getValidContentGrossSum(){
      return $this->_get(10041);
    }
    
    /**
     * Set <valid_content_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Conditions_Ad\Response\Row
     */
    public function setValidContentGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10041, $value);
    }
  }
}

