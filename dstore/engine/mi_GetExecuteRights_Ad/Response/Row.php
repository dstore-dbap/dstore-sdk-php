<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetExecuteRights_Ad.proto
//   Date: 2016-05-19 08:07:45

namespace dstore\engine\mi_GetExecuteRights_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\booleanValue */
    public $procedure_exists = null;
    
    /**  @var \dstore\values\integerValue */
    public $user_exec_right_on_database_level = null;
    
    /**  @var \dstore\values\integerValue */
    public $public_exec_right_on_database_level = null;
    
    /**  @var \dstore\values\integerValue */
    public $procedure_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $user_name = null;
    
    /**  @var \dstore\values\booleanValue */
    public $group_exec_right_ondstore_level = null;
    
    /**  @var \dstore\values\stringValue */
    public $procedure_name = null;
    
    /**  @var \dstore\values\integerValue */
    public $user_id = null;
    
    /**  @var \dstore\values\booleanValue */
    public $execute_right = null;
    
    /**  @var \dstore\values\stringValue */
    public $procedure_function = null;
    
    /**  @var \dstore\values\integerValue */
    public $user_exec_right_ondstore_level = null;
    
    /**  @var \dstore\values\integerValue */
    public $group_exec_right_on_database_level = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetExecuteRights_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_exists = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "procedure_exists";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_exec_right_on_database_level = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "user_exec_right_on_database_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE public_exec_right_on_database_level = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "public_exec_right_on_database_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "procedure_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_name = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE group_exec_right_ondstore_level = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "group_exec_right_ondstore_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_name = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE execute_right = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "execute_right";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_function = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "procedure_function";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_exec_right_ondstore_level = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "user_exec_right_ondstore_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE group_exec_right_on_database_level = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "group_exec_right_on_database_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <procedure_exists> has a value
     *
     * @return boolean
     */
    public function hasProcedureExists(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <procedure_exists> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearProcedureExists(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <procedure_exists> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getProcedureExists(){
      return $this->_get(10001);
    }
    
    /**
     * Set <procedure_exists> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setProcedureExists(\dstore\values\booleanValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <user_exec_right_on_database_level> has a value
     *
     * @return boolean
     */
    public function hasUserExecRightOnDatabaseLevel(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <user_exec_right_on_database_level> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearUserExecRightOnDatabaseLevel(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <user_exec_right_on_database_level> value
     *
     * @return \dstore\values\integerValue
     */
    public function getUserExecRightOnDatabaseLevel(){
      return $this->_get(10002);
    }
    
    /**
     * Set <user_exec_right_on_database_level> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setUserExecRightOnDatabaseLevel(\dstore\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <public_exec_right_on_database_level> has a value
     *
     * @return boolean
     */
    public function hasPublicExecRightOnDatabaseLevel(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <public_exec_right_on_database_level> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearPublicExecRightOnDatabaseLevel(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <public_exec_right_on_database_level> value
     *
     * @return \dstore\values\integerValue
     */
    public function getPublicExecRightOnDatabaseLevel(){
      return $this->_get(10003);
    }
    
    /**
     * Set <public_exec_right_on_database_level> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setPublicExecRightOnDatabaseLevel(\dstore\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <procedure_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <procedure_id> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearProcedureId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <procedure_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getProcedureId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <procedure_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setProcedureId(\dstore\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearUserName(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getUserName(){
      return $this->_get(10005);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setUserName(\dstore\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <group_exec_right_ondstore_level> has a value
     *
     * @return boolean
     */
    public function hasGroupExecRightOndstoreLevel(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <group_exec_right_ondstore_level> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearGroupExecRightOndstoreLevel(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <group_exec_right_ondstore_level> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getGroupExecRightOndstoreLevel(){
      return $this->_get(10006);
    }
    
    /**
     * Set <group_exec_right_ondstore_level> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setGroupExecRightOndstoreLevel(\dstore\values\booleanValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearProcedureName(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(10007);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setProcedureName(\dstore\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <user_id> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <user_id> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearUserId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <user_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getUserId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <user_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setUserId(\dstore\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <execute_right> has a value
     *
     * @return boolean
     */
    public function hasExecuteRight(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <execute_right> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearExecuteRight(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <execute_right> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getExecuteRight(){
      return $this->_get(10009);
    }
    
    /**
     * Set <execute_right> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setExecuteRight(\dstore\values\booleanValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <procedure_function> has a value
     *
     * @return boolean
     */
    public function hasProcedureFunction(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <procedure_function> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearProcedureFunction(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <procedure_function> value
     *
     * @return \dstore\values\stringValue
     */
    public function getProcedureFunction(){
      return $this->_get(10010);
    }
    
    /**
     * Set <procedure_function> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setProcedureFunction(\dstore\values\stringValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <user_exec_right_ondstore_level> has a value
     *
     * @return boolean
     */
    public function hasUserExecRightOndstoreLevel(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <user_exec_right_ondstore_level> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearUserExecRightOndstoreLevel(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <user_exec_right_ondstore_level> value
     *
     * @return \dstore\values\integerValue
     */
    public function getUserExecRightOndstoreLevel(){
      return $this->_get(10011);
    }
    
    /**
     * Set <user_exec_right_ondstore_level> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setUserExecRightOndstoreLevel(\dstore\values\integerValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <group_exec_right_on_database_level> has a value
     *
     * @return boolean
     */
    public function hasGroupExecRightOnDatabaseLevel(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <group_exec_right_on_database_level> value
     *
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function clearGroupExecRightOnDatabaseLevel(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <group_exec_right_on_database_level> value
     *
     * @return \dstore\values\integerValue
     */
    public function getGroupExecRightOnDatabaseLevel(){
      return $this->_get(10012);
    }
    
    /**
     * Set <group_exec_right_on_database_level> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_GetExecuteRights_Ad\Response\Row
     */
    public function setGroupExecRightOnDatabaseLevel(\dstore\values\integerValue $value){
      return $this->_set(10012, $value);
    }
  }
}

