<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetStorageAllocInfo_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetStorageAllocInfo_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $table_name = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $index_size__m_b = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_indexes = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_rows = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $table_size__m_b = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $data_size__m_b = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $m_b_allocated = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $segment_name = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $m_b_used = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $free_space_in_percent = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $d_b_name = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $m_b_free = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetStorageAllocInfo_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE table_name = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "table_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE index_size__m_b = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "index_size__m_b";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_indexes = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "number_of_indexes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_rows = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "number_of_rows";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE table_size__m_b = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "table_size__m_b";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE data_size__m_b = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "data_size__m_b";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE m_b_allocated = 20001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20001;
      $f->name      = "m_b_allocated";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE segment_name = 20002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20002;
      $f->name      = "segment_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE m_b_used = 20003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20003;
      $f->name      = "m_b_used";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE free_space_in_percent = 20004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20004;
      $f->name      = "free_space_in_percent";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE d_b_name = 20005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20005;
      $f->name      = "d_b_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE m_b_free = 20006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20006;
      $f->name      = "m_b_free";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <table_name> has a value
     *
     * @return boolean
     */
    public function hasTableName(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <table_name> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearTableName(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <table_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTableName(){
      return $this->_get(10001);
    }
    
    /**
     * Set <table_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setTableName(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <index_size__m_b> has a value
     *
     * @return boolean
     */
    public function hasIndexSize_MB(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <index_size__m_b> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearIndexSize_MB(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <index_size__m_b> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getIndexSize_MB(){
      return $this->_get(10002);
    }
    
    /**
     * Set <index_size__m_b> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setIndexSize_MB(\dstore\engine\values\decimalValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <number_of_indexes> has a value
     *
     * @return boolean
     */
    public function hasNumberOfIndexes(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <number_of_indexes> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearNumberOfIndexes(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <number_of_indexes> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfIndexes(){
      return $this->_get(10003);
    }
    
    /**
     * Set <number_of_indexes> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setNumberOfIndexes(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <number_of_rows> has a value
     *
     * @return boolean
     */
    public function hasNumberOfRows(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <number_of_rows> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearNumberOfRows(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <number_of_rows> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfRows(){
      return $this->_get(10004);
    }
    
    /**
     * Set <number_of_rows> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setNumberOfRows(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <table_size__m_b> has a value
     *
     * @return boolean
     */
    public function hasTableSize_MB(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <table_size__m_b> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearTableSize_MB(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <table_size__m_b> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getTableSize_MB(){
      return $this->_get(10005);
    }
    
    /**
     * Set <table_size__m_b> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setTableSize_MB(\dstore\engine\values\decimalValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <data_size__m_b> has a value
     *
     * @return boolean
     */
    public function hasDataSize_MB(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <data_size__m_b> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearDataSize_MB(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <data_size__m_b> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getDataSize_MB(){
      return $this->_get(10006);
    }
    
    /**
     * Set <data_size__m_b> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setDataSize_MB(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <m_b_allocated> has a value
     *
     * @return boolean
     */
    public function hasMBAllocated(){
      return $this->_has(20001);
    }
    
    /**
     * Clear <m_b_allocated> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearMBAllocated(){
      return $this->_clear(20001);
    }
    
    /**
     * Get <m_b_allocated> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getMBAllocated(){
      return $this->_get(20001);
    }
    
    /**
     * Set <m_b_allocated> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setMBAllocated(\dstore\engine\values\decimalValue $value){
      return $this->_set(20001, $value);
    }
    
    /**
     * Check if <segment_name> has a value
     *
     * @return boolean
     */
    public function hasSegmentName(){
      return $this->_has(20002);
    }
    
    /**
     * Clear <segment_name> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearSegmentName(){
      return $this->_clear(20002);
    }
    
    /**
     * Get <segment_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSegmentName(){
      return $this->_get(20002);
    }
    
    /**
     * Set <segment_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setSegmentName(\dstore\engine\values\stringValue $value){
      return $this->_set(20002, $value);
    }
    
    /**
     * Check if <m_b_used> has a value
     *
     * @return boolean
     */
    public function hasMBUsed(){
      return $this->_has(20003);
    }
    
    /**
     * Clear <m_b_used> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearMBUsed(){
      return $this->_clear(20003);
    }
    
    /**
     * Get <m_b_used> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getMBUsed(){
      return $this->_get(20003);
    }
    
    /**
     * Set <m_b_used> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setMBUsed(\dstore\engine\values\decimalValue $value){
      return $this->_set(20003, $value);
    }
    
    /**
     * Check if <free_space_in_percent> has a value
     *
     * @return boolean
     */
    public function hasFreeSpaceInPercent(){
      return $this->_has(20004);
    }
    
    /**
     * Clear <free_space_in_percent> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearFreeSpaceInPercent(){
      return $this->_clear(20004);
    }
    
    /**
     * Get <free_space_in_percent> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFreeSpaceInPercent(){
      return $this->_get(20004);
    }
    
    /**
     * Set <free_space_in_percent> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setFreeSpaceInPercent(\dstore\engine\values\decimalValue $value){
      return $this->_set(20004, $value);
    }
    
    /**
     * Check if <d_b_name> has a value
     *
     * @return boolean
     */
    public function hasDBName(){
      return $this->_has(20005);
    }
    
    /**
     * Clear <d_b_name> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearDBName(){
      return $this->_clear(20005);
    }
    
    /**
     * Get <d_b_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDBName(){
      return $this->_get(20005);
    }
    
    /**
     * Set <d_b_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setDBName(\dstore\engine\values\stringValue $value){
      return $this->_set(20005, $value);
    }
    
    /**
     * Check if <m_b_free> has a value
     *
     * @return boolean
     */
    public function hasMBFree(){
      return $this->_has(20006);
    }
    
    /**
     * Clear <m_b_free> value
     *
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function clearMBFree(){
      return $this->_clear(20006);
    }
    
    /**
     * Get <m_b_free> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getMBFree(){
      return $this->_get(20006);
    }
    
    /**
     * Set <m_b_free> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\mi_GetStorageAllocInfo_Ad\Response\Row
     */
    public function setMBFree(\dstore\engine\values\decimalValue $value){
      return $this->_set(20006, $value);
    }
  }
}

