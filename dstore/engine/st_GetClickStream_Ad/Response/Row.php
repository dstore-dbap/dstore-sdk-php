<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/st_GetClickStream_Ad.proto
//   Date: 2016-05-19 08:07:56

namespace dstore\engine\st_GetClickStream_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\booleanValue */
    public $value_belongs_to_related_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $node_description = null;
    
    /**  @var \dstore\values\integerValue */
    public $visitor_or_person_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $date_and_time_char = null;
    
    /**  @var \dstore\values\stringValue */
    public $basic_characteristic = null;
    
    /**  @var \dstore\values\booleanValue */
    public $relation_exists_at_date_and_time = null;
    
    /**  @var \dstore\values\integerValue */
    public $h_tree_node_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\values\decimalValue */
    public $value = null;
    
    /**  @var \dstore\values\timestampValue */
    public $date_and_time = null;
    
    /**  @var \dstore\values\integerValue */
    public $related_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $basic_characteristic_number = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.st_GetClickStream_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_belongs_to_related_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "value_belongs_to_related_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_description = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "node_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE visitor_or_person_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "visitor_or_person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE date_and_time_char = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "date_and_time_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE basic_characteristic = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "basic_characteristic";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE relation_exists_at_date_and_time = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "relation_exists_at_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE h_tree_node_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "h_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE date_and_time = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE related_id = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "related_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE basic_characteristic_number = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "basic_characteristic_number";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <value_belongs_to_related_id> has a value
     *
     * @return boolean
     */
    public function hasValueBelongsToRelatedId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <value_belongs_to_related_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearValueBelongsToRelatedId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <value_belongs_to_related_id> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getValueBelongsToRelatedId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <value_belongs_to_related_id> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setValueBelongsToRelatedId(\dstore\values\booleanValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <node_description> has a value
     *
     * @return boolean
     */
    public function hasNodeDescription(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <node_description> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearNodeDescription(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <node_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getNodeDescription(){
      return $this->_get(10002);
    }
    
    /**
     * Set <node_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setNodeDescription(\dstore\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <visitor_or_person_id> has a value
     *
     * @return boolean
     */
    public function hasVisitorOrPersonId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <visitor_or_person_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearVisitorOrPersonId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <visitor_or_person_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getVisitorOrPersonId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <visitor_or_person_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setVisitorOrPersonId(\dstore\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <date_and_time_char> has a value
     *
     * @return boolean
     */
    public function hasDateAndTimeChar(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <date_and_time_char> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearDateAndTimeChar(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <date_and_time_char> value
     *
     * @return \dstore\values\stringValue
     */
    public function getDateAndTimeChar(){
      return $this->_get(10004);
    }
    
    /**
     * Set <date_and_time_char> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setDateAndTimeChar(\dstore\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <basic_characteristic> has a value
     *
     * @return boolean
     */
    public function hasBasicCharacteristic(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <basic_characteristic> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearBasicCharacteristic(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <basic_characteristic> value
     *
     * @return \dstore\values\stringValue
     */
    public function getBasicCharacteristic(){
      return $this->_get(10005);
    }
    
    /**
     * Set <basic_characteristic> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setBasicCharacteristic(\dstore\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <relation_exists_at_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasRelationExistsAtDateAndTime(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <relation_exists_at_date_and_time> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearRelationExistsAtDateAndTime(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <relation_exists_at_date_and_time> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getRelationExistsAtDateAndTime(){
      return $this->_get(10006);
    }
    
    /**
     * Set <relation_exists_at_date_and_time> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setRelationExistsAtDateAndTime(\dstore\values\booleanValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <h_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasHTreeNodeId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <h_tree_node_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearHTreeNodeId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <h_tree_node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getHTreeNodeId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <h_tree_node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setHTreeNodeId(\dstore\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setNodeId(\dstore\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearValue(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\values\decimalValue
     */
    public function getValue(){
      return $this->_get(10009);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\values\decimalValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setValue(\dstore\values\decimalValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <date_and_time> has a value
     *
     * @return boolean
     */
    public function hasDateAndTime(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <date_and_time> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearDateAndTime(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <date_and_time> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getDateAndTime(){
      return $this->_get(10010);
    }
    
    /**
     * Set <date_and_time> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setDateAndTime(\dstore\values\timestampValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <related_id> has a value
     *
     * @return boolean
     */
    public function hasRelatedId(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <related_id> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearRelatedId(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <related_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getRelatedId(){
      return $this->_get(10011);
    }
    
    /**
     * Set <related_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setRelatedId(\dstore\values\integerValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <basic_characteristic_number> has a value
     *
     * @return boolean
     */
    public function hasBasicCharacteristicNumber(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <basic_characteristic_number> value
     *
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function clearBasicCharacteristicNumber(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <basic_characteristic_number> value
     *
     * @return \dstore\values\integerValue
     */
    public function getBasicCharacteristicNumber(){
      return $this->_get(10012);
    }
    
    /**
     * Set <basic_characteristic_number> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\st_GetClickStream_Ad\Response\Row
     */
    public function setBasicCharacteristicNumber(\dstore\values\integerValue $value){
      return $this->_set(10012, $value);
    }
  }
}

