<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetLicenceKeyData.proto
//   Date: 2015-10-06 11:19:51

namespace dstore\engine\mi_GetLicenceKeyData\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $comment = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $underlying_time_period = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $current_value = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $licence_parameter = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $current_date_and_time = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetLicenceKeyData.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE comment = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "comment";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE underlying_time_period = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "underlying_time_period";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE current_value = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "current_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE licence_parameter = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "licence_parameter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE current_date_and_time = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "current_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <comment> has a value
     *
     * @return boolean
     */
    public function hasComment(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <comment> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearComment(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <comment> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getComment(){
      return $this->_get(10001);
    }
    
    /**
     * Set <comment> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setComment(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <underlying_time_period> has a value
     *
     * @return boolean
     */
    public function hasUnderlyingTimePeriod(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <underlying_time_period> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearUnderlyingTimePeriod(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <underlying_time_period> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUnderlyingTimePeriod(){
      return $this->_get(10002);
    }
    
    /**
     * Set <underlying_time_period> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setUnderlyingTimePeriod(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <current_value> has a value
     *
     * @return boolean
     */
    public function hasCurrentValue(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <current_value> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearCurrentValue(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <current_value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCurrentValue(){
      return $this->_get(10003);
    }
    
    /**
     * Set <current_value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setCurrentValue(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <licence_parameter> has a value
     *
     * @return boolean
     */
    public function hasLicenceParameter(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <licence_parameter> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearLicenceParameter(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <licence_parameter> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLicenceParameter(){
      return $this->_get(10004);
    }
    
    /**
     * Set <licence_parameter> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setLicenceParameter(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <current_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasCurrentDateAndTime(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <current_date_and_time> value
     *
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function clearCurrentDateAndTime(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <current_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getCurrentDateAndTime(){
      return $this->_get(10005);
    }
    
    /**
     * Set <current_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\mi_GetLicenceKeyData\Response\Row
     */
    public function setCurrentDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10005, $value);
    }
  }
}

