<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/co_CheckStatistics_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\co_CheckStatistics_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $community_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $calculated_value = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $community_name = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $statistic_information_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $statistic_information = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $stored_value = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $day = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.co_CheckStatistics_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE community_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "community_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE calculated_value = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "calculated_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE community_name = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "community_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistic_information_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "statistic_information_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE statistic_information = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "statistic_information";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE stored_value = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "stored_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE day = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "day";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <community_id> has a value
     *
     * @return boolean
     */
    public function hasCommunityId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <community_id> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearCommunityId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <community_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCommunityId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <community_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setCommunityId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <calculated_value> has a value
     *
     * @return boolean
     */
    public function hasCalculatedValue(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <calculated_value> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearCalculatedValue(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <calculated_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getCalculatedValue(){
      return $this->_get(10002);
    }
    
    /**
     * Set <calculated_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setCalculatedValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <community_name> has a value
     *
     * @return boolean
     */
    public function hasCommunityName(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <community_name> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearCommunityName(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <community_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCommunityName(){
      return $this->_get(10003);
    }
    
    /**
     * Set <community_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setCommunityName(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <statistic_information_id> has a value
     *
     * @return boolean
     */
    public function hasStatisticInformationId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <statistic_information_id> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearStatisticInformationId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <statistic_information_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getStatisticInformationId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <statistic_information_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setStatisticInformationId(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <statistic_information> has a value
     *
     * @return boolean
     */
    public function hasStatisticInformation(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <statistic_information> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearStatisticInformation(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <statistic_information> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getStatisticInformation(){
      return $this->_get(10005);
    }
    
    /**
     * Set <statistic_information> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setStatisticInformation(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <stored_value> has a value
     *
     * @return boolean
     */
    public function hasStoredValue(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <stored_value> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearStoredValue(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <stored_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getStoredValue(){
      return $this->_get(10006);
    }
    
    /**
     * Set <stored_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setStoredValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <day> has a value
     *
     * @return boolean
     */
    public function hasDay(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <day> value
     *
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function clearDay(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <day> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getDay(){
      return $this->_get(10007);
    }
    
    /**
     * Set <day> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\co_CheckStatistics_Ad\Response\Row
     */
    public function setDay(\dstore\engine\values\timestampValue $value){
      return $this->_set(10007, $value);
    }
  }
}

