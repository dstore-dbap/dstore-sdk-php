<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/st_GetVisits_Ad.proto
//   Date: 2015-10-06 11:20:10

namespace dstore\engine\st_GetVisits_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\timestampValue */
    public $from_day = null;
    
    /**  @var boolean */
    public $from_day_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $to_day = null;
    
    /**  @var boolean */
    public $to_day_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.st_GetVisits_Ad.Parameters');

      // OPTIONAL MESSAGE from_day = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from_day";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_day_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "from_day_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_day = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to_day";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_day_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "to_day_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from_day> has a value
     *
     * @return boolean
     */
    public function hasFromDay(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from_day> value
     *
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function clearFromDay(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from_day> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getFromDay(){
      return $this->_get(1);
    }
    
    /**
     * Set <from_day> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function setFromDay(\dstore\engine\values\timestampValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <from_day_null> has a value
     *
     * @return boolean
     */
    public function hasFromDayNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <from_day_null> value
     *
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function clearFromDayNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <from_day_null> value
     *
     * @return boolean
     */
    public function getFromDayNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <from_day_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function setFromDayNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <to_day> has a value
     *
     * @return boolean
     */
    public function hasToDay(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to_day> value
     *
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function clearToDay(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to_day> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getToDay(){
      return $this->_get(2);
    }
    
    /**
     * Set <to_day> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function setToDay(\dstore\engine\values\timestampValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <to_day_null> has a value
     *
     * @return boolean
     */
    public function hasToDayNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <to_day_null> value
     *
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function clearToDayNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <to_day_null> value
     *
     * @return boolean
     */
    public function getToDayNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <to_day_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\st_GetVisits_Ad\Parameters
     */
    public function setToDayNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

