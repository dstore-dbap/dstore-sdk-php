<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_UpdateTrolley_Pu.proto
//   Date: 2015-10-06 11:20:04

namespace dstore\engine\om_UpdateTrolley_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $unique_id = null;
    
    /**  @var boolean */
    public $unique_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $h_tree_node_id = null;
    
    /**  @var boolean */
    public $h_tree_node_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $quantity = null;
    
    /**  @var boolean */
    public $quantity_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $is_relative = null;
    
    /**  @var boolean */
    public $is_relative_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $input_nest_level_for_cont_info = null;
    
    /**  @var boolean */
    public $input_nest_level_for_cont_info_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $country = null;
    
    /**  @var boolean */
    public $country_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $bonus_item_for_item_set_id = null;
    
    /**  @var boolean */
    public $bonus_item_for_item_set_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_UpdateTrolley_Pu.Parameters');

      // OPTIONAL MESSAGE unique_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "unique_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unique_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "unique_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE h_tree_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "h_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL h_tree_node_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "h_tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quantity = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL quantity_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "quantity_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE is_relative = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "is_relative";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL is_relative_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "is_relative_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE input_nest_level_for_cont_info = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "input_nest_level_for_cont_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL input_nest_level_for_cont_info_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "input_nest_level_for_cont_info_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "country";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL country_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "country_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE bonus_item_for_item_set_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "bonus_item_for_item_set_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL bonus_item_for_item_set_id_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "bonus_item_for_item_set_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <unique_id> has a value
     *
     * @return boolean
     */
    public function hasUniqueId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <unique_id> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearUniqueId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <unique_id> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUniqueId(){
      return $this->_get(1);
    }
    
    /**
     * Set <unique_id> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setUniqueId(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <unique_id_null> has a value
     *
     * @return boolean
     */
    public function hasUniqueIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <unique_id_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearUniqueIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <unique_id_null> value
     *
     * @return boolean
     */
    public function getUniqueIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <unique_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setUniqueIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <h_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasHTreeNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <h_tree_node_id> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearHTreeNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <h_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getHTreeNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <h_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setHTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <h_tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasHTreeNodeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <h_tree_node_id_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearHTreeNodeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <h_tree_node_id_null> value
     *
     * @return boolean
     */
    public function getHTreeNodeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <h_tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setHTreeNodeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <quantity> has a value
     *
     * @return boolean
     */
    public function hasQuantity(){
      return $this->_has(3);
    }
    
    /**
     * Clear <quantity> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearQuantity(){
      return $this->_clear(3);
    }
    
    /**
     * Get <quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getQuantity(){
      return $this->_get(3);
    }
    
    /**
     * Set <quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <quantity_null> has a value
     *
     * @return boolean
     */
    public function hasQuantityNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <quantity_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearQuantityNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <quantity_null> value
     *
     * @return boolean
     */
    public function getQuantityNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <quantity_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setQuantityNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <is_relative> has a value
     *
     * @return boolean
     */
    public function hasIsRelative(){
      return $this->_has(4);
    }
    
    /**
     * Clear <is_relative> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearIsRelative(){
      return $this->_clear(4);
    }
    
    /**
     * Get <is_relative> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIsRelative(){
      return $this->_get(4);
    }
    
    /**
     * Set <is_relative> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setIsRelative(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <is_relative_null> has a value
     *
     * @return boolean
     */
    public function hasIsRelativeNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <is_relative_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearIsRelativeNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <is_relative_null> value
     *
     * @return boolean
     */
    public function getIsRelativeNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <is_relative_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setIsRelativeNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <input_nest_level_for_cont_info> has a value
     *
     * @return boolean
     */
    public function hasInputNestLevelForContInfo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <input_nest_level_for_cont_info> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearInputNestLevelForContInfo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <input_nest_level_for_cont_info> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInputNestLevelForContInfo(){
      return $this->_get(5);
    }
    
    /**
     * Set <input_nest_level_for_cont_info> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setInputNestLevelForContInfo(\dstore\engine\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <input_nest_level_for_cont_info_null> has a value
     *
     * @return boolean
     */
    public function hasInputNestLevelForContInfoNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <input_nest_level_for_cont_info_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearInputNestLevelForContInfoNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <input_nest_level_for_cont_info_null> value
     *
     * @return boolean
     */
    public function getInputNestLevelForContInfoNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <input_nest_level_for_cont_info_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setInputNestLevelForContInfoNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <country> has a value
     *
     * @return boolean
     */
    public function hasCountry(){
      return $this->_has(6);
    }
    
    /**
     * Clear <country> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearCountry(){
      return $this->_clear(6);
    }
    
    /**
     * Get <country> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCountry(){
      return $this->_get(6);
    }
    
    /**
     * Set <country> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setCountry(\dstore\engine\values\stringValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <country_null> has a value
     *
     * @return boolean
     */
    public function hasCountryNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <country_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearCountryNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <country_null> value
     *
     * @return boolean
     */
    public function getCountryNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <country_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setCountryNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <bonus_item_for_item_set_id> has a value
     *
     * @return boolean
     */
    public function hasBonusItemForItemSetId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <bonus_item_for_item_set_id> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearBonusItemForItemSetId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <bonus_item_for_item_set_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getBonusItemForItemSetId(){
      return $this->_get(7);
    }
    
    /**
     * Set <bonus_item_for_item_set_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setBonusItemForItemSetId(\dstore\engine\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <bonus_item_for_item_set_id_null> has a value
     *
     * @return boolean
     */
    public function hasBonusItemForItemSetIdNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <bonus_item_for_item_set_id_null> value
     *
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function clearBonusItemForItemSetIdNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <bonus_item_for_item_set_id_null> value
     *
     * @return boolean
     */
    public function getBonusItemForItemSetIdNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <bonus_item_for_item_set_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_UpdateTrolley_Pu\Parameters
     */
    public function setBonusItemForItemSetIdNull( $value){
      return $this->_set(1007, $value);
    }
  }
}

