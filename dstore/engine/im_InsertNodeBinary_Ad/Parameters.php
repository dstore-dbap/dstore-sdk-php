<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_InsertNodeBinary_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\im_InsertNodeBinary_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $node_ids = null;
    
    /**  @var boolean */
    public $node_ids_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $binary_description = null;
    
    /**  @var boolean */
    public $binary_description_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $from_date = null;
    
    /**  @var boolean */
    public $from_date_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $to_date = null;
    
    /**  @var boolean */
    public $to_date_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $from_time = null;
    
    /**  @var boolean */
    public $from_time_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $to_time = null;
    
    /**  @var boolean */
    public $to_time_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $auto_continue = null;
    
    /**  @var boolean */
    public $auto_continue_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $return_binary_code_id = null;
    
    /**  @var boolean */
    public $return_binary_code_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_InsertNodeBinary_Ad.Parameters');

      // OPTIONAL MESSAGE node_ids = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_ids_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "node_ids_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "binary_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL binary_description_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "binary_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "from_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_date_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "from_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "to_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_date_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "to_date_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_time = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "from_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL from_time_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "from_time_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_time = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "to_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL to_time_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "to_time_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE auto_continue = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "auto_continue";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL auto_continue_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "auto_continue_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE return_binary_code_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "return_binary_code_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL return_binary_code_id_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "return_binary_code_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_ids> has a value
     *
     * @return boolean
     */
    public function hasNodeIds(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_ids> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearNodeIds(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_ids> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getNodeIds(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_ids> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setNodeIds(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_ids_null> has a value
     *
     * @return boolean
     */
    public function hasNodeIdsNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <node_ids_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearNodeIdsNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <node_ids_null> value
     *
     * @return boolean
     */
    public function getNodeIdsNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <node_ids_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setNodeIdsNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <binary_description> has a value
     *
     * @return boolean
     */
    public function hasBinaryDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <binary_description> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearBinaryDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <binary_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getBinaryDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <binary_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setBinaryDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <binary_description_null> has a value
     *
     * @return boolean
     */
    public function hasBinaryDescriptionNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <binary_description_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearBinaryDescriptionNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <binary_description_null> value
     *
     * @return boolean
     */
    public function getBinaryDescriptionNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <binary_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setBinaryDescriptionNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <from_date> has a value
     *
     * @return boolean
     */
    public function hasFromDate(){
      return $this->_has(3);
    }
    
    /**
     * Clear <from_date> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearFromDate(){
      return $this->_clear(3);
    }
    
    /**
     * Get <from_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getFromDate(){
      return $this->_get(3);
    }
    
    /**
     * Set <from_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setFromDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <from_date_null> has a value
     *
     * @return boolean
     */
    public function hasFromDateNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <from_date_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearFromDateNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <from_date_null> value
     *
     * @return boolean
     */
    public function getFromDateNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <from_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setFromDateNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <to_date> has a value
     *
     * @return boolean
     */
    public function hasToDate(){
      return $this->_has(4);
    }
    
    /**
     * Clear <to_date> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearToDate(){
      return $this->_clear(4);
    }
    
    /**
     * Get <to_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getToDate(){
      return $this->_get(4);
    }
    
    /**
     * Set <to_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setToDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <to_date_null> has a value
     *
     * @return boolean
     */
    public function hasToDateNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <to_date_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearToDateNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <to_date_null> value
     *
     * @return boolean
     */
    public function getToDateNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <to_date_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setToDateNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <from_time> has a value
     *
     * @return boolean
     */
    public function hasFromTime(){
      return $this->_has(5);
    }
    
    /**
     * Clear <from_time> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearFromTime(){
      return $this->_clear(5);
    }
    
    /**
     * Get <from_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getFromTime(){
      return $this->_get(5);
    }
    
    /**
     * Set <from_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setFromTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <from_time_null> has a value
     *
     * @return boolean
     */
    public function hasFromTimeNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <from_time_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearFromTimeNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <from_time_null> value
     *
     * @return boolean
     */
    public function getFromTimeNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <from_time_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setFromTimeNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <to_time> has a value
     *
     * @return boolean
     */
    public function hasToTime(){
      return $this->_has(6);
    }
    
    /**
     * Clear <to_time> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearToTime(){
      return $this->_clear(6);
    }
    
    /**
     * Get <to_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getToTime(){
      return $this->_get(6);
    }
    
    /**
     * Set <to_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setToTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <to_time_null> has a value
     *
     * @return boolean
     */
    public function hasToTimeNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <to_time_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearToTimeNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <to_time_null> value
     *
     * @return boolean
     */
    public function getToTimeNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <to_time_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setToTimeNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <auto_continue> has a value
     *
     * @return boolean
     */
    public function hasAutoContinue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <auto_continue> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearAutoContinue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <auto_continue> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getAutoContinue(){
      return $this->_get(7);
    }
    
    /**
     * Set <auto_continue> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setAutoContinue(\dstore\engine\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <auto_continue_null> has a value
     *
     * @return boolean
     */
    public function hasAutoContinueNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <auto_continue_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearAutoContinueNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <auto_continue_null> value
     *
     * @return boolean
     */
    public function getAutoContinueNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <auto_continue_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setAutoContinueNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <return_binary_code_id> has a value
     *
     * @return boolean
     */
    public function hasReturnBinaryCodeId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <return_binary_code_id> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearReturnBinaryCodeId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <return_binary_code_id> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getReturnBinaryCodeId(){
      return $this->_get(8);
    }
    
    /**
     * Set <return_binary_code_id> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setReturnBinaryCodeId(\dstore\engine\values\booleanValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <return_binary_code_id_null> has a value
     *
     * @return boolean
     */
    public function hasReturnBinaryCodeIdNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <return_binary_code_id_null> value
     *
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function clearReturnBinaryCodeIdNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <return_binary_code_id_null> value
     *
     * @return boolean
     */
    public function getReturnBinaryCodeIdNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <return_binary_code_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_InsertNodeBinary_Ad\Parameters
     */
    public function setReturnBinaryCodeIdNull( $value){
      return $this->_set(1008, $value);
    }
  }
}

