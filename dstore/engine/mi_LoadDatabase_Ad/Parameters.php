<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_LoadDatabase_Ad.proto
//   Date: 2015-10-06 11:19:53

namespace dstore\engine\mi_LoadDatabase_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $database_name = null;
    
    /**  @var boolean */
    public $database_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $device_names = null;
    
    /**  @var boolean */
    public $device_names_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $device_names_separated_by = null;
    
    /**  @var boolean */
    public $device_names_separated_by_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $device_path = null;
    
    /**  @var boolean */
    public $device_path_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $kill_processes_on_d_b_first = null;
    
    /**  @var boolean */
    public $kill_processes_on_d_b_first_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $online_database_after_load = null;
    
    /**  @var boolean */
    public $online_database_after_load_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $adjust_d_b_user_to_logins = null;
    
    /**  @var boolean */
    public $adjust_d_b_user_to_logins_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $compress_level = null;
    
    /**  @var boolean */
    public $compress_level_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_LoadDatabase_Ad.Parameters');

      // OPTIONAL MESSAGE database_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "database_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL database_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "database_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE device_names = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "device_names";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL device_names_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "device_names_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE device_names_separated_by = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "device_names_separated_by";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL device_names_separated_by_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "device_names_separated_by_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE device_path = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "device_path";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL device_path_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "device_path_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE kill_processes_on_d_b_first = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "kill_processes_on_d_b_first";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL kill_processes_on_d_b_first_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "kill_processes_on_d_b_first_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE online_database_after_load = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "online_database_after_load";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL online_database_after_load_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "online_database_after_load_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE adjust_d_b_user_to_logins = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "adjust_d_b_user_to_logins";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL adjust_d_b_user_to_logins_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "adjust_d_b_user_to_logins_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE compress_level = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "compress_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL compress_level_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "compress_level_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <database_name> has a value
     *
     * @return boolean
     */
    public function hasDatabaseName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <database_name> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDatabaseName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <database_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDatabaseName(){
      return $this->_get(1);
    }
    
    /**
     * Set <database_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDatabaseName(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <database_name_null> has a value
     *
     * @return boolean
     */
    public function hasDatabaseNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <database_name_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDatabaseNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <database_name_null> value
     *
     * @return boolean
     */
    public function getDatabaseNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <database_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDatabaseNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <device_names> has a value
     *
     * @return boolean
     */
    public function hasDeviceNames(){
      return $this->_has(2);
    }
    
    /**
     * Clear <device_names> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDeviceNames(){
      return $this->_clear(2);
    }
    
    /**
     * Get <device_names> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDeviceNames(){
      return $this->_get(2);
    }
    
    /**
     * Set <device_names> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDeviceNames(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <device_names_null> has a value
     *
     * @return boolean
     */
    public function hasDeviceNamesNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <device_names_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDeviceNamesNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <device_names_null> value
     *
     * @return boolean
     */
    public function getDeviceNamesNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <device_names_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDeviceNamesNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <device_names_separated_by> has a value
     *
     * @return boolean
     */
    public function hasDeviceNamesSeparatedBy(){
      return $this->_has(3);
    }
    
    /**
     * Clear <device_names_separated_by> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDeviceNamesSeparatedBy(){
      return $this->_clear(3);
    }
    
    /**
     * Get <device_names_separated_by> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDeviceNamesSeparatedBy(){
      return $this->_get(3);
    }
    
    /**
     * Set <device_names_separated_by> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDeviceNamesSeparatedBy(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <device_names_separated_by_null> has a value
     *
     * @return boolean
     */
    public function hasDeviceNamesSeparatedByNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <device_names_separated_by_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDeviceNamesSeparatedByNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <device_names_separated_by_null> value
     *
     * @return boolean
     */
    public function getDeviceNamesSeparatedByNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <device_names_separated_by_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDeviceNamesSeparatedByNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <device_path> has a value
     *
     * @return boolean
     */
    public function hasDevicePath(){
      return $this->_has(4);
    }
    
    /**
     * Clear <device_path> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDevicePath(){
      return $this->_clear(4);
    }
    
    /**
     * Get <device_path> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDevicePath(){
      return $this->_get(4);
    }
    
    /**
     * Set <device_path> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDevicePath(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <device_path_null> has a value
     *
     * @return boolean
     */
    public function hasDevicePathNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <device_path_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearDevicePathNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <device_path_null> value
     *
     * @return boolean
     */
    public function getDevicePathNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <device_path_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setDevicePathNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <kill_processes_on_d_b_first> has a value
     *
     * @return boolean
     */
    public function hasKillProcessesOnDBFirst(){
      return $this->_has(5);
    }
    
    /**
     * Clear <kill_processes_on_d_b_first> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearKillProcessesOnDBFirst(){
      return $this->_clear(5);
    }
    
    /**
     * Get <kill_processes_on_d_b_first> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getKillProcessesOnDBFirst(){
      return $this->_get(5);
    }
    
    /**
     * Set <kill_processes_on_d_b_first> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setKillProcessesOnDBFirst(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <kill_processes_on_d_b_first_null> has a value
     *
     * @return boolean
     */
    public function hasKillProcessesOnDBFirstNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <kill_processes_on_d_b_first_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearKillProcessesOnDBFirstNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <kill_processes_on_d_b_first_null> value
     *
     * @return boolean
     */
    public function getKillProcessesOnDBFirstNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <kill_processes_on_d_b_first_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setKillProcessesOnDBFirstNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <online_database_after_load> has a value
     *
     * @return boolean
     */
    public function hasOnlineDatabaseAfterLoad(){
      return $this->_has(6);
    }
    
    /**
     * Clear <online_database_after_load> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearOnlineDatabaseAfterLoad(){
      return $this->_clear(6);
    }
    
    /**
     * Get <online_database_after_load> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getOnlineDatabaseAfterLoad(){
      return $this->_get(6);
    }
    
    /**
     * Set <online_database_after_load> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setOnlineDatabaseAfterLoad(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <online_database_after_load_null> has a value
     *
     * @return boolean
     */
    public function hasOnlineDatabaseAfterLoadNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <online_database_after_load_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearOnlineDatabaseAfterLoadNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <online_database_after_load_null> value
     *
     * @return boolean
     */
    public function getOnlineDatabaseAfterLoadNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <online_database_after_load_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setOnlineDatabaseAfterLoadNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <adjust_d_b_user_to_logins> has a value
     *
     * @return boolean
     */
    public function hasAdjustDBUserToLogins(){
      return $this->_has(7);
    }
    
    /**
     * Clear <adjust_d_b_user_to_logins> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearAdjustDBUserToLogins(){
      return $this->_clear(7);
    }
    
    /**
     * Get <adjust_d_b_user_to_logins> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getAdjustDBUserToLogins(){
      return $this->_get(7);
    }
    
    /**
     * Set <adjust_d_b_user_to_logins> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setAdjustDBUserToLogins(\dstore\engine\values\booleanValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <adjust_d_b_user_to_logins_null> has a value
     *
     * @return boolean
     */
    public function hasAdjustDBUserToLoginsNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <adjust_d_b_user_to_logins_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearAdjustDBUserToLoginsNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <adjust_d_b_user_to_logins_null> value
     *
     * @return boolean
     */
    public function getAdjustDBUserToLoginsNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <adjust_d_b_user_to_logins_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setAdjustDBUserToLoginsNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <compress_level> has a value
     *
     * @return boolean
     */
    public function hasCompressLevel(){
      return $this->_has(8);
    }
    
    /**
     * Clear <compress_level> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearCompressLevel(){
      return $this->_clear(8);
    }
    
    /**
     * Get <compress_level> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCompressLevel(){
      return $this->_get(8);
    }
    
    /**
     * Set <compress_level> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setCompressLevel(\dstore\engine\values\integerValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <compress_level_null> has a value
     *
     * @return boolean
     */
    public function hasCompressLevelNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <compress_level_null> value
     *
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function clearCompressLevelNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <compress_level_null> value
     *
     * @return boolean
     */
    public function getCompressLevelNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <compress_level_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_LoadDatabase_Ad\Parameters
     */
    public function setCompressLevelNull( $value){
      return $this->_set(1008, $value);
    }
  }
}

