<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_DeActivateNodes_Ad.proto
//   Date: 2015-10-06 11:19:46

namespace dstore\engine\im_DeActivateNodes_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\booleanValue */
    public $activate = null;
    
    /**  @var boolean */
    public $activate_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $tree_node_id_list = null;
    
    /**  @var boolean */
    public $tree_node_id_list_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_DeActivateNodes_Ad.Parameters');

      // OPTIONAL MESSAGE activate = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "activate";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL activate_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "activate_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id_list = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tree_node_id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_list_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "tree_node_id_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <activate> has a value
     *
     * @return boolean
     */
    public function hasActivate(){
      return $this->_has(1);
    }
    
    /**
     * Clear <activate> value
     *
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function clearActivate(){
      return $this->_clear(1);
    }
    
    /**
     * Get <activate> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getActivate(){
      return $this->_get(1);
    }
    
    /**
     * Set <activate> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function setActivate(\dstore\engine\values\booleanValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <activate_null> has a value
     *
     * @return boolean
     */
    public function hasActivateNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <activate_null> value
     *
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function clearActivateNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <activate_null> value
     *
     * @return boolean
     */
    public function getActivateNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <activate_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function setActivateNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <tree_node_id_list> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tree_node_id_list> value
     *
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function clearTreeNodeIdList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tree_node_id_list> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTreeNodeIdList(){
      return $this->_get(2);
    }
    
    /**
     * Set <tree_node_id_list> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function setTreeNodeIdList(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tree_node_id_list_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdListNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <tree_node_id_list_null> value
     *
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function clearTreeNodeIdListNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <tree_node_id_list_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdListNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <tree_node_id_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_DeActivateNodes_Ad\Parameters
     */
    public function setTreeNodeIdListNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

