<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/do_GetSortOrderForResultSet_Ad.proto
//   Date: 2016-05-19 08:07:40

namespace dstore\engine\do_GetSortOrderForResultSet_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $condition = null;
    
    /**  @var \dstore\values\integerValue */
    public $sort_condition_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $parameter_name = null;
    
    /**  @var \dstore\values\integerValue */
    public $sort_no = null;
    
    /**  @var \dstore\values\booleanValue */
    public $ascending_sort_order = null;
    
    /**  @var \dstore\values\stringValue */
    public $result_column_name = null;
    
    /**  @var \dstore\values\stringValue */
    public $sort_condition_description = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.do_GetSortOrderForResultSet_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_condition_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "sort_condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE parameter_name = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "parameter_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ascending_sort_order = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "ascending_sort_order";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE result_column_name = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "result_column_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_condition_description = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "sort_condition_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearCondition(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <condition> value
     *
     * @return \dstore\values\stringValue
     */
    public function getCondition(){
      return $this->_get(10001);
    }
    
    /**
     * Set <condition> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setCondition(\dstore\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <sort_condition_id> has a value
     *
     * @return boolean
     */
    public function hasSortConditionId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <sort_condition_id> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearSortConditionId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <sort_condition_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSortConditionId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <sort_condition_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setSortConditionId(\dstore\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <parameter_name> has a value
     *
     * @return boolean
     */
    public function hasParameterName(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <parameter_name> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearParameterName(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <parameter_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getParameterName(){
      return $this->_get(10003);
    }
    
    /**
     * Set <parameter_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setParameterName(\dstore\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearSortNo(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSortNo(){
      return $this->_get(10004);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setSortNo(\dstore\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <ascending_sort_order> has a value
     *
     * @return boolean
     */
    public function hasAscendingSortOrder(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <ascending_sort_order> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearAscendingSortOrder(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <ascending_sort_order> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getAscendingSortOrder(){
      return $this->_get(10005);
    }
    
    /**
     * Set <ascending_sort_order> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setAscendingSortOrder(\dstore\values\booleanValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <result_column_name> has a value
     *
     * @return boolean
     */
    public function hasResultColumnName(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <result_column_name> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearResultColumnName(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <result_column_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getResultColumnName(){
      return $this->_get(10006);
    }
    
    /**
     * Set <result_column_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setResultColumnName(\dstore\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <sort_condition_description> has a value
     *
     * @return boolean
     */
    public function hasSortConditionDescription(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <sort_condition_description> value
     *
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function clearSortConditionDescription(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <sort_condition_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getSortConditionDescription(){
      return $this->_get(10007);
    }
    
    /**
     * Set <sort_condition_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\do_GetSortOrderForResultSet_Ad\Response\Row
     */
    public function setSortConditionDescription(\dstore\values\stringValue $value){
      return $this->_set(10007, $value);
    }
  }
}

