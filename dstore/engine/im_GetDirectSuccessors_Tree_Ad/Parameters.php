<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetDirectSuccessors_Tree_Ad.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\im_GetDirectSuccessors_Tree_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var boolean */
    public $tree_node_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $language_id = null;
    
    /**  @var boolean */
    public $language_id_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $only_active = null;
    
    /**  @var boolean */
    public $only_active_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $only_not_deleted = null;
    
    /**  @var boolean */
    public $only_not_deleted_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $include_column_locked = null;
    
    /**  @var boolean */
    public $include_column_locked_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $check_locked_tree_nodes_for_user_id = null;
    
    /**  @var boolean */
    public $check_locked_tree_nodes_for_user_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetDirectSuccessors_Tree_Ad.Parameters');

      // OPTIONAL MESSAGE tree_node_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL language_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "language_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE only_active = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "only_active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL only_active_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "only_active_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE only_not_deleted = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "only_not_deleted";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL only_not_deleted_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "only_not_deleted_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_column_locked = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "include_column_locked";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_column_locked_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "include_column_locked_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE check_locked_tree_nodes_for_user_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "check_locked_tree_nodes_for_user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL check_locked_tree_nodes_for_user_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "check_locked_tree_nodes_for_user_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearTreeNodeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tree_node_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearTreeNodeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tree_node_id_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setTreeNodeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearLanguageId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(2);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setLanguageId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <language_id_null> has a value
     *
     * @return boolean
     */
    public function hasLanguageIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <language_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearLanguageIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <language_id_null> value
     *
     * @return boolean
     */
    public function getLanguageIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <language_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setLanguageIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <only_active> has a value
     *
     * @return boolean
     */
    public function hasOnlyActive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <only_active> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearOnlyActive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <only_active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getOnlyActive(){
      return $this->_get(3);
    }
    
    /**
     * Set <only_active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setOnlyActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <only_active_null> has a value
     *
     * @return boolean
     */
    public function hasOnlyActiveNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <only_active_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearOnlyActiveNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <only_active_null> value
     *
     * @return boolean
     */
    public function getOnlyActiveNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <only_active_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setOnlyActiveNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <only_not_deleted> has a value
     *
     * @return boolean
     */
    public function hasOnlyNotDeleted(){
      return $this->_has(4);
    }
    
    /**
     * Clear <only_not_deleted> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearOnlyNotDeleted(){
      return $this->_clear(4);
    }
    
    /**
     * Get <only_not_deleted> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getOnlyNotDeleted(){
      return $this->_get(4);
    }
    
    /**
     * Set <only_not_deleted> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setOnlyNotDeleted(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <only_not_deleted_null> has a value
     *
     * @return boolean
     */
    public function hasOnlyNotDeletedNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <only_not_deleted_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearOnlyNotDeletedNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <only_not_deleted_null> value
     *
     * @return boolean
     */
    public function getOnlyNotDeletedNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <only_not_deleted_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setOnlyNotDeletedNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <include_column_locked> has a value
     *
     * @return boolean
     */
    public function hasIncludeColumnLocked(){
      return $this->_has(5);
    }
    
    /**
     * Clear <include_column_locked> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearIncludeColumnLocked(){
      return $this->_clear(5);
    }
    
    /**
     * Get <include_column_locked> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIncludeColumnLocked(){
      return $this->_get(5);
    }
    
    /**
     * Set <include_column_locked> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setIncludeColumnLocked(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <include_column_locked_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeColumnLockedNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <include_column_locked_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearIncludeColumnLockedNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <include_column_locked_null> value
     *
     * @return boolean
     */
    public function getIncludeColumnLockedNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <include_column_locked_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setIncludeColumnLockedNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <check_locked_tree_nodes_for_user_id> has a value
     *
     * @return boolean
     */
    public function hasCheckLockedTreeNodesForUserId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <check_locked_tree_nodes_for_user_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearCheckLockedTreeNodesForUserId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <check_locked_tree_nodes_for_user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCheckLockedTreeNodesForUserId(){
      return $this->_get(6);
    }
    
    /**
     * Set <check_locked_tree_nodes_for_user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setCheckLockedTreeNodesForUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <check_locked_tree_nodes_for_user_id_null> has a value
     *
     * @return boolean
     */
    public function hasCheckLockedTreeNodesForUserIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <check_locked_tree_nodes_for_user_id_null> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function clearCheckLockedTreeNodesForUserIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <check_locked_tree_nodes_for_user_id_null> value
     *
     * @return boolean
     */
    public function getCheckLockedTreeNodesForUserIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <check_locked_tree_nodes_for_user_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetDirectSuccessors_Tree_Ad\Parameters
     */
    public function setCheckLockedTreeNodesForUserIdNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

