<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/pm_GetPersonPredefinedVals_Ad.proto
//   Date: 2015-10-06 11:20:06

namespace dstore\engine\pm_GetPersonPredefinedVals_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $table_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value_restricted_by_pattern = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $translated_value = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $characteristic_sort_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_characteristic_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $is_currently_valid = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $value_sort_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $table_key_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $value_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.pm_GetPersonPredefinedVals_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE table_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "table_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_restricted_by_pattern = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "value_restricted_by_pattern";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE translated_value = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "translated_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE characteristic_sort_no = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "characteristic_sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_characteristic_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "person_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE is_currently_valid = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "is_currently_valid";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_sort_no = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "value_sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE table_key_id = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "table_key_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <table_id> has a value
     *
     * @return boolean
     */
    public function hasTableId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <table_id> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearTableId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <table_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTableId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <table_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setTableId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <value_restricted_by_pattern> has a value
     *
     * @return boolean
     */
    public function hasValueRestrictedByPattern(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <value_restricted_by_pattern> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearValueRestrictedByPattern(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <value_restricted_by_pattern> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValueRestrictedByPattern(){
      return $this->_get(10002);
    }
    
    /**
     * Set <value_restricted_by_pattern> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setValueRestrictedByPattern(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <translated_value> has a value
     *
     * @return boolean
     */
    public function hasTranslatedValue(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <translated_value> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearTranslatedValue(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <translated_value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTranslatedValue(){
      return $this->_get(10003);
    }
    
    /**
     * Set <translated_value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setTranslatedValue(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <characteristic_sort_no> has a value
     *
     * @return boolean
     */
    public function hasCharacteristicSortNo(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <characteristic_sort_no> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearCharacteristicSortNo(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <characteristic_sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCharacteristicSortNo(){
      return $this->_get(10004);
    }
    
    /**
     * Set <characteristic_sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setCharacteristicSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <person_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasPersonCharacteristicId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <person_characteristic_id> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearPersonCharacteristicId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <person_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonCharacteristicId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <person_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setPersonCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearValue(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue(){
      return $this->_get(10006);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setValue(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <is_currently_valid> has a value
     *
     * @return boolean
     */
    public function hasIsCurrentlyValid(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <is_currently_valid> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearIsCurrentlyValid(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <is_currently_valid> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIsCurrentlyValid(){
      return $this->_get(10007);
    }
    
    /**
     * Set <is_currently_valid> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setIsCurrentlyValid(\dstore\engine\values\booleanValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <value_sort_no> has a value
     *
     * @return boolean
     */
    public function hasValueSortNo(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <value_sort_no> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearValueSortNo(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <value_sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getValueSortNo(){
      return $this->_get(10008);
    }
    
    /**
     * Set <value_sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setValueSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <table_key_id> has a value
     *
     * @return boolean
     */
    public function hasTableKeyId(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <table_key_id> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearTableKeyId(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <table_key_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTableKeyId(){
      return $this->_get(10009);
    }
    
    /**
     * Set <table_key_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setTableKeyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <value_id> has a value
     *
     * @return boolean
     */
    public function hasValueId(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <value_id> value
     *
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function clearValueId(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <value_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getValueId(){
      return $this->_get(10010);
    }
    
    /**
     * Set <value_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\pm_GetPersonPredefinedVals_Ad\Response\Row
     */
    public function setValueId(\dstore\engine\values\integerValue $value){
      return $this->_set(10010, $value);
    }
  }
}

