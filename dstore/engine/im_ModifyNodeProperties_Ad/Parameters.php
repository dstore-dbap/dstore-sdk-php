<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_ModifyNodeProperties_Ad.proto
//   Date: 2016-05-19 08:07:43

namespace dstore\engine\im_ModifyNodeProperties_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $result = null;
    
    /**  @var boolean */
    public $result_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $node_id_list = null;
    
    /**  @var boolean */
    public $node_id_list_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var boolean */
    public $node_characteristic_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $value = null;
    
    /**  @var boolean */
    public $value_null = null;
    
    /**  @var \dstore\values\timestampValue */
    public $valid_from = null;
    
    /**  @var boolean */
    public $valid_from_null = null;
    
    /**  @var \dstore\values\timestampValue */
    public $valid_to = null;
    
    /**  @var boolean */
    public $valid_to_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $delete_value_id = null;
    
    /**  @var boolean */
    public $delete_value_id_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $value_id_for_predefined_charac = null;
    
    /**  @var boolean */
    public $value_id_for_predefined_charac_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $use_data_fromdstoreifin = null;
    
    /**  @var boolean */
    public $use_data_fromdstoreifin_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_ModifyNodeProperties_Ad.Parameters');

      // OPTIONAL MESSAGE result = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL result_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "result_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id_list = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "node_id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_id_list_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "node_id_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_characteristic_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_characteristic_id_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "node_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL value_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "value_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "valid_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL valid_from_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "valid_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "valid_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL valid_to_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "valid_to_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_value_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "delete_value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_value_id_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "delete_value_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id_for_predefined_charac = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "value_id_for_predefined_charac";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL value_id_for_predefined_charac_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "value_id_for_predefined_charac_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE use_data_fromdstoreifin = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "use_data_fromdstoreifin";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL use_data_fromdstoreifin_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "use_data_fromdstoreifin_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <result> has a value
     *
     * @return boolean
     */
    public function hasResult(){
      return $this->_has(1);
    }
    
    /**
     * Clear <result> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearResult(){
      return $this->_clear(1);
    }
    
    /**
     * Get <result> value
     *
     * @return \dstore\values\integerValue
     */
    public function getResult(){
      return $this->_get(1);
    }
    
    /**
     * Set <result> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setResult(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <result_null> has a value
     *
     * @return boolean
     */
    public function hasResultNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <result_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearResultNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <result_null> value
     *
     * @return boolean
     */
    public function getResultNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <result_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setResultNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <node_id_list> has a value
     *
     * @return boolean
     */
    public function hasNodeIdList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <node_id_list> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearNodeIdList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <node_id_list> value
     *
     * @return \dstore\values\stringValue
     */
    public function getNodeIdList(){
      return $this->_get(2);
    }
    
    /**
     * Set <node_id_list> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setNodeIdList(\dstore\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <node_id_list_null> has a value
     *
     * @return boolean
     */
    public function hasNodeIdListNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <node_id_list_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearNodeIdListNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <node_id_list_null> value
     *
     * @return boolean
     */
    public function getNodeIdListNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <node_id_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setNodeIdListNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(3);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setNodeCharacteristicId(\dstore\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <node_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicIdNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <node_characteristic_id_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearNodeCharacteristicIdNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <node_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getNodeCharacteristicIdNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <node_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setNodeCharacteristicIdNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(4);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValue(){
      return $this->_clear(4);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\values\stringValue
     */
    public function getValue(){
      return $this->_get(4);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValue(\dstore\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <value_null> has a value
     *
     * @return boolean
     */
    public function hasValueNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <value_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValueNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <value_null> value
     *
     * @return boolean
     */
    public function getValueNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <value_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValueNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <valid_from> has a value
     *
     * @return boolean
     */
    public function hasValidFrom(){
      return $this->_has(5);
    }
    
    /**
     * Clear <valid_from> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValidFrom(){
      return $this->_clear(5);
    }
    
    /**
     * Get <valid_from> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getValidFrom(){
      return $this->_get(5);
    }
    
    /**
     * Set <valid_from> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValidFrom(\dstore\values\timestampValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <valid_from_null> has a value
     *
     * @return boolean
     */
    public function hasValidFromNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <valid_from_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValidFromNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <valid_from_null> value
     *
     * @return boolean
     */
    public function getValidFromNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <valid_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValidFromNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <valid_to> has a value
     *
     * @return boolean
     */
    public function hasValidTo(){
      return $this->_has(6);
    }
    
    /**
     * Clear <valid_to> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValidTo(){
      return $this->_clear(6);
    }
    
    /**
     * Get <valid_to> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getValidTo(){
      return $this->_get(6);
    }
    
    /**
     * Set <valid_to> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValidTo(\dstore\values\timestampValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <valid_to_null> has a value
     *
     * @return boolean
     */
    public function hasValidToNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <valid_to_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValidToNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <valid_to_null> value
     *
     * @return boolean
     */
    public function getValidToNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <valid_to_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValidToNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <delete_value_id> has a value
     *
     * @return boolean
     */
    public function hasDeleteValueId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <delete_value_id> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearDeleteValueId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <delete_value_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getDeleteValueId(){
      return $this->_get(7);
    }
    
    /**
     * Set <delete_value_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setDeleteValueId(\dstore\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <delete_value_id_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteValueIdNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <delete_value_id_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearDeleteValueIdNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <delete_value_id_null> value
     *
     * @return boolean
     */
    public function getDeleteValueIdNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <delete_value_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setDeleteValueIdNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <value_id_for_predefined_charac> has a value
     *
     * @return boolean
     */
    public function hasValueIdForPredefinedCharac(){
      return $this->_has(8);
    }
    
    /**
     * Clear <value_id_for_predefined_charac> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValueIdForPredefinedCharac(){
      return $this->_clear(8);
    }
    
    /**
     * Get <value_id_for_predefined_charac> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getValueIdForPredefinedCharac(){
      return $this->_get(8);
    }
    
    /**
     * Set <value_id_for_predefined_charac> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValueIdForPredefinedCharac(\dstore\values\booleanValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <value_id_for_predefined_charac_null> has a value
     *
     * @return boolean
     */
    public function hasValueIdForPredefinedCharacNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <value_id_for_predefined_charac_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearValueIdForPredefinedCharacNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <value_id_for_predefined_charac_null> value
     *
     * @return boolean
     */
    public function getValueIdForPredefinedCharacNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <value_id_for_predefined_charac_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setValueIdForPredefinedCharacNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <use_data_fromdstoreifin> has a value
     *
     * @return boolean
     */
    public function hasUseDataFromdstoreifin(){
      return $this->_has(9);
    }
    
    /**
     * Clear <use_data_fromdstoreifin> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearUseDataFromdstoreifin(){
      return $this->_clear(9);
    }
    
    /**
     * Get <use_data_fromdstoreifin> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getUseDataFromdstoreifin(){
      return $this->_get(9);
    }
    
    /**
     * Set <use_data_fromdstoreifin> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setUseDataFromdstoreifin(\dstore\values\booleanValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <use_data_fromdstoreifin_null> has a value
     *
     * @return boolean
     */
    public function hasUseDataFromdstoreifinNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <use_data_fromdstoreifin_null> value
     *
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function clearUseDataFromdstoreifinNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <use_data_fromdstoreifin_null> value
     *
     * @return boolean
     */
    public function getUseDataFromdstoreifinNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <use_data_fromdstoreifin_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_ModifyNodeProperties_Ad\Parameters
     */
    public function setUseDataFromdstoreifinNull( $value){
      return $this->_set(1009, $value);
    }
  }
}

