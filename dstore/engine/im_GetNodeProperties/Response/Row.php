<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetNodeProperties.proto
//   Date: 2015-10-06 11:19:47

namespace dstore\engine\im_GetNodeProperties\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $active = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $details = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $unit_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $characteristic_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $characteristic_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $value_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $unit_symbol = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $deleted = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $valid_to_char = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $inherits_from_tree_node_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $valid_to = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $valid_from = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $inherits_from_node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $valid_from_char = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetNodeProperties.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE details = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "details";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE characteristic_description = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "characteristic_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE characteristic_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_symbol = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE deleted = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "deleted";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to_char = 30002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30002;
      $f->name      = "valid_to_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inherits_from_tree_node_id = 30009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30009;
      $f->name      = "inherits_from_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_to = 30010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30010;
      $f->name      = "valid_to";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from = 30014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30014;
      $f->name      = "valid_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inherits_from_node_id = 30016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30016;
      $f->name      = "inherits_from_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from_char = 30017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30017;
      $f->name      = "valid_from_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearActive(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getActive(){
      return $this->_get(10001);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <details> has a value
     *
     * @return boolean
     */
    public function hasDetails(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <details> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearDetails(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <details> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDetails(){
      return $this->_get(10002);
    }
    
    /**
     * Set <details> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setDetails(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <unit_id> has a value
     *
     * @return boolean
     */
    public function hasUnitId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <unit_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearUnitId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <unit_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUnitId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <unit_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setUnitId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <characteristic_description> has a value
     *
     * @return boolean
     */
    public function hasCharacteristicDescription(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <characteristic_description> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearCharacteristicDescription(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <characteristic_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCharacteristicDescription(){
      return $this->_get(10004);
    }
    
    /**
     * Set <characteristic_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setCharacteristicDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearTreeNodeId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValue(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue(){
      return $this->_get(10007);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValue(\dstore\engine\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasCharacteristicId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <characteristic_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearCharacteristicId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCharacteristicId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <value_id> has a value
     *
     * @return boolean
     */
    public function hasValueId(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <value_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValueId(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <value_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getValueId(){
      return $this->_get(10009);
    }
    
    /**
     * Set <value_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValueId(\dstore\engine\values\integerValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasUnitSymbol(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <unit_symbol> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearUnitSymbol(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <unit_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUnitSymbol(){
      return $this->_get(10010);
    }
    
    /**
     * Set <unit_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setUnitSymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <deleted> has a value
     *
     * @return boolean
     */
    public function hasDeleted(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <deleted> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearDeleted(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <deleted> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeleted(){
      return $this->_get(10011);
    }
    
    /**
     * Set <deleted> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setDeleted(\dstore\engine\values\booleanValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <valid_to_char> has a value
     *
     * @return boolean
     */
    public function hasValidToChar(){
      return $this->_has(30002);
    }
    
    /**
     * Clear <valid_to_char> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValidToChar(){
      return $this->_clear(30002);
    }
    
    /**
     * Get <valid_to_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValidToChar(){
      return $this->_get(30002);
    }
    
    /**
     * Set <valid_to_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValidToChar(\dstore\engine\values\stringValue $value){
      return $this->_set(30002, $value);
    }
    
    /**
     * Check if <inherits_from_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasInheritsFromTreeNodeId(){
      return $this->_has(30009);
    }
    
    /**
     * Clear <inherits_from_tree_node_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearInheritsFromTreeNodeId(){
      return $this->_clear(30009);
    }
    
    /**
     * Get <inherits_from_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInheritsFromTreeNodeId(){
      return $this->_get(30009);
    }
    
    /**
     * Set <inherits_from_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setInheritsFromTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(30009, $value);
    }
    
    /**
     * Check if <valid_to> has a value
     *
     * @return boolean
     */
    public function hasValidTo(){
      return $this->_has(30010);
    }
    
    /**
     * Clear <valid_to> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValidTo(){
      return $this->_clear(30010);
    }
    
    /**
     * Get <valid_to> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getValidTo(){
      return $this->_get(30010);
    }
    
    /**
     * Set <valid_to> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValidTo(\dstore\engine\values\timestampValue $value){
      return $this->_set(30010, $value);
    }
    
    /**
     * Check if <valid_from> has a value
     *
     * @return boolean
     */
    public function hasValidFrom(){
      return $this->_has(30014);
    }
    
    /**
     * Clear <valid_from> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValidFrom(){
      return $this->_clear(30014);
    }
    
    /**
     * Get <valid_from> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getValidFrom(){
      return $this->_get(30014);
    }
    
    /**
     * Set <valid_from> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValidFrom(\dstore\engine\values\timestampValue $value){
      return $this->_set(30014, $value);
    }
    
    /**
     * Check if <inherits_from_node_id> has a value
     *
     * @return boolean
     */
    public function hasInheritsFromNodeId(){
      return $this->_has(30016);
    }
    
    /**
     * Clear <inherits_from_node_id> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearInheritsFromNodeId(){
      return $this->_clear(30016);
    }
    
    /**
     * Get <inherits_from_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInheritsFromNodeId(){
      return $this->_get(30016);
    }
    
    /**
     * Set <inherits_from_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setInheritsFromNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(30016, $value);
    }
    
    /**
     * Check if <valid_from_char> has a value
     *
     * @return boolean
     */
    public function hasValidFromChar(){
      return $this->_has(30017);
    }
    
    /**
     * Clear <valid_from_char> value
     *
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function clearValidFromChar(){
      return $this->_clear(30017);
    }
    
    /**
     * Get <valid_from_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValidFromChar(){
      return $this->_get(30017);
    }
    
    /**
     * Set <valid_from_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetNodeProperties\Response\Row
     */
    public function setValidFromChar(\dstore\engine\values\stringValue $value){
      return $this->_set(30017, $value);
    }
  }
}

