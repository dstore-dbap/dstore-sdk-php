<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetUsedValues_Pu.proto
//   Date: 2016-05-19 08:07:43

namespace dstore\engine\im_GetUsedValues_Pu {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var boolean */
    public $node_characteristic_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var boolean */
    public $tree_node_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $max_level_no = null;
    
    /**  @var boolean */
    public $max_level_no_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $binary_characteristic_value_id = null;
    
    /**  @var boolean */
    public $binary_characteristic_value_id_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $method = null;
    
    /**  @var boolean */
    public $method_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $filter_by_characteristic_id = null;
    
    /**  @var boolean */
    public $filter_by_characteristic_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $filter_by_charac_value = null;
    
    /**  @var boolean */
    public $filter_by_charac_value_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $negate_filter_by_params = null;
    
    /**  @var boolean */
    public $negate_filter_by_params_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $include_number_of_nodes_in_result = null;
    
    /**  @var boolean */
    public $include_number_of_nodes_in_result_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $ids_in_one_id = null;
    
    /**  @var boolean */
    public $ids_in_one_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $characteristic_id_list = null;
    
    /**  @var boolean */
    public $characteristic_id_list_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $get_value_details = null;
    
    /**  @var boolean */
    public $get_value_details_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetUsedValues_Pu.Parameters');

      // OPTIONAL MESSAGE node_characteristic_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL node_characteristic_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "node_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_level_no = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "max_level_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL max_level_no_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "max_level_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_characteristic_value_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "binary_characteristic_value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL binary_characteristic_value_id_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "binary_characteristic_value_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE method = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "method";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL method_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "method_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter_by_characteristic_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "filter_by_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL filter_by_characteristic_id_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "filter_by_characteristic_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE filter_by_charac_value = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "filter_by_charac_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL filter_by_charac_value_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "filter_by_charac_value_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE negate_filter_by_params = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "negate_filter_by_params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL negate_filter_by_params_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "negate_filter_by_params_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_number_of_nodes_in_result = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "include_number_of_nodes_in_result";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_number_of_nodes_in_result_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "include_number_of_nodes_in_result_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ids_in_one_id = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "ids_in_one_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL ids_in_one_id_null = 1010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1010;
      $f->name      = "ids_in_one_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE characteristic_id_list = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "characteristic_id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL characteristic_id_list_null = 1011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1011;
      $f->name      = "characteristic_id_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE get_value_details = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "get_value_details";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL get_value_details_null = 1012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1012;
      $f->name      = "get_value_details_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(1);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setNodeCharacteristicId(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <node_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <node_characteristic_id_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearNodeCharacteristicIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <node_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getNodeCharacteristicIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <node_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setNodeCharacteristicIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearTreeNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setTreeNodeId(\dstore\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <tree_node_id_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearTreeNodeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <tree_node_id_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setTreeNodeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <max_level_no> has a value
     *
     * @return boolean
     */
    public function hasMaxLevelNo(){
      return $this->_has(3);
    }
    
    /**
     * Clear <max_level_no> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearMaxLevelNo(){
      return $this->_clear(3);
    }
    
    /**
     * Get <max_level_no> value
     *
     * @return \dstore\values\integerValue
     */
    public function getMaxLevelNo(){
      return $this->_get(3);
    }
    
    /**
     * Set <max_level_no> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setMaxLevelNo(\dstore\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <max_level_no_null> has a value
     *
     * @return boolean
     */
    public function hasMaxLevelNoNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <max_level_no_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearMaxLevelNoNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <max_level_no_null> value
     *
     * @return boolean
     */
    public function getMaxLevelNoNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <max_level_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setMaxLevelNoNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <binary_characteristic_value_id> has a value
     *
     * @return boolean
     */
    public function hasBinaryCharacteristicValueId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <binary_characteristic_value_id> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearBinaryCharacteristicValueId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <binary_characteristic_value_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getBinaryCharacteristicValueId(){
      return $this->_get(4);
    }
    
    /**
     * Set <binary_characteristic_value_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setBinaryCharacteristicValueId(\dstore\values\integerValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <binary_characteristic_value_id_null> has a value
     *
     * @return boolean
     */
    public function hasBinaryCharacteristicValueIdNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <binary_characteristic_value_id_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearBinaryCharacteristicValueIdNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <binary_characteristic_value_id_null> value
     *
     * @return boolean
     */
    public function getBinaryCharacteristicValueIdNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <binary_characteristic_value_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setBinaryCharacteristicValueIdNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <method> has a value
     *
     * @return boolean
     */
    public function hasMethod(){
      return $this->_has(5);
    }
    
    /**
     * Clear <method> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearMethod(){
      return $this->_clear(5);
    }
    
    /**
     * Get <method> value
     *
     * @return \dstore\values\integerValue
     */
    public function getMethod(){
      return $this->_get(5);
    }
    
    /**
     * Set <method> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setMethod(\dstore\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <method_null> has a value
     *
     * @return boolean
     */
    public function hasMethodNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <method_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearMethodNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <method_null> value
     *
     * @return boolean
     */
    public function getMethodNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <method_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setMethodNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <filter_by_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacteristicId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <filter_by_characteristic_id> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearFilterByCharacteristicId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <filter_by_characteristic_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getFilterByCharacteristicId(){
      return $this->_get(6);
    }
    
    /**
     * Set <filter_by_characteristic_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setFilterByCharacteristicId(\dstore\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <filter_by_characteristic_id_null> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacteristicIdNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <filter_by_characteristic_id_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearFilterByCharacteristicIdNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <filter_by_characteristic_id_null> value
     *
     * @return boolean
     */
    public function getFilterByCharacteristicIdNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <filter_by_characteristic_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setFilterByCharacteristicIdNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <filter_by_charac_value> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacValue(){
      return $this->_has(7);
    }
    
    /**
     * Clear <filter_by_charac_value> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearFilterByCharacValue(){
      return $this->_clear(7);
    }
    
    /**
     * Get <filter_by_charac_value> value
     *
     * @return \dstore\values\stringValue
     */
    public function getFilterByCharacValue(){
      return $this->_get(7);
    }
    
    /**
     * Set <filter_by_charac_value> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setFilterByCharacValue(\dstore\values\stringValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <filter_by_charac_value_null> has a value
     *
     * @return boolean
     */
    public function hasFilterByCharacValueNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <filter_by_charac_value_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearFilterByCharacValueNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <filter_by_charac_value_null> value
     *
     * @return boolean
     */
    public function getFilterByCharacValueNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <filter_by_charac_value_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setFilterByCharacValueNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <negate_filter_by_params> has a value
     *
     * @return boolean
     */
    public function hasNegateFilterByParams(){
      return $this->_has(8);
    }
    
    /**
     * Clear <negate_filter_by_params> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearNegateFilterByParams(){
      return $this->_clear(8);
    }
    
    /**
     * Get <negate_filter_by_params> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getNegateFilterByParams(){
      return $this->_get(8);
    }
    
    /**
     * Set <negate_filter_by_params> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setNegateFilterByParams(\dstore\values\booleanValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <negate_filter_by_params_null> has a value
     *
     * @return boolean
     */
    public function hasNegateFilterByParamsNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <negate_filter_by_params_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearNegateFilterByParamsNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <negate_filter_by_params_null> value
     *
     * @return boolean
     */
    public function getNegateFilterByParamsNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <negate_filter_by_params_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setNegateFilterByParamsNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <include_number_of_nodes_in_result> has a value
     *
     * @return boolean
     */
    public function hasIncludeNumberOfNodesInResult(){
      return $this->_has(9);
    }
    
    /**
     * Clear <include_number_of_nodes_in_result> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearIncludeNumberOfNodesInResult(){
      return $this->_clear(9);
    }
    
    /**
     * Get <include_number_of_nodes_in_result> value
     *
     * @return \dstore\values\integerValue
     */
    public function getIncludeNumberOfNodesInResult(){
      return $this->_get(9);
    }
    
    /**
     * Set <include_number_of_nodes_in_result> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setIncludeNumberOfNodesInResult(\dstore\values\integerValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <include_number_of_nodes_in_result_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeNumberOfNodesInResultNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <include_number_of_nodes_in_result_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearIncludeNumberOfNodesInResultNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <include_number_of_nodes_in_result_null> value
     *
     * @return boolean
     */
    public function getIncludeNumberOfNodesInResultNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <include_number_of_nodes_in_result_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setIncludeNumberOfNodesInResultNull( $value){
      return $this->_set(1009, $value);
    }
    
    /**
     * Check if <ids_in_one_id> has a value
     *
     * @return boolean
     */
    public function hasIdsInOneId(){
      return $this->_has(10);
    }
    
    /**
     * Clear <ids_in_one_id> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearIdsInOneId(){
      return $this->_clear(10);
    }
    
    /**
     * Get <ids_in_one_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getIdsInOneId(){
      return $this->_get(10);
    }
    
    /**
     * Set <ids_in_one_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setIdsInOneId(\dstore\values\integerValue $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <ids_in_one_id_null> has a value
     *
     * @return boolean
     */
    public function hasIdsInOneIdNull(){
      return $this->_has(1010);
    }
    
    /**
     * Clear <ids_in_one_id_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearIdsInOneIdNull(){
      return $this->_clear(1010);
    }
    
    /**
     * Get <ids_in_one_id_null> value
     *
     * @return boolean
     */
    public function getIdsInOneIdNull(){
      return $this->_get(1010);
    }
    
    /**
     * Set <ids_in_one_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setIdsInOneIdNull( $value){
      return $this->_set(1010, $value);
    }
    
    /**
     * Check if <characteristic_id_list> has a value
     *
     * @return boolean
     */
    public function hasCharacteristicIdList(){
      return $this->_has(11);
    }
    
    /**
     * Clear <characteristic_id_list> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearCharacteristicIdList(){
      return $this->_clear(11);
    }
    
    /**
     * Get <characteristic_id_list> value
     *
     * @return \dstore\values\stringValue
     */
    public function getCharacteristicIdList(){
      return $this->_get(11);
    }
    
    /**
     * Set <characteristic_id_list> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setCharacteristicIdList(\dstore\values\stringValue $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <characteristic_id_list_null> has a value
     *
     * @return boolean
     */
    public function hasCharacteristicIdListNull(){
      return $this->_has(1011);
    }
    
    /**
     * Clear <characteristic_id_list_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearCharacteristicIdListNull(){
      return $this->_clear(1011);
    }
    
    /**
     * Get <characteristic_id_list_null> value
     *
     * @return boolean
     */
    public function getCharacteristicIdListNull(){
      return $this->_get(1011);
    }
    
    /**
     * Set <characteristic_id_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setCharacteristicIdListNull( $value){
      return $this->_set(1011, $value);
    }
    
    /**
     * Check if <get_value_details> has a value
     *
     * @return boolean
     */
    public function hasGetValueDetails(){
      return $this->_has(12);
    }
    
    /**
     * Clear <get_value_details> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearGetValueDetails(){
      return $this->_clear(12);
    }
    
    /**
     * Get <get_value_details> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getGetValueDetails(){
      return $this->_get(12);
    }
    
    /**
     * Set <get_value_details> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setGetValueDetails(\dstore\values\booleanValue $value){
      return $this->_set(12, $value);
    }
    
    /**
     * Check if <get_value_details_null> has a value
     *
     * @return boolean
     */
    public function hasGetValueDetailsNull(){
      return $this->_has(1012);
    }
    
    /**
     * Clear <get_value_details_null> value
     *
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function clearGetValueDetailsNull(){
      return $this->_clear(1012);
    }
    
    /**
     * Get <get_value_details_null> value
     *
     * @return boolean
     */
    public function getGetValueDetailsNull(){
      return $this->_get(1012);
    }
    
    /**
     * Set <get_value_details_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetUsedValues_Pu\Parameters
     */
    public function setGetValueDetailsNull( $value){
      return $this->_set(1012, $value);
    }
  }
}

