<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_InsertTempdb_AnyValues.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_InsertTempdb_AnyValues {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $id_list = null;
    
    /**  @var boolean */
    public $id_list_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value_list = null;
    
    /**  @var boolean */
    public $value_list_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete = null;
    
    /**  @var boolean */
    public $delete_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $separator = null;
    
    /**  @var boolean */
    public $separator_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $check_byte_length_for_strings = null;
    
    /**  @var boolean */
    public $check_byte_length_for_strings_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_InsertTempdb_AnyValues.Parameters');

      // OPTIONAL MESSAGE id_list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL id_list_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "id_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_list = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL value_list_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "value_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "delete";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "delete_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE separator = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "separator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL separator_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "separator_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE check_byte_length_for_strings = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "check_byte_length_for_strings";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL check_byte_length_for_strings_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "check_byte_length_for_strings_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <id_list> has a value
     *
     * @return boolean
     */
    public function hasIdList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <id_list> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearIdList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <id_list> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getIdList(){
      return $this->_get(1);
    }
    
    /**
     * Set <id_list> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setIdList(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <id_list_null> has a value
     *
     * @return boolean
     */
    public function hasIdListNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <id_list_null> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearIdListNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <id_list_null> value
     *
     * @return boolean
     */
    public function getIdListNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <id_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setIdListNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <value_list> has a value
     *
     * @return boolean
     */
    public function hasValueList(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value_list> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearValueList(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value_list> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValueList(){
      return $this->_get(2);
    }
    
    /**
     * Set <value_list> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setValueList(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <value_list_null> has a value
     *
     * @return boolean
     */
    public function hasValueListNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <value_list_null> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearValueListNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <value_list_null> value
     *
     * @return boolean
     */
    public function getValueListNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <value_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setValueListNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <delete> has a value
     *
     * @return boolean
     */
    public function hasDelete(){
      return $this->_has(3);
    }
    
    /**
     * Clear <delete> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearDelete(){
      return $this->_clear(3);
    }
    
    /**
     * Get <delete> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDelete(){
      return $this->_get(3);
    }
    
    /**
     * Set <delete> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setDelete(\dstore\engine\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <delete_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <delete_null> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearDeleteNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <delete_null> value
     *
     * @return boolean
     */
    public function getDeleteNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <delete_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setDeleteNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <separator> has a value
     *
     * @return boolean
     */
    public function hasSeparator(){
      return $this->_has(4);
    }
    
    /**
     * Clear <separator> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearSeparator(){
      return $this->_clear(4);
    }
    
    /**
     * Get <separator> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSeparator(){
      return $this->_get(4);
    }
    
    /**
     * Set <separator> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setSeparator(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <separator_null> has a value
     *
     * @return boolean
     */
    public function hasSeparatorNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <separator_null> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearSeparatorNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <separator_null> value
     *
     * @return boolean
     */
    public function getSeparatorNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <separator_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setSeparatorNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <check_byte_length_for_strings> has a value
     *
     * @return boolean
     */
    public function hasCheckByteLengthForStrings(){
      return $this->_has(5);
    }
    
    /**
     * Clear <check_byte_length_for_strings> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearCheckByteLengthForStrings(){
      return $this->_clear(5);
    }
    
    /**
     * Get <check_byte_length_for_strings> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCheckByteLengthForStrings(){
      return $this->_get(5);
    }
    
    /**
     * Set <check_byte_length_for_strings> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setCheckByteLengthForStrings(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <check_byte_length_for_strings_null> has a value
     *
     * @return boolean
     */
    public function hasCheckByteLengthForStringsNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <check_byte_length_for_strings_null> value
     *
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function clearCheckByteLengthForStringsNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <check_byte_length_for_strings_null> value
     *
     * @return boolean
     */
    public function getCheckByteLengthForStringsNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <check_byte_length_for_strings_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_InsertTempdb_AnyValues\Parameters
     */
    public function setCheckByteLengthForStringsNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

