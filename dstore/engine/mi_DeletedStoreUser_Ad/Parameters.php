<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_DeletedStoreUser_Ad.proto
//   Date: 2016-05-19 08:07:44

namespace dstore\engine\mi_DeletedStoreUser_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\stringValue */
    public $user_name = null;
    
    /**  @var boolean */
    public $user_name_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $invalidate_user_in_user_info = null;
    
    /**  @var boolean */
    public $invalidate_user_in_user_info_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $only_delete_user_from_this_engine = null;
    
    /**  @var boolean */
    public $only_delete_user_from_this_engine_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $drop_login_when_d_b_is_not_available = null;
    
    /**  @var boolean */
    public $drop_login_when_d_b_is_not_available_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $kill_processes_for_user_first = null;
    
    /**  @var boolean */
    public $kill_processes_for_user_first_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_DeletedStoreUser_Ad.Parameters');

      // OPTIONAL MESSAGE user_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL user_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "user_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE invalidate_user_in_user_info = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "invalidate_user_in_user_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL invalidate_user_in_user_info_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "invalidate_user_in_user_info_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE only_delete_user_from_this_engine = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "only_delete_user_from_this_engine";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL only_delete_user_from_this_engine_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "only_delete_user_from_this_engine_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE drop_login_when_d_b_is_not_available = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "drop_login_when_d_b_is_not_available";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL drop_login_when_d_b_is_not_available_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "drop_login_when_d_b_is_not_available_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE kill_processes_for_user_first = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "kill_processes_for_user_first";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL kill_processes_for_user_first_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "kill_processes_for_user_first_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearUserName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\values\stringValue
     */
    public function getUserName(){
      return $this->_get(1);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setUserName(\dstore\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user_name_null> has a value
     *
     * @return boolean
     */
    public function hasUserNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <user_name_null> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearUserNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <user_name_null> value
     *
     * @return boolean
     */
    public function getUserNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <user_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setUserNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <invalidate_user_in_user_info> has a value
     *
     * @return boolean
     */
    public function hasInvalidateUserInUserInfo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <invalidate_user_in_user_info> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearInvalidateUserInUserInfo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <invalidate_user_in_user_info> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getInvalidateUserInUserInfo(){
      return $this->_get(2);
    }
    
    /**
     * Set <invalidate_user_in_user_info> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setInvalidateUserInUserInfo(\dstore\values\booleanValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <invalidate_user_in_user_info_null> has a value
     *
     * @return boolean
     */
    public function hasInvalidateUserInUserInfoNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <invalidate_user_in_user_info_null> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearInvalidateUserInUserInfoNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <invalidate_user_in_user_info_null> value
     *
     * @return boolean
     */
    public function getInvalidateUserInUserInfoNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <invalidate_user_in_user_info_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setInvalidateUserInUserInfoNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <only_delete_user_from_this_engine> has a value
     *
     * @return boolean
     */
    public function hasOnlyDeleteUserFromThisEngine(){
      return $this->_has(3);
    }
    
    /**
     * Clear <only_delete_user_from_this_engine> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearOnlyDeleteUserFromThisEngine(){
      return $this->_clear(3);
    }
    
    /**
     * Get <only_delete_user_from_this_engine> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getOnlyDeleteUserFromThisEngine(){
      return $this->_get(3);
    }
    
    /**
     * Set <only_delete_user_from_this_engine> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setOnlyDeleteUserFromThisEngine(\dstore\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <only_delete_user_from_this_engine_null> has a value
     *
     * @return boolean
     */
    public function hasOnlyDeleteUserFromThisEngineNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <only_delete_user_from_this_engine_null> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearOnlyDeleteUserFromThisEngineNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <only_delete_user_from_this_engine_null> value
     *
     * @return boolean
     */
    public function getOnlyDeleteUserFromThisEngineNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <only_delete_user_from_this_engine_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setOnlyDeleteUserFromThisEngineNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <drop_login_when_d_b_is_not_available> has a value
     *
     * @return boolean
     */
    public function hasDropLoginWhenDBIsNotAvailable(){
      return $this->_has(4);
    }
    
    /**
     * Clear <drop_login_when_d_b_is_not_available> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearDropLoginWhenDBIsNotAvailable(){
      return $this->_clear(4);
    }
    
    /**
     * Get <drop_login_when_d_b_is_not_available> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getDropLoginWhenDBIsNotAvailable(){
      return $this->_get(4);
    }
    
    /**
     * Set <drop_login_when_d_b_is_not_available> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setDropLoginWhenDBIsNotAvailable(\dstore\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <drop_login_when_d_b_is_not_available_null> has a value
     *
     * @return boolean
     */
    public function hasDropLoginWhenDBIsNotAvailableNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <drop_login_when_d_b_is_not_available_null> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearDropLoginWhenDBIsNotAvailableNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <drop_login_when_d_b_is_not_available_null> value
     *
     * @return boolean
     */
    public function getDropLoginWhenDBIsNotAvailableNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <drop_login_when_d_b_is_not_available_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setDropLoginWhenDBIsNotAvailableNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <kill_processes_for_user_first> has a value
     *
     * @return boolean
     */
    public function hasKillProcessesForUserFirst(){
      return $this->_has(5);
    }
    
    /**
     * Clear <kill_processes_for_user_first> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearKillProcessesForUserFirst(){
      return $this->_clear(5);
    }
    
    /**
     * Get <kill_processes_for_user_first> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getKillProcessesForUserFirst(){
      return $this->_get(5);
    }
    
    /**
     * Set <kill_processes_for_user_first> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setKillProcessesForUserFirst(\dstore\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <kill_processes_for_user_first_null> has a value
     *
     * @return boolean
     */
    public function hasKillProcessesForUserFirstNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <kill_processes_for_user_first_null> value
     *
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function clearKillProcessesForUserFirstNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <kill_processes_for_user_first_null> value
     *
     * @return boolean
     */
    public function getKillProcessesForUserFirstNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <kill_processes_for_user_first_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_DeletedStoreUser_Ad\Parameters
     */
    public function setKillProcessesForUserFirstNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

