<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetChangeOStateTrigger_Ad.proto
//   Date: 2015-10-06 11:19:57

namespace dstore\engine\om_GetChangeOStateTrigger_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $ignore_pos_already_in_order_state = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $suitable_for_order_state_id_list = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $change_order_state_trigger_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetChangeOStateTrigger_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ignore_pos_already_in_order_state = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "ignore_pos_already_in_order_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE suitable_for_order_state_id_list = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "suitable_for_order_state_id_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE change_order_state_trigger_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "change_order_state_trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <ignore_pos_already_in_order_state> has a value
     *
     * @return boolean
     */
    public function hasIgnorePosAlreadyInOrderState(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <ignore_pos_already_in_order_state> value
     *
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function clearIgnorePosAlreadyInOrderState(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <ignore_pos_already_in_order_state> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIgnorePosAlreadyInOrderState(){
      return $this->_get(10001);
    }
    
    /**
     * Set <ignore_pos_already_in_order_state> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function setIgnorePosAlreadyInOrderState(\dstore\engine\values\booleanValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <suitable_for_order_state_id_list> has a value
     *
     * @return boolean
     */
    public function hasSuitableForOrderStateIdList(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <suitable_for_order_state_id_list> value
     *
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function clearSuitableForOrderStateIdList(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <suitable_for_order_state_id_list> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSuitableForOrderStateIdList(){
      return $this->_get(10002);
    }
    
    /**
     * Set <suitable_for_order_state_id_list> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function setSuitableForOrderStateIdList(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <change_order_state_trigger_id> has a value
     *
     * @return boolean
     */
    public function hasChangeOrderStateTriggerId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <change_order_state_trigger_id> value
     *
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function clearChangeOrderStateTriggerId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <change_order_state_trigger_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getChangeOrderStateTriggerId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <change_order_state_trigger_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetChangeOStateTrigger_Ad\Response\Row
     */
    public function setChangeOrderStateTriggerId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
  }
}

