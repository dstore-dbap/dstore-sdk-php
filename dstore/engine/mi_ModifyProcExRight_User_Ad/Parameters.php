<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ModifyProcExRight_User_Ad.proto
//   Date: 2015-10-06 11:19:54

namespace dstore\engine\mi_ModifyProcExRight_User_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $procedure_id = null;
    
    /**  @var boolean */
    public $procedure_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $user_id = null;
    
    /**  @var boolean */
    public $user_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $execution_right = null;
    
    /**  @var boolean */
    public $execution_right_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $procedure_name = null;
    
    /**  @var boolean */
    public $procedure_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $user_name = null;
    
    /**  @var boolean */
    public $user_name_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ModifyProcExRight_User_Ad.Parameters');

      // OPTIONAL MESSAGE procedure_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "procedure_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL user_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "user_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE execution_right = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "execution_right";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL execution_right_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "execution_right_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL procedure_name_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "procedure_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE user_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL user_name_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "user_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_id> has a value
     *
     * @return boolean
     */
    public function hasProcedureId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_id> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearProcedureId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getProcedureId(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setProcedureId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <procedure_id_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <procedure_id_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearProcedureIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <procedure_id_null> value
     *
     * @return boolean
     */
    public function getProcedureIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <procedure_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setProcedureIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <user_id> has a value
     *
     * @return boolean
     */
    public function hasUserId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <user_id> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearUserId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUserId(){
      return $this->_get(2);
    }
    
    /**
     * Set <user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <user_id_null> has a value
     *
     * @return boolean
     */
    public function hasUserIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <user_id_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearUserIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <user_id_null> value
     *
     * @return boolean
     */
    public function getUserIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <user_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setUserIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <execution_right> has a value
     *
     * @return boolean
     */
    public function hasExecutionRight(){
      return $this->_has(3);
    }
    
    /**
     * Clear <execution_right> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearExecutionRight(){
      return $this->_clear(3);
    }
    
    /**
     * Get <execution_right> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getExecutionRight(){
      return $this->_get(3);
    }
    
    /**
     * Set <execution_right> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setExecutionRight(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <execution_right_null> has a value
     *
     * @return boolean
     */
    public function hasExecutionRightNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <execution_right_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearExecutionRightNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <execution_right_null> value
     *
     * @return boolean
     */
    public function getExecutionRightNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <execution_right_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setExecutionRightNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearProcedureName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(4);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <procedure_name_null> has a value
     *
     * @return boolean
     */
    public function hasProcedureNameNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <procedure_name_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearProcedureNameNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <procedure_name_null> value
     *
     * @return boolean
     */
    public function getProcedureNameNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <procedure_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setProcedureNameNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearUserName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUserName(){
      return $this->_get(5);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setUserName(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <user_name_null> has a value
     *
     * @return boolean
     */
    public function hasUserNameNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <user_name_null> value
     *
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function clearUserNameNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <user_name_null> value
     *
     * @return boolean
     */
    public function getUserNameNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <user_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyProcExRight_User_Ad\Parameters
     */
    public function setUserNameNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

