<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_ModifyPaymentTypeSurch_Ad.proto
//   Date: 2015-10-06 11:20:03

namespace dstore\engine\om_ModifyPaymentTypeSurch_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $payment_type_id = null;
    
    /**  @var boolean */
    public $payment_type_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var boolean */
    public $surcharge_type_id_null = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $surcharge_value = null;
    
    /**  @var boolean */
    public $surcharge_value_null = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $valid_from = null;
    
    /**  @var boolean */
    public $valid_from_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $priority_no = null;
    
    /**  @var boolean */
    public $priority_no_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete_configuration = null;
    
    /**  @var boolean */
    public $delete_configuration_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_ModifyPaymentTypeSurch_Ad.Parameters');

      // OPTIONAL MESSAGE payment_type_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "payment_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL payment_type_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "payment_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL surcharge_type_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "surcharge_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_value = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "surcharge_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL surcharge_value_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "surcharge_value_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE valid_from = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "valid_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL valid_from_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "valid_from_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE priority_no = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "priority_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL priority_no_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "priority_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_configuration = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "delete_configuration";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_configuration_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "delete_configuration_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <payment_type_id> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <payment_type_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearPaymentTypeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <payment_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPaymentTypeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <payment_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setPaymentTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <payment_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <payment_type_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearPaymentTypeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <payment_type_id_null> value
     *
     * @return boolean
     */
    public function getPaymentTypeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <payment_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setPaymentTypeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setSurchargeTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <surcharge_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <surcharge_type_id_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearSurchargeTypeIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <surcharge_type_id_null> value
     *
     * @return boolean
     */
    public function getSurchargeTypeIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <surcharge_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setSurchargeTypeIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <surcharge_value> has a value
     *
     * @return boolean
     */
    public function hasSurchargeValue(){
      return $this->_has(3);
    }
    
    /**
     * Clear <surcharge_value> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearSurchargeValue(){
      return $this->_clear(3);
    }
    
    /**
     * Get <surcharge_value> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getSurchargeValue(){
      return $this->_get(3);
    }
    
    /**
     * Set <surcharge_value> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setSurchargeValue(\dstore\engine\values\decimalValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <surcharge_value_null> has a value
     *
     * @return boolean
     */
    public function hasSurchargeValueNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <surcharge_value_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearSurchargeValueNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <surcharge_value_null> value
     *
     * @return boolean
     */
    public function getSurchargeValueNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <surcharge_value_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setSurchargeValueNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <valid_from> has a value
     *
     * @return boolean
     */
    public function hasValidFrom(){
      return $this->_has(4);
    }
    
    /**
     * Clear <valid_from> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearValidFrom(){
      return $this->_clear(4);
    }
    
    /**
     * Get <valid_from> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getValidFrom(){
      return $this->_get(4);
    }
    
    /**
     * Set <valid_from> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setValidFrom(\dstore\engine\values\timestampValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <valid_from_null> has a value
     *
     * @return boolean
     */
    public function hasValidFromNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <valid_from_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearValidFromNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <valid_from_null> value
     *
     * @return boolean
     */
    public function getValidFromNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <valid_from_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setValidFromNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <priority_no> has a value
     *
     * @return boolean
     */
    public function hasPriorityNo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <priority_no> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearPriorityNo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <priority_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPriorityNo(){
      return $this->_get(5);
    }
    
    /**
     * Set <priority_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setPriorityNo(\dstore\engine\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <priority_no_null> has a value
     *
     * @return boolean
     */
    public function hasPriorityNoNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <priority_no_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearPriorityNoNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <priority_no_null> value
     *
     * @return boolean
     */
    public function getPriorityNoNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <priority_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setPriorityNoNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <delete_configuration> has a value
     *
     * @return boolean
     */
    public function hasDeleteConfiguration(){
      return $this->_has(6);
    }
    
    /**
     * Clear <delete_configuration> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearDeleteConfiguration(){
      return $this->_clear(6);
    }
    
    /**
     * Get <delete_configuration> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeleteConfiguration(){
      return $this->_get(6);
    }
    
    /**
     * Set <delete_configuration> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setDeleteConfiguration(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <delete_configuration_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteConfigurationNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <delete_configuration_null> value
     *
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function clearDeleteConfigurationNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <delete_configuration_null> value
     *
     * @return boolean
     */
    public function getDeleteConfigurationNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <delete_configuration_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifyPaymentTypeSurch_Ad\Parameters
     */
    public function setDeleteConfigurationNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

