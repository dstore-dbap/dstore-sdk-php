<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetDBObjects_Ad.proto
//   Date: 2015-10-06 11:19:51

namespace dstore\engine\mi_GetDBObjects_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $object_type = null;
    
    /**  @var boolean */
    public $object_type_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $output_into_one_id = null;
    
    /**  @var boolean */
    public $output_into_one_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $object_name_like = null;
    
    /**  @var boolean */
    public $object_name_like_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $get_dependent_objects = null;
    
    /**  @var boolean */
    public $get_dependent_objects_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $database_name = null;
    
    /**  @var boolean */
    public $database_name_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetDBObjects_Ad.Parameters');

      // OPTIONAL MESSAGE object_type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "object_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL object_type_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "object_type_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE output_into_one_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "output_into_one_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL output_into_one_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "output_into_one_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE object_name_like = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "object_name_like";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL object_name_like_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "object_name_like_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE get_dependent_objects = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "get_dependent_objects";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL get_dependent_objects_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "get_dependent_objects_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE database_name = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "database_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL database_name_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "database_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <object_type> has a value
     *
     * @return boolean
     */
    public function hasObjectType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <object_type> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearObjectType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <object_type> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getObjectType(){
      return $this->_get(1);
    }
    
    /**
     * Set <object_type> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setObjectType(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <object_type_null> has a value
     *
     * @return boolean
     */
    public function hasObjectTypeNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <object_type_null> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearObjectTypeNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <object_type_null> value
     *
     * @return boolean
     */
    public function getObjectTypeNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <object_type_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setObjectTypeNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <output_into_one_id> has a value
     *
     * @return boolean
     */
    public function hasOutputIntoOneId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <output_into_one_id> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearOutputIntoOneId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <output_into_one_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOutputIntoOneId(){
      return $this->_get(2);
    }
    
    /**
     * Set <output_into_one_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setOutputIntoOneId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <output_into_one_id_null> has a value
     *
     * @return boolean
     */
    public function hasOutputIntoOneIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <output_into_one_id_null> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearOutputIntoOneIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <output_into_one_id_null> value
     *
     * @return boolean
     */
    public function getOutputIntoOneIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <output_into_one_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setOutputIntoOneIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <object_name_like> has a value
     *
     * @return boolean
     */
    public function hasObjectNameLike(){
      return $this->_has(3);
    }
    
    /**
     * Clear <object_name_like> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearObjectNameLike(){
      return $this->_clear(3);
    }
    
    /**
     * Get <object_name_like> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getObjectNameLike(){
      return $this->_get(3);
    }
    
    /**
     * Set <object_name_like> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setObjectNameLike(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <object_name_like_null> has a value
     *
     * @return boolean
     */
    public function hasObjectNameLikeNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <object_name_like_null> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearObjectNameLikeNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <object_name_like_null> value
     *
     * @return boolean
     */
    public function getObjectNameLikeNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <object_name_like_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setObjectNameLikeNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <get_dependent_objects> has a value
     *
     * @return boolean
     */
    public function hasGetDependentObjects(){
      return $this->_has(4);
    }
    
    /**
     * Clear <get_dependent_objects> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearGetDependentObjects(){
      return $this->_clear(4);
    }
    
    /**
     * Get <get_dependent_objects> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getGetDependentObjects(){
      return $this->_get(4);
    }
    
    /**
     * Set <get_dependent_objects> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setGetDependentObjects(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <get_dependent_objects_null> has a value
     *
     * @return boolean
     */
    public function hasGetDependentObjectsNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <get_dependent_objects_null> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearGetDependentObjectsNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <get_dependent_objects_null> value
     *
     * @return boolean
     */
    public function getGetDependentObjectsNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <get_dependent_objects_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setGetDependentObjectsNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <database_name> has a value
     *
     * @return boolean
     */
    public function hasDatabaseName(){
      return $this->_has(5);
    }
    
    /**
     * Clear <database_name> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearDatabaseName(){
      return $this->_clear(5);
    }
    
    /**
     * Get <database_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDatabaseName(){
      return $this->_get(5);
    }
    
    /**
     * Set <database_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setDatabaseName(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <database_name_null> has a value
     *
     * @return boolean
     */
    public function hasDatabaseNameNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <database_name_null> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function clearDatabaseNameNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <database_name_null> value
     *
     * @return boolean
     */
    public function getDatabaseNameNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <database_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Parameters
     */
    public function setDatabaseNameNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

