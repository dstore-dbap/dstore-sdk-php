<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetDBObjects_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetDBObjects_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $dependent_object_type = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $object_type = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $object_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $database_name = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $object_last_created_at = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $defined_in_system_table = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $dependent_object_name = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $object_name = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $dependent_object_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetDBObjects_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dependent_object_type = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "dependent_object_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE object_type = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "object_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE object_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "object_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE database_name = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "database_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE object_last_created_at = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "object_last_created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE defined_in_system_table = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "defined_in_system_table";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dependent_object_name = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "dependent_object_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE object_name = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "object_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE dependent_object_id = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "dependent_object_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <dependent_object_type> has a value
     *
     * @return boolean
     */
    public function hasDependentObjectType(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <dependent_object_type> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearDependentObjectType(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <dependent_object_type> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDependentObjectType(){
      return $this->_get(10001);
    }
    
    /**
     * Set <dependent_object_type> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setDependentObjectType(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <object_type> has a value
     *
     * @return boolean
     */
    public function hasObjectType(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <object_type> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearObjectType(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <object_type> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getObjectType(){
      return $this->_get(10002);
    }
    
    /**
     * Set <object_type> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setObjectType(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <object_id> has a value
     *
     * @return boolean
     */
    public function hasObjectId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <object_id> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearObjectId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <object_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getObjectId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <object_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setObjectId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <database_name> has a value
     *
     * @return boolean
     */
    public function hasDatabaseName(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <database_name> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearDatabaseName(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <database_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDatabaseName(){
      return $this->_get(10004);
    }
    
    /**
     * Set <database_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setDatabaseName(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <object_last_created_at> has a value
     *
     * @return boolean
     */
    public function hasObjectLastCreatedAt(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <object_last_created_at> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearObjectLastCreatedAt(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <object_last_created_at> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getObjectLastCreatedAt(){
      return $this->_get(10005);
    }
    
    /**
     * Set <object_last_created_at> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setObjectLastCreatedAt(\dstore\engine\values\timestampValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <defined_in_system_table> has a value
     *
     * @return boolean
     */
    public function hasDefinedInSystemTable(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <defined_in_system_table> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearDefinedInSystemTable(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <defined_in_system_table> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDefinedInSystemTable(){
      return $this->_get(10006);
    }
    
    /**
     * Set <defined_in_system_table> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setDefinedInSystemTable(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <dependent_object_name> has a value
     *
     * @return boolean
     */
    public function hasDependentObjectName(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <dependent_object_name> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearDependentObjectName(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <dependent_object_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDependentObjectName(){
      return $this->_get(10007);
    }
    
    /**
     * Set <dependent_object_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setDependentObjectName(\dstore\engine\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <object_name> has a value
     *
     * @return boolean
     */
    public function hasObjectName(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <object_name> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearObjectName(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <object_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getObjectName(){
      return $this->_get(10008);
    }
    
    /**
     * Set <object_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setObjectName(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <dependent_object_id> has a value
     *
     * @return boolean
     */
    public function hasDependentObjectId(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <dependent_object_id> value
     *
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function clearDependentObjectId(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <dependent_object_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDependentObjectId(){
      return $this->_get(10009);
    }
    
    /**
     * Set <dependent_object_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetDBObjects_Ad\Response\Row
     */
    public function setDependentObjectId(\dstore\engine\values\integerValue $value){
      return $this->_set(10009, $value);
    }
  }
}

