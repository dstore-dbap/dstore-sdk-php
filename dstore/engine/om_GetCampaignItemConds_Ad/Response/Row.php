<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetCampaignItemConds_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\om_GetCampaignItemConds_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition_description = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition1 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition2 = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_basic_price_sum__group = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $recursive_evaluation = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_basic_price_sum__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $max_number_of_items__group = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $domain_tree_node_ids = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $item_condition_part_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_basic_price_sum__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $to_quantity = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_quantity__group = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $item_condition_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $max_number_of_items = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $combine_groups_with_a_n_d_operator = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_basic_price_sum__group = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_item_basic_price__part = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $item_condition_part_description = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $level_ids = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $item_condition_group_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $extended_item_cond_group_descr = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_quantity = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_item_basic_price = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $item_group_sort_no = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $operator1 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $operator2 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $item_condition_group_description = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $combine_parts_with_a_n_d_operator = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $min_number_of_items__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $item_part_sort_no = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_item_basic_price__group = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $extended_item_cond_part_descr = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $max_number_of_items__part = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_item_basic_price__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $min_number_of_items = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_basic_price_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_basic_price_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $to_quantity__group = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $from_item_basic_price__group = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $item_condition_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $to_item_basic_price = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $to_quantity__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $from_quantity__part = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $min_number_of_items__group = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $inherit_depth = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetCampaignItemConds_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_description = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "condition_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition1 = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "condition1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition2 = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "condition2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_basic_price_sum__group = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "to_basic_price_sum__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE recursive_evaluation = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "recursive_evaluation";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_basic_price_sum__part = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "to_basic_price_sum__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_number_of_items__group = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "max_number_of_items__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE domain_tree_node_ids = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "domain_tree_node_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_characteristic_id = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_part_id = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "item_condition_part_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_basic_price_sum__part = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "from_basic_price_sum__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_quantity = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "to_quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_quantity__group = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "from_quantity__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_id = 10014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10014;
      $f->name      = "item_condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_number_of_items = 10015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10015;
      $f->name      = "max_number_of_items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE combine_groups_with_a_n_d_operator = 10016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10016;
      $f->name      = "combine_groups_with_a_n_d_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_basic_price_sum__group = 10017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10017;
      $f->name      = "from_basic_price_sum__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_item_basic_price__part = 10018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10018;
      $f->name      = "to_item_basic_price__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_part_description = 10019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10019;
      $f->name      = "item_condition_part_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_ids = 10020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10020;
      $f->name      = "level_ids";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_group_id = 10021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10021;
      $f->name      = "item_condition_group_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE extended_item_cond_group_descr = 10022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10022;
      $f->name      = "extended_item_cond_group_descr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_quantity = 10023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10023;
      $f->name      = "from_quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_item_basic_price = 10024
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10024;
      $f->name      = "from_item_basic_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_group_sort_no = 10025
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10025;
      $f->name      = "item_group_sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator1 = 10026
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10026;
      $f->name      = "operator1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator2 = 10027
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10027;
      $f->name      = "operator2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_group_description = 10028
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10028;
      $f->name      = "item_condition_group_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE combine_parts_with_a_n_d_operator = 10029
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10029;
      $f->name      = "combine_parts_with_a_n_d_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE min_number_of_items__part = 10030
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10030;
      $f->name      = "min_number_of_items__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_part_sort_no = 10031
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10031;
      $f->name      = "item_part_sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_item_basic_price__group = 10032
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10032;
      $f->name      = "to_item_basic_price__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE extended_item_cond_part_descr = 10033
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10033;
      $f->name      = "extended_item_cond_part_descr";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_number_of_items__part = 10034
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10034;
      $f->name      = "max_number_of_items__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_item_basic_price__part = 10035
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10035;
      $f->name      = "from_item_basic_price__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE min_number_of_items = 10036
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10036;
      $f->name      = "min_number_of_items";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_basic_price_sum = 10037
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10037;
      $f->name      = "from_basic_price_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_basic_price_sum = 10038
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10038;
      $f->name      = "to_basic_price_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_quantity__group = 10039
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10039;
      $f->name      = "to_quantity__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_item_basic_price__group = 10040
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10040;
      $f->name      = "from_item_basic_price__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_id = 10041
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10041;
      $f->name      = "condition_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_condition_description = 10042
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10042;
      $f->name      = "item_condition_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_item_basic_price = 10043
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10043;
      $f->name      = "to_item_basic_price";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_quantity__part = 10044
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10044;
      $f->name      = "to_quantity__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_quantity__part = 10045
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10045;
      $f->name      = "from_quantity__part";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE min_number_of_items__group = 10046
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10046;
      $f->name      = "min_number_of_items__group";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inherit_depth = 10047
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10047;
      $f->name      = "inherit_depth";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <condition_description> has a value
     *
     * @return boolean
     */
    public function hasConditionDescription(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <condition_description> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearConditionDescription(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <condition_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getConditionDescription(){
      return $this->_get(10001);
    }
    
    /**
     * Set <condition_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setConditionDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <condition1> has a value
     *
     * @return boolean
     */
    public function hasCondition1(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <condition1> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearCondition1(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <condition1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCondition1(){
      return $this->_get(10002);
    }
    
    /**
     * Set <condition1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setCondition1(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <condition2> has a value
     *
     * @return boolean
     */
    public function hasCondition2(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <condition2> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearCondition2(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <condition2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCondition2(){
      return $this->_get(10003);
    }
    
    /**
     * Set <condition2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setCondition2(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <to_basic_price_sum__group> has a value
     *
     * @return boolean
     */
    public function hasToBasicPriceSum_Group(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <to_basic_price_sum__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToBasicPriceSum_Group(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <to_basic_price_sum__group> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToBasicPriceSum_Group(){
      return $this->_get(10004);
    }
    
    /**
     * Set <to_basic_price_sum__group> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToBasicPriceSum_Group(\dstore\engine\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <recursive_evaluation> has a value
     *
     * @return boolean
     */
    public function hasRecursiveEvaluation(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <recursive_evaluation> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearRecursiveEvaluation(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <recursive_evaluation> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getRecursiveEvaluation(){
      return $this->_get(10005);
    }
    
    /**
     * Set <recursive_evaluation> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setRecursiveEvaluation(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <to_basic_price_sum__part> has a value
     *
     * @return boolean
     */
    public function hasToBasicPriceSum_Part(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <to_basic_price_sum__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToBasicPriceSum_Part(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <to_basic_price_sum__part> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToBasicPriceSum_Part(){
      return $this->_get(10006);
    }
    
    /**
     * Set <to_basic_price_sum__part> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToBasicPriceSum_Part(\dstore\engine\values\decimalValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <max_number_of_items__group> has a value
     *
     * @return boolean
     */
    public function hasMaxNumberOfItems_Group(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <max_number_of_items__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMaxNumberOfItems_Group(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <max_number_of_items__group> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMaxNumberOfItems_Group(){
      return $this->_get(10007);
    }
    
    /**
     * Set <max_number_of_items__group> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMaxNumberOfItems_Group(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <domain_tree_node_ids> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeIds(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <domain_tree_node_ids> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearDomainTreeNodeIds(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <domain_tree_node_ids> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDomainTreeNodeIds(){
      return $this->_get(10008);
    }
    
    /**
     * Set <domain_tree_node_ids> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setDomainTreeNodeIds(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(10009);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setNodeCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <item_condition_part_id> has a value
     *
     * @return boolean
     */
    public function hasItemConditionPartId(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <item_condition_part_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionPartId(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <item_condition_part_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemConditionPartId(){
      return $this->_get(10010);
    }
    
    /**
     * Set <item_condition_part_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionPartId(\dstore\engine\values\integerValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <from_basic_price_sum__part> has a value
     *
     * @return boolean
     */
    public function hasFromBasicPriceSum_Part(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <from_basic_price_sum__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromBasicPriceSum_Part(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <from_basic_price_sum__part> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromBasicPriceSum_Part(){
      return $this->_get(10011);
    }
    
    /**
     * Set <from_basic_price_sum__part> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromBasicPriceSum_Part(\dstore\engine\values\decimalValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <to_quantity> has a value
     *
     * @return boolean
     */
    public function hasToQuantity(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <to_quantity> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToQuantity(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <to_quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getToQuantity(){
      return $this->_get(10012);
    }
    
    /**
     * Set <to_quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <from_quantity__group> has a value
     *
     * @return boolean
     */
    public function hasFromQuantity_Group(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <from_quantity__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromQuantity_Group(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <from_quantity__group> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromQuantity_Group(){
      return $this->_get(10013);
    }
    
    /**
     * Set <from_quantity__group> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromQuantity_Group(\dstore\engine\values\integerValue $value){
      return $this->_set(10013, $value);
    }
    
    /**
     * Check if <item_condition_id> has a value
     *
     * @return boolean
     */
    public function hasItemConditionId(){
      return $this->_has(10014);
    }
    
    /**
     * Clear <item_condition_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionId(){
      return $this->_clear(10014);
    }
    
    /**
     * Get <item_condition_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemConditionId(){
      return $this->_get(10014);
    }
    
    /**
     * Set <item_condition_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionId(\dstore\engine\values\integerValue $value){
      return $this->_set(10014, $value);
    }
    
    /**
     * Check if <max_number_of_items> has a value
     *
     * @return boolean
     */
    public function hasMaxNumberOfItems(){
      return $this->_has(10015);
    }
    
    /**
     * Clear <max_number_of_items> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMaxNumberOfItems(){
      return $this->_clear(10015);
    }
    
    /**
     * Get <max_number_of_items> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMaxNumberOfItems(){
      return $this->_get(10015);
    }
    
    /**
     * Set <max_number_of_items> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMaxNumberOfItems(\dstore\engine\values\integerValue $value){
      return $this->_set(10015, $value);
    }
    
    /**
     * Check if <combine_groups_with_a_n_d_operator> has a value
     *
     * @return boolean
     */
    public function hasCombineGroupsWithANDOperator(){
      return $this->_has(10016);
    }
    
    /**
     * Clear <combine_groups_with_a_n_d_operator> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearCombineGroupsWithANDOperator(){
      return $this->_clear(10016);
    }
    
    /**
     * Get <combine_groups_with_a_n_d_operator> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCombineGroupsWithANDOperator(){
      return $this->_get(10016);
    }
    
    /**
     * Set <combine_groups_with_a_n_d_operator> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setCombineGroupsWithANDOperator(\dstore\engine\values\booleanValue $value){
      return $this->_set(10016, $value);
    }
    
    /**
     * Check if <from_basic_price_sum__group> has a value
     *
     * @return boolean
     */
    public function hasFromBasicPriceSum_Group(){
      return $this->_has(10017);
    }
    
    /**
     * Clear <from_basic_price_sum__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromBasicPriceSum_Group(){
      return $this->_clear(10017);
    }
    
    /**
     * Get <from_basic_price_sum__group> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromBasicPriceSum_Group(){
      return $this->_get(10017);
    }
    
    /**
     * Set <from_basic_price_sum__group> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromBasicPriceSum_Group(\dstore\engine\values\decimalValue $value){
      return $this->_set(10017, $value);
    }
    
    /**
     * Check if <to_item_basic_price__part> has a value
     *
     * @return boolean
     */
    public function hasToItemBasicPrice_Part(){
      return $this->_has(10018);
    }
    
    /**
     * Clear <to_item_basic_price__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToItemBasicPrice_Part(){
      return $this->_clear(10018);
    }
    
    /**
     * Get <to_item_basic_price__part> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToItemBasicPrice_Part(){
      return $this->_get(10018);
    }
    
    /**
     * Set <to_item_basic_price__part> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToItemBasicPrice_Part(\dstore\engine\values\decimalValue $value){
      return $this->_set(10018, $value);
    }
    
    /**
     * Check if <item_condition_part_description> has a value
     *
     * @return boolean
     */
    public function hasItemConditionPartDescription(){
      return $this->_has(10019);
    }
    
    /**
     * Clear <item_condition_part_description> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionPartDescription(){
      return $this->_clear(10019);
    }
    
    /**
     * Get <item_condition_part_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getItemConditionPartDescription(){
      return $this->_get(10019);
    }
    
    /**
     * Set <item_condition_part_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionPartDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10019, $value);
    }
    
    /**
     * Check if <level_ids> has a value
     *
     * @return boolean
     */
    public function hasLevelIds(){
      return $this->_has(10020);
    }
    
    /**
     * Clear <level_ids> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearLevelIds(){
      return $this->_clear(10020);
    }
    
    /**
     * Get <level_ids> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLevelIds(){
      return $this->_get(10020);
    }
    
    /**
     * Set <level_ids> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setLevelIds(\dstore\engine\values\stringValue $value){
      return $this->_set(10020, $value);
    }
    
    /**
     * Check if <item_condition_group_id> has a value
     *
     * @return boolean
     */
    public function hasItemConditionGroupId(){
      return $this->_has(10021);
    }
    
    /**
     * Clear <item_condition_group_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionGroupId(){
      return $this->_clear(10021);
    }
    
    /**
     * Get <item_condition_group_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemConditionGroupId(){
      return $this->_get(10021);
    }
    
    /**
     * Set <item_condition_group_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionGroupId(\dstore\engine\values\integerValue $value){
      return $this->_set(10021, $value);
    }
    
    /**
     * Check if <extended_item_cond_group_descr> has a value
     *
     * @return boolean
     */
    public function hasExtendedItemCondGroupDescr(){
      return $this->_has(10022);
    }
    
    /**
     * Clear <extended_item_cond_group_descr> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearExtendedItemCondGroupDescr(){
      return $this->_clear(10022);
    }
    
    /**
     * Get <extended_item_cond_group_descr> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getExtendedItemCondGroupDescr(){
      return $this->_get(10022);
    }
    
    /**
     * Set <extended_item_cond_group_descr> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setExtendedItemCondGroupDescr(\dstore\engine\values\stringValue $value){
      return $this->_set(10022, $value);
    }
    
    /**
     * Check if <from_quantity> has a value
     *
     * @return boolean
     */
    public function hasFromQuantity(){
      return $this->_has(10023);
    }
    
    /**
     * Clear <from_quantity> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromQuantity(){
      return $this->_clear(10023);
    }
    
    /**
     * Get <from_quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromQuantity(){
      return $this->_get(10023);
    }
    
    /**
     * Set <from_quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(10023, $value);
    }
    
    /**
     * Check if <from_item_basic_price> has a value
     *
     * @return boolean
     */
    public function hasFromItemBasicPrice(){
      return $this->_has(10024);
    }
    
    /**
     * Clear <from_item_basic_price> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromItemBasicPrice(){
      return $this->_clear(10024);
    }
    
    /**
     * Get <from_item_basic_price> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromItemBasicPrice(){
      return $this->_get(10024);
    }
    
    /**
     * Set <from_item_basic_price> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromItemBasicPrice(\dstore\engine\values\decimalValue $value){
      return $this->_set(10024, $value);
    }
    
    /**
     * Check if <item_group_sort_no> has a value
     *
     * @return boolean
     */
    public function hasItemGroupSortNo(){
      return $this->_has(10025);
    }
    
    /**
     * Clear <item_group_sort_no> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemGroupSortNo(){
      return $this->_clear(10025);
    }
    
    /**
     * Get <item_group_sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemGroupSortNo(){
      return $this->_get(10025);
    }
    
    /**
     * Set <item_group_sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemGroupSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10025, $value);
    }
    
    /**
     * Check if <operator1> has a value
     *
     * @return boolean
     */
    public function hasOperator1(){
      return $this->_has(10026);
    }
    
    /**
     * Clear <operator1> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearOperator1(){
      return $this->_clear(10026);
    }
    
    /**
     * Get <operator1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOperator1(){
      return $this->_get(10026);
    }
    
    /**
     * Set <operator1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setOperator1(\dstore\engine\values\stringValue $value){
      return $this->_set(10026, $value);
    }
    
    /**
     * Check if <operator2> has a value
     *
     * @return boolean
     */
    public function hasOperator2(){
      return $this->_has(10027);
    }
    
    /**
     * Clear <operator2> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearOperator2(){
      return $this->_clear(10027);
    }
    
    /**
     * Get <operator2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOperator2(){
      return $this->_get(10027);
    }
    
    /**
     * Set <operator2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setOperator2(\dstore\engine\values\stringValue $value){
      return $this->_set(10027, $value);
    }
    
    /**
     * Check if <item_condition_group_description> has a value
     *
     * @return boolean
     */
    public function hasItemConditionGroupDescription(){
      return $this->_has(10028);
    }
    
    /**
     * Clear <item_condition_group_description> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionGroupDescription(){
      return $this->_clear(10028);
    }
    
    /**
     * Get <item_condition_group_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getItemConditionGroupDescription(){
      return $this->_get(10028);
    }
    
    /**
     * Set <item_condition_group_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionGroupDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10028, $value);
    }
    
    /**
     * Check if <combine_parts_with_a_n_d_operator> has a value
     *
     * @return boolean
     */
    public function hasCombinePartsWithANDOperator(){
      return $this->_has(10029);
    }
    
    /**
     * Clear <combine_parts_with_a_n_d_operator> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearCombinePartsWithANDOperator(){
      return $this->_clear(10029);
    }
    
    /**
     * Get <combine_parts_with_a_n_d_operator> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCombinePartsWithANDOperator(){
      return $this->_get(10029);
    }
    
    /**
     * Set <combine_parts_with_a_n_d_operator> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setCombinePartsWithANDOperator(\dstore\engine\values\booleanValue $value){
      return $this->_set(10029, $value);
    }
    
    /**
     * Check if <min_number_of_items__part> has a value
     *
     * @return boolean
     */
    public function hasMinNumberOfItems_Part(){
      return $this->_has(10030);
    }
    
    /**
     * Clear <min_number_of_items__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMinNumberOfItems_Part(){
      return $this->_clear(10030);
    }
    
    /**
     * Get <min_number_of_items__part> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMinNumberOfItems_Part(){
      return $this->_get(10030);
    }
    
    /**
     * Set <min_number_of_items__part> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMinNumberOfItems_Part(\dstore\engine\values\integerValue $value){
      return $this->_set(10030, $value);
    }
    
    /**
     * Check if <item_part_sort_no> has a value
     *
     * @return boolean
     */
    public function hasItemPartSortNo(){
      return $this->_has(10031);
    }
    
    /**
     * Clear <item_part_sort_no> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemPartSortNo(){
      return $this->_clear(10031);
    }
    
    /**
     * Get <item_part_sort_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getItemPartSortNo(){
      return $this->_get(10031);
    }
    
    /**
     * Set <item_part_sort_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemPartSortNo(\dstore\engine\values\integerValue $value){
      return $this->_set(10031, $value);
    }
    
    /**
     * Check if <to_item_basic_price__group> has a value
     *
     * @return boolean
     */
    public function hasToItemBasicPrice_Group(){
      return $this->_has(10032);
    }
    
    /**
     * Clear <to_item_basic_price__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToItemBasicPrice_Group(){
      return $this->_clear(10032);
    }
    
    /**
     * Get <to_item_basic_price__group> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToItemBasicPrice_Group(){
      return $this->_get(10032);
    }
    
    /**
     * Set <to_item_basic_price__group> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToItemBasicPrice_Group(\dstore\engine\values\decimalValue $value){
      return $this->_set(10032, $value);
    }
    
    /**
     * Check if <extended_item_cond_part_descr> has a value
     *
     * @return boolean
     */
    public function hasExtendedItemCondPartDescr(){
      return $this->_has(10033);
    }
    
    /**
     * Clear <extended_item_cond_part_descr> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearExtendedItemCondPartDescr(){
      return $this->_clear(10033);
    }
    
    /**
     * Get <extended_item_cond_part_descr> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getExtendedItemCondPartDescr(){
      return $this->_get(10033);
    }
    
    /**
     * Set <extended_item_cond_part_descr> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setExtendedItemCondPartDescr(\dstore\engine\values\stringValue $value){
      return $this->_set(10033, $value);
    }
    
    /**
     * Check if <max_number_of_items__part> has a value
     *
     * @return boolean
     */
    public function hasMaxNumberOfItems_Part(){
      return $this->_has(10034);
    }
    
    /**
     * Clear <max_number_of_items__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMaxNumberOfItems_Part(){
      return $this->_clear(10034);
    }
    
    /**
     * Get <max_number_of_items__part> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMaxNumberOfItems_Part(){
      return $this->_get(10034);
    }
    
    /**
     * Set <max_number_of_items__part> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMaxNumberOfItems_Part(\dstore\engine\values\integerValue $value){
      return $this->_set(10034, $value);
    }
    
    /**
     * Check if <from_item_basic_price__part> has a value
     *
     * @return boolean
     */
    public function hasFromItemBasicPrice_Part(){
      return $this->_has(10035);
    }
    
    /**
     * Clear <from_item_basic_price__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromItemBasicPrice_Part(){
      return $this->_clear(10035);
    }
    
    /**
     * Get <from_item_basic_price__part> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromItemBasicPrice_Part(){
      return $this->_get(10035);
    }
    
    /**
     * Set <from_item_basic_price__part> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromItemBasicPrice_Part(\dstore\engine\values\decimalValue $value){
      return $this->_set(10035, $value);
    }
    
    /**
     * Check if <min_number_of_items> has a value
     *
     * @return boolean
     */
    public function hasMinNumberOfItems(){
      return $this->_has(10036);
    }
    
    /**
     * Clear <min_number_of_items> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMinNumberOfItems(){
      return $this->_clear(10036);
    }
    
    /**
     * Get <min_number_of_items> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMinNumberOfItems(){
      return $this->_get(10036);
    }
    
    /**
     * Set <min_number_of_items> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMinNumberOfItems(\dstore\engine\values\integerValue $value){
      return $this->_set(10036, $value);
    }
    
    /**
     * Check if <from_basic_price_sum> has a value
     *
     * @return boolean
     */
    public function hasFromBasicPriceSum(){
      return $this->_has(10037);
    }
    
    /**
     * Clear <from_basic_price_sum> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromBasicPriceSum(){
      return $this->_clear(10037);
    }
    
    /**
     * Get <from_basic_price_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromBasicPriceSum(){
      return $this->_get(10037);
    }
    
    /**
     * Set <from_basic_price_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromBasicPriceSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10037, $value);
    }
    
    /**
     * Check if <to_basic_price_sum> has a value
     *
     * @return boolean
     */
    public function hasToBasicPriceSum(){
      return $this->_has(10038);
    }
    
    /**
     * Clear <to_basic_price_sum> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToBasicPriceSum(){
      return $this->_clear(10038);
    }
    
    /**
     * Get <to_basic_price_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToBasicPriceSum(){
      return $this->_get(10038);
    }
    
    /**
     * Set <to_basic_price_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToBasicPriceSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10038, $value);
    }
    
    /**
     * Check if <to_quantity__group> has a value
     *
     * @return boolean
     */
    public function hasToQuantity_Group(){
      return $this->_has(10039);
    }
    
    /**
     * Clear <to_quantity__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToQuantity_Group(){
      return $this->_clear(10039);
    }
    
    /**
     * Get <to_quantity__group> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getToQuantity_Group(){
      return $this->_get(10039);
    }
    
    /**
     * Set <to_quantity__group> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToQuantity_Group(\dstore\engine\values\integerValue $value){
      return $this->_set(10039, $value);
    }
    
    /**
     * Check if <from_item_basic_price__group> has a value
     *
     * @return boolean
     */
    public function hasFromItemBasicPrice_Group(){
      return $this->_has(10040);
    }
    
    /**
     * Clear <from_item_basic_price__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromItemBasicPrice_Group(){
      return $this->_clear(10040);
    }
    
    /**
     * Get <from_item_basic_price__group> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getFromItemBasicPrice_Group(){
      return $this->_get(10040);
    }
    
    /**
     * Set <from_item_basic_price__group> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromItemBasicPrice_Group(\dstore\engine\values\decimalValue $value){
      return $this->_set(10040, $value);
    }
    
    /**
     * Check if <condition_id> has a value
     *
     * @return boolean
     */
    public function hasConditionId(){
      return $this->_has(10041);
    }
    
    /**
     * Clear <condition_id> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearConditionId(){
      return $this->_clear(10041);
    }
    
    /**
     * Get <condition_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionId(){
      return $this->_get(10041);
    }
    
    /**
     * Set <condition_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setConditionId(\dstore\engine\values\integerValue $value){
      return $this->_set(10041, $value);
    }
    
    /**
     * Check if <item_condition_description> has a value
     *
     * @return boolean
     */
    public function hasItemConditionDescription(){
      return $this->_has(10042);
    }
    
    /**
     * Clear <item_condition_description> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearItemConditionDescription(){
      return $this->_clear(10042);
    }
    
    /**
     * Get <item_condition_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getItemConditionDescription(){
      return $this->_get(10042);
    }
    
    /**
     * Set <item_condition_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setItemConditionDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10042, $value);
    }
    
    /**
     * Check if <to_item_basic_price> has a value
     *
     * @return boolean
     */
    public function hasToItemBasicPrice(){
      return $this->_has(10043);
    }
    
    /**
     * Clear <to_item_basic_price> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToItemBasicPrice(){
      return $this->_clear(10043);
    }
    
    /**
     * Get <to_item_basic_price> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getToItemBasicPrice(){
      return $this->_get(10043);
    }
    
    /**
     * Set <to_item_basic_price> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToItemBasicPrice(\dstore\engine\values\decimalValue $value){
      return $this->_set(10043, $value);
    }
    
    /**
     * Check if <to_quantity__part> has a value
     *
     * @return boolean
     */
    public function hasToQuantity_Part(){
      return $this->_has(10044);
    }
    
    /**
     * Clear <to_quantity__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearToQuantity_Part(){
      return $this->_clear(10044);
    }
    
    /**
     * Get <to_quantity__part> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getToQuantity_Part(){
      return $this->_get(10044);
    }
    
    /**
     * Set <to_quantity__part> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setToQuantity_Part(\dstore\engine\values\integerValue $value){
      return $this->_set(10044, $value);
    }
    
    /**
     * Check if <from_quantity__part> has a value
     *
     * @return boolean
     */
    public function hasFromQuantity_Part(){
      return $this->_has(10045);
    }
    
    /**
     * Clear <from_quantity__part> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearFromQuantity_Part(){
      return $this->_clear(10045);
    }
    
    /**
     * Get <from_quantity__part> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getFromQuantity_Part(){
      return $this->_get(10045);
    }
    
    /**
     * Set <from_quantity__part> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setFromQuantity_Part(\dstore\engine\values\integerValue $value){
      return $this->_set(10045, $value);
    }
    
    /**
     * Check if <min_number_of_items__group> has a value
     *
     * @return boolean
     */
    public function hasMinNumberOfItems_Group(){
      return $this->_has(10046);
    }
    
    /**
     * Clear <min_number_of_items__group> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearMinNumberOfItems_Group(){
      return $this->_clear(10046);
    }
    
    /**
     * Get <min_number_of_items__group> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getMinNumberOfItems_Group(){
      return $this->_get(10046);
    }
    
    /**
     * Set <min_number_of_items__group> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setMinNumberOfItems_Group(\dstore\engine\values\integerValue $value){
      return $this->_set(10046, $value);
    }
    
    /**
     * Check if <inherit_depth> has a value
     *
     * @return boolean
     */
    public function hasInheritDepth(){
      return $this->_has(10047);
    }
    
    /**
     * Clear <inherit_depth> value
     *
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function clearInheritDepth(){
      return $this->_clear(10047);
    }
    
    /**
     * Get <inherit_depth> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getInheritDepth(){
      return $this->_get(10047);
    }
    
    /**
     * Set <inherit_depth> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetCampaignItemConds_Ad\Response\Row
     */
    public function setInheritDepth(\dstore\engine\values\integerValue $value){
      return $this->_set(10047, $value);
    }
  }
}

