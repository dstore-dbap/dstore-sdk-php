<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetProcedureDependencies_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetProcedureDependencies_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $called_in_procedure_name = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $code_line_numbers = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $level_of_dependence = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $procedure_name = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $status_code = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetProcedureDependencies_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE called_in_procedure_name = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "called_in_procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE code_line_numbers = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "code_line_numbers";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_of_dependence = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "level_of_dependence";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE procedure_name = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE status_code = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "status_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <called_in_procedure_name> has a value
     *
     * @return boolean
     */
    public function hasCalledInProcedureName(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <called_in_procedure_name> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearCalledInProcedureName(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <called_in_procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCalledInProcedureName(){
      return $this->_get(10001);
    }
    
    /**
     * Set <called_in_procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setCalledInProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <code_line_numbers> has a value
     *
     * @return boolean
     */
    public function hasCodeLineNumbers(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <code_line_numbers> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearCodeLineNumbers(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <code_line_numbers> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCodeLineNumbers(){
      return $this->_get(10002);
    }
    
    /**
     * Set <code_line_numbers> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setCodeLineNumbers(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <level_of_dependence> has a value
     *
     * @return boolean
     */
    public function hasLevelOfDependence(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <level_of_dependence> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearLevelOfDependence(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <level_of_dependence> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLevelOfDependence(){
      return $this->_get(10003);
    }
    
    /**
     * Set <level_of_dependence> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setLevelOfDependence(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearProcedureName(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProcedureName(){
      return $this->_get(10004);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <status_code> has a value
     *
     * @return boolean
     */
    public function hasStatusCode(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <status_code> value
     *
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function clearStatusCode(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <status_code> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getStatusCode(){
      return $this->_get(10005);
    }
    
    /**
     * Set <status_code> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetProcedureDependencies_Ad\Response\Row
     */
    public function setStatusCode(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
  }
}

