<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_ModifySurchargeTypes_Ad.proto
//   Date: 2015-10-06 11:20:03

namespace dstore\engine\om_ModifySurchargeTypes_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $surcharge_type_id = null;
    
    /**  @var boolean */
    public $surcharge_type_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $surcharge_type_description = null;
    
    /**  @var boolean */
    public $surcharge_type_description_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $relative = null;
    
    /**  @var boolean */
    public $relative_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $brutto = null;
    
    /**  @var boolean */
    public $brutto_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $unit_id = null;
    
    /**  @var boolean */
    public $unit_id_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete_surcharge_type = null;
    
    /**  @var boolean */
    public $delete_surcharge_type_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $category_id = null;
    
    /**  @var boolean */
    public $category_id_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_ModifySurchargeTypes_Ad.Parameters');

      // OPTIONAL MESSAGE surcharge_type_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "surcharge_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL surcharge_type_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "surcharge_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE surcharge_type_description = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "surcharge_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL surcharge_type_description_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "surcharge_type_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE relative = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "relative";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL relative_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "relative_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE brutto = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "brutto";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL brutto_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "brutto_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_id = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unit_id_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "unit_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_surcharge_type = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "delete_surcharge_type";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_surcharge_type_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "delete_surcharge_type_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE category_id = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "category_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL category_id_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "category_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <surcharge_type_id> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <surcharge_type_id> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearSurchargeTypeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <surcharge_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getSurchargeTypeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <surcharge_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setSurchargeTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <surcharge_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <surcharge_type_id_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearSurchargeTypeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <surcharge_type_id_null> value
     *
     * @return boolean
     */
    public function getSurchargeTypeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <surcharge_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setSurchargeTypeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <surcharge_type_description> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeDescription(){
      return $this->_has(2);
    }
    
    /**
     * Clear <surcharge_type_description> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearSurchargeTypeDescription(){
      return $this->_clear(2);
    }
    
    /**
     * Get <surcharge_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getSurchargeTypeDescription(){
      return $this->_get(2);
    }
    
    /**
     * Set <surcharge_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setSurchargeTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <surcharge_type_description_null> has a value
     *
     * @return boolean
     */
    public function hasSurchargeTypeDescriptionNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <surcharge_type_description_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearSurchargeTypeDescriptionNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <surcharge_type_description_null> value
     *
     * @return boolean
     */
    public function getSurchargeTypeDescriptionNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <surcharge_type_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setSurchargeTypeDescriptionNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <relative> has a value
     *
     * @return boolean
     */
    public function hasRelative(){
      return $this->_has(3);
    }
    
    /**
     * Clear <relative> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearRelative(){
      return $this->_clear(3);
    }
    
    /**
     * Get <relative> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getRelative(){
      return $this->_get(3);
    }
    
    /**
     * Set <relative> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setRelative(\dstore\engine\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <relative_null> has a value
     *
     * @return boolean
     */
    public function hasRelativeNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <relative_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearRelativeNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <relative_null> value
     *
     * @return boolean
     */
    public function getRelativeNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <relative_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setRelativeNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <brutto> has a value
     *
     * @return boolean
     */
    public function hasBrutto(){
      return $this->_has(4);
    }
    
    /**
     * Clear <brutto> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearBrutto(){
      return $this->_clear(4);
    }
    
    /**
     * Get <brutto> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getBrutto(){
      return $this->_get(4);
    }
    
    /**
     * Set <brutto> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setBrutto(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <brutto_null> has a value
     *
     * @return boolean
     */
    public function hasBruttoNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <brutto_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearBruttoNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <brutto_null> value
     *
     * @return boolean
     */
    public function getBruttoNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <brutto_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setBruttoNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <unit_id> has a value
     *
     * @return boolean
     */
    public function hasUnitId(){
      return $this->_has(5);
    }
    
    /**
     * Clear <unit_id> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearUnitId(){
      return $this->_clear(5);
    }
    
    /**
     * Get <unit_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getUnitId(){
      return $this->_get(5);
    }
    
    /**
     * Set <unit_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setUnitId(\dstore\engine\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <unit_id_null> has a value
     *
     * @return boolean
     */
    public function hasUnitIdNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <unit_id_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearUnitIdNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <unit_id_null> value
     *
     * @return boolean
     */
    public function getUnitIdNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <unit_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setUnitIdNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <delete_surcharge_type> has a value
     *
     * @return boolean
     */
    public function hasDeleteSurchargeType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <delete_surcharge_type> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearDeleteSurchargeType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <delete_surcharge_type> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeleteSurchargeType(){
      return $this->_get(6);
    }
    
    /**
     * Set <delete_surcharge_type> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setDeleteSurchargeType(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <delete_surcharge_type_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteSurchargeTypeNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <delete_surcharge_type_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearDeleteSurchargeTypeNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <delete_surcharge_type_null> value
     *
     * @return boolean
     */
    public function getDeleteSurchargeTypeNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <delete_surcharge_type_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setDeleteSurchargeTypeNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <category_id> has a value
     *
     * @return boolean
     */
    public function hasCategoryId(){
      return $this->_has(7);
    }
    
    /**
     * Clear <category_id> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearCategoryId(){
      return $this->_clear(7);
    }
    
    /**
     * Get <category_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCategoryId(){
      return $this->_get(7);
    }
    
    /**
     * Set <category_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setCategoryId(\dstore\engine\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <category_id_null> has a value
     *
     * @return boolean
     */
    public function hasCategoryIdNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <category_id_null> value
     *
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function clearCategoryIdNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <category_id_null> value
     *
     * @return boolean
     */
    public function getCategoryIdNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <category_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\om_ModifySurchargeTypes_Ad\Parameters
     */
    public function setCategoryIdNull( $value){
      return $this->_set(1007, $value);
    }
  }
}

