<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_GetLocales.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_GetLocales\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $country_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $country_description = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $language_symbol = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $locale_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $country_descr_in_given_language = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $language = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $language_in_locale_language = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $language_in_given_language = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $country_code = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $country_descr_in_locale_language = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $language_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_GetLocales.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "country_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country_description = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "country_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_symbol = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "language_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE locale_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "locale_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country_descr_in_given_language = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "country_descr_in_given_language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_in_locale_language = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "language_in_locale_language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_in_given_language = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "language_in_given_language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country_code = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "country_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE country_descr_in_locale_language = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "country_descr_in_locale_language";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <country_id> has a value
     *
     * @return boolean
     */
    public function hasCountryId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <country_id> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearCountryId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <country_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCountryId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <country_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setCountryId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <country_description> has a value
     *
     * @return boolean
     */
    public function hasCountryDescription(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <country_description> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearCountryDescription(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <country_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCountryDescription(){
      return $this->_get(10002);
    }
    
    /**
     * Set <country_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setCountryDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <language_symbol> has a value
     *
     * @return boolean
     */
    public function hasLanguageSymbol(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <language_symbol> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLanguageSymbol(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <language_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLanguageSymbol(){
      return $this->_get(10003);
    }
    
    /**
     * Set <language_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLanguageSymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <locale_id> has a value
     *
     * @return boolean
     */
    public function hasLocaleId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <locale_id> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLocaleId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <locale_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLocaleId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <locale_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLocaleId(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <country_descr_in_given_language> has a value
     *
     * @return boolean
     */
    public function hasCountryDescrInGivenLanguage(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <country_descr_in_given_language> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearCountryDescrInGivenLanguage(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <country_descr_in_given_language> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCountryDescrInGivenLanguage(){
      return $this->_get(10005);
    }
    
    /**
     * Set <country_descr_in_given_language> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setCountryDescrInGivenLanguage(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <language> has a value
     *
     * @return boolean
     */
    public function hasLanguage(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <language> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLanguage(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <language> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLanguage(){
      return $this->_get(10006);
    }
    
    /**
     * Set <language> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLanguage(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <language_in_locale_language> has a value
     *
     * @return boolean
     */
    public function hasLanguageInLocaleLanguage(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <language_in_locale_language> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLanguageInLocaleLanguage(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <language_in_locale_language> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLanguageInLocaleLanguage(){
      return $this->_get(10007);
    }
    
    /**
     * Set <language_in_locale_language> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLanguageInLocaleLanguage(\dstore\engine\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <language_in_given_language> has a value
     *
     * @return boolean
     */
    public function hasLanguageInGivenLanguage(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <language_in_given_language> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLanguageInGivenLanguage(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <language_in_given_language> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getLanguageInGivenLanguage(){
      return $this->_get(10008);
    }
    
    /**
     * Set <language_in_given_language> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLanguageInGivenLanguage(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <country_code> has a value
     *
     * @return boolean
     */
    public function hasCountryCode(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <country_code> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearCountryCode(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <country_code> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCountryCode(){
      return $this->_get(10009);
    }
    
    /**
     * Set <country_code> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setCountryCode(\dstore\engine\values\stringValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <country_descr_in_locale_language> has a value
     *
     * @return boolean
     */
    public function hasCountryDescrInLocaleLanguage(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <country_descr_in_locale_language> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearCountryDescrInLocaleLanguage(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <country_descr_in_locale_language> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCountryDescrInLocaleLanguage(){
      return $this->_get(10010);
    }
    
    /**
     * Set <country_descr_in_locale_language> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setCountryDescrInLocaleLanguage(\dstore\engine\values\stringValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function clearLanguageId(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(10011);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_GetLocales\Response\Row
     */
    public function setLanguageId(\dstore\engine\values\integerValue $value){
      return $this->_set(10011, $value);
    }
  }
}

