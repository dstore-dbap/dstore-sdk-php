<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ModifyUnits_Ad.proto
//   Date: 2016-05-19 08:07:47

namespace dstore\engine\mi_ModifyUnits_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\integerValue */
    public $unit_id = null;
    
    /**  @var boolean */
    public $unit_id_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $unit_symbol = null;
    
    /**  @var boolean */
    public $unit_symbol_null = null;
    
    /**  @var \dstore\values\stringValue */
    public $unit_description = null;
    
    /**  @var boolean */
    public $unit_description_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $triangle_convert = null;
    
    /**  @var boolean */
    public $triangle_convert_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $delete_unit = null;
    
    /**  @var boolean */
    public $delete_unit_null = null;
    
    /**  @var \dstore\values\integerValue */
    public $active = null;
    
    /**  @var boolean */
    public $active_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ModifyUnits_Ad.Parameters');

      // OPTIONAL MESSAGE unit_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "unit_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unit_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "unit_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_symbol = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unit_symbol_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "unit_symbol_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "unit_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL unit_description_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "unit_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE triangle_convert = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "triangle_convert";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL triangle_convert_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "triangle_convert_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_unit = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "delete_unit";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_unit_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "delete_unit_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL active_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "active_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <unit_id> has a value
     *
     * @return boolean
     */
    public function hasUnitId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <unit_id> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <unit_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getUnitId(){
      return $this->_get(1);
    }
    
    /**
     * Set <unit_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitId(\dstore\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <unit_id_null> has a value
     *
     * @return boolean
     */
    public function hasUnitIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <unit_id_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <unit_id_null> value
     *
     * @return boolean
     */
    public function getUnitIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <unit_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasUnitSymbol(){
      return $this->_has(2);
    }
    
    /**
     * Clear <unit_symbol> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitSymbol(){
      return $this->_clear(2);
    }
    
    /**
     * Get <unit_symbol> value
     *
     * @return \dstore\values\stringValue
     */
    public function getUnitSymbol(){
      return $this->_get(2);
    }
    
    /**
     * Set <unit_symbol> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitSymbol(\dstore\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <unit_symbol_null> has a value
     *
     * @return boolean
     */
    public function hasUnitSymbolNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <unit_symbol_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitSymbolNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <unit_symbol_null> value
     *
     * @return boolean
     */
    public function getUnitSymbolNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <unit_symbol_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitSymbolNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <unit_description> has a value
     *
     * @return boolean
     */
    public function hasUnitDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <unit_description> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <unit_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getUnitDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <unit_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitDescription(\dstore\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <unit_description_null> has a value
     *
     * @return boolean
     */
    public function hasUnitDescriptionNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <unit_description_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearUnitDescriptionNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <unit_description_null> value
     *
     * @return boolean
     */
    public function getUnitDescriptionNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <unit_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setUnitDescriptionNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <triangle_convert> has a value
     *
     * @return boolean
     */
    public function hasTriangleConvert(){
      return $this->_has(4);
    }
    
    /**
     * Clear <triangle_convert> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearTriangleConvert(){
      return $this->_clear(4);
    }
    
    /**
     * Get <triangle_convert> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getTriangleConvert(){
      return $this->_get(4);
    }
    
    /**
     * Set <triangle_convert> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setTriangleConvert(\dstore\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <triangle_convert_null> has a value
     *
     * @return boolean
     */
    public function hasTriangleConvertNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <triangle_convert_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearTriangleConvertNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <triangle_convert_null> value
     *
     * @return boolean
     */
    public function getTriangleConvertNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <triangle_convert_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setTriangleConvertNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <delete_unit> has a value
     *
     * @return boolean
     */
    public function hasDeleteUnit(){
      return $this->_has(5);
    }
    
    /**
     * Clear <delete_unit> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearDeleteUnit(){
      return $this->_clear(5);
    }
    
    /**
     * Get <delete_unit> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getDeleteUnit(){
      return $this->_get(5);
    }
    
    /**
     * Set <delete_unit> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setDeleteUnit(\dstore\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <delete_unit_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteUnitNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <delete_unit_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearDeleteUnitNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <delete_unit_null> value
     *
     * @return boolean
     */
    public function getDeleteUnitNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <delete_unit_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setDeleteUnitNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(6);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearActive(){
      return $this->_clear(6);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\values\integerValue
     */
    public function getActive(){
      return $this->_get(6);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setActive(\dstore\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <active_null> has a value
     *
     * @return boolean
     */
    public function hasActiveNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <active_null> value
     *
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function clearActiveNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <active_null> value
     *
     * @return boolean
     */
    public function getActiveNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <active_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyUnits_Ad\Parameters
     */
    public function setActiveNull( $value){
      return $this->_set(1006, $value);
    }
  }
}

