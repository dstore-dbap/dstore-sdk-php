<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ChangedStoreUserPassword_Ad.proto
//   Date: 2015-10-06 11:19:50

namespace dstore\engine\mi_ChangedStoreUserPassword_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\stringValue */
    public $user_name = null;
    
    /**  @var boolean */
    public $user_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $d_b_login = null;
    
    /**  @var boolean */
    public $d_b_login_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $caller_password = null;
    
    /**  @var boolean */
    public $caller_password_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $new_password = null;
    
    /**  @var boolean */
    public $new_password_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $encrypted_password = null;
    
    /**  @var boolean */
    public $encrypted_password_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $create_dstore_user_if_not_exists = null;
    
    /**  @var boolean */
    public $create_dstore_user_if_not_exists_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $ignore_error_new_passwd_same_as_old = null;
    
    /**  @var boolean */
    public $ignore_error_new_passwd_same_as_old_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ChangedStoreUserPassword_Ad.Parameters');

      // OPTIONAL MESSAGE user_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "user_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL user_name_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "user_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE d_b_login = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "d_b_login";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL d_b_login_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "d_b_login_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE caller_password = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "caller_password";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL caller_password_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "caller_password_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE new_password = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "new_password";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL new_password_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "new_password_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE encrypted_password = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "encrypted_password";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL encrypted_password_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "encrypted_password_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE create_dstore_user_if_not_exists = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "create_dstore_user_if_not_exists";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL create_dstore_user_if_not_exists_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "create_dstore_user_if_not_exists_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE ignore_error_new_passwd_same_as_old = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "ignore_error_new_passwd_same_as_old";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL ignore_error_new_passwd_same_as_old_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "ignore_error_new_passwd_same_as_old_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <user_name> has a value
     *
     * @return boolean
     */
    public function hasUserName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <user_name> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearUserName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <user_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUserName(){
      return $this->_get(1);
    }
    
    /**
     * Set <user_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setUserName(\dstore\engine\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <user_name_null> has a value
     *
     * @return boolean
     */
    public function hasUserNameNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <user_name_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearUserNameNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <user_name_null> value
     *
     * @return boolean
     */
    public function getUserNameNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <user_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setUserNameNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <d_b_login> has a value
     *
     * @return boolean
     */
    public function hasDBLogin(){
      return $this->_has(2);
    }
    
    /**
     * Clear <d_b_login> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearDBLogin(){
      return $this->_clear(2);
    }
    
    /**
     * Get <d_b_login> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDBLogin(){
      return $this->_get(2);
    }
    
    /**
     * Set <d_b_login> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setDBLogin(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <d_b_login_null> has a value
     *
     * @return boolean
     */
    public function hasDBLoginNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <d_b_login_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearDBLoginNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <d_b_login_null> value
     *
     * @return boolean
     */
    public function getDBLoginNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <d_b_login_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setDBLoginNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <caller_password> has a value
     *
     * @return boolean
     */
    public function hasCallerPassword(){
      return $this->_has(3);
    }
    
    /**
     * Clear <caller_password> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearCallerPassword(){
      return $this->_clear(3);
    }
    
    /**
     * Get <caller_password> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCallerPassword(){
      return $this->_get(3);
    }
    
    /**
     * Set <caller_password> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setCallerPassword(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <caller_password_null> has a value
     *
     * @return boolean
     */
    public function hasCallerPasswordNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <caller_password_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearCallerPasswordNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <caller_password_null> value
     *
     * @return boolean
     */
    public function getCallerPasswordNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <caller_password_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setCallerPasswordNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <new_password> has a value
     *
     * @return boolean
     */
    public function hasNewPassword(){
      return $this->_has(4);
    }
    
    /**
     * Clear <new_password> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearNewPassword(){
      return $this->_clear(4);
    }
    
    /**
     * Get <new_password> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getNewPassword(){
      return $this->_get(4);
    }
    
    /**
     * Set <new_password> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setNewPassword(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <new_password_null> has a value
     *
     * @return boolean
     */
    public function hasNewPasswordNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <new_password_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearNewPasswordNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <new_password_null> value
     *
     * @return boolean
     */
    public function getNewPasswordNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <new_password_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setNewPasswordNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <encrypted_password> has a value
     *
     * @return boolean
     */
    public function hasEncryptedPassword(){
      return $this->_has(5);
    }
    
    /**
     * Clear <encrypted_password> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearEncryptedPassword(){
      return $this->_clear(5);
    }
    
    /**
     * Get <encrypted_password> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getEncryptedPassword(){
      return $this->_get(5);
    }
    
    /**
     * Set <encrypted_password> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setEncryptedPassword(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <encrypted_password_null> has a value
     *
     * @return boolean
     */
    public function hasEncryptedPasswordNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <encrypted_password_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearEncryptedPasswordNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <encrypted_password_null> value
     *
     * @return boolean
     */
    public function getEncryptedPasswordNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <encrypted_password_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setEncryptedPasswordNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <create_dstore_user_if_not_exists> has a value
     *
     * @return boolean
     */
    public function hasCreateDstoreUserIfNotExists(){
      return $this->_has(6);
    }
    
    /**
     * Clear <create_dstore_user_if_not_exists> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearCreateDstoreUserIfNotExists(){
      return $this->_clear(6);
    }
    
    /**
     * Get <create_dstore_user_if_not_exists> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCreateDstoreUserIfNotExists(){
      return $this->_get(6);
    }
    
    /**
     * Set <create_dstore_user_if_not_exists> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setCreateDstoreUserIfNotExists(\dstore\engine\values\booleanValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <create_dstore_user_if_not_exists_null> has a value
     *
     * @return boolean
     */
    public function hasCreateDstoreUserIfNotExistsNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <create_dstore_user_if_not_exists_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearCreateDstoreUserIfNotExistsNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <create_dstore_user_if_not_exists_null> value
     *
     * @return boolean
     */
    public function getCreateDstoreUserIfNotExistsNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <create_dstore_user_if_not_exists_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setCreateDstoreUserIfNotExistsNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <ignore_error_new_passwd_same_as_old> has a value
     *
     * @return boolean
     */
    public function hasIgnoreErrorNewPasswdSameAsOld(){
      return $this->_has(7);
    }
    
    /**
     * Clear <ignore_error_new_passwd_same_as_old> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearIgnoreErrorNewPasswdSameAsOld(){
      return $this->_clear(7);
    }
    
    /**
     * Get <ignore_error_new_passwd_same_as_old> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIgnoreErrorNewPasswdSameAsOld(){
      return $this->_get(7);
    }
    
    /**
     * Set <ignore_error_new_passwd_same_as_old> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setIgnoreErrorNewPasswdSameAsOld(\dstore\engine\values\booleanValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <ignore_error_new_passwd_same_as_old_null> has a value
     *
     * @return boolean
     */
    public function hasIgnoreErrorNewPasswdSameAsOldNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <ignore_error_new_passwd_same_as_old_null> value
     *
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function clearIgnoreErrorNewPasswdSameAsOldNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <ignore_error_new_passwd_same_as_old_null> value
     *
     * @return boolean
     */
    public function getIgnoreErrorNewPasswdSameAsOldNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <ignore_error_new_passwd_same_as_old_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ChangedStoreUserPassword_Ad\Parameters
     */
    public function setIgnoreErrorNewPasswdSameAsOldNull( $value){
      return $this->_set(1007, $value);
    }
  }
}

