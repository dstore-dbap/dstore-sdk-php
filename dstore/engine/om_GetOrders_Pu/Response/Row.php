<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetOrders_Pu.proto
//   Date: 2015-10-06 11:19:58

namespace dstore\engine\om_GetOrders_Pu\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_date_and_time = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $payment_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $delivery_date_and_time = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $last_edited_by_user_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $charac_val2_restr_by_pattern = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $payment_type_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $position_count = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_state_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $shipping_type_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $person_type_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_payment_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_payment_cost = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $delivery_person_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $shipping_type_description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_shipping_cost = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $unit_symbol = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_payment_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $customer_characteristic_value2 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $public_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $currency_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $customer_characteristic_value1 = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $shipping_cost = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $charac_val1_restr_by_pattern = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $payment_type_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_state = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $description = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_content_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $order_content_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_content_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $currency_symbol = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $order_content_position = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_content_sum = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_content_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_order_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_gross_content_sum = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $gross_order_sum = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $order_content_was_modified = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $item_property = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $quantity = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $net_order_sum = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $item_no = null;
    
    /**  @var \dstore\engine\values\decimalValue */
    public $precise_net_order_sum = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetOrders_Pu.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_date_and_time = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "order_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_cost = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_date_and_time = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "delivery_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_shipping_cost = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_no = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "order_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_edited_by_user_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "last_edited_by_user_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "order_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_shipping_cost = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "precise_net_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charac_val2_restr_by_pattern = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "charac_val2_restr_by_pattern";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_sum = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_id = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_description = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "payment_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_sum = 10013
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10013;
      $f->name      = "precise_net_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE position_count = 10014
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10014;
      $f->name      = "position_count";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_state_id = 10015
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10015;
      $f->name      = "order_state_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_id = 10016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10016;
      $f->name      = "shipping_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE person_type_id = 10017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10017;
      $f->name      = "person_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_payment_cost = 10018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10018;
      $f->name      = "gross_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_payment_cost = 10019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10019;
      $f->name      = "net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delivery_person_id = 10020
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10020;
      $f->name      = "delivery_person_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_type_description = 10021
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10021;
      $f->name      = "shipping_type_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_shipping_cost = 10022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10022;
      $f->name      = "gross_shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_sum = 10023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10023;
      $f->name      = "gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE unit_symbol = 10024
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10024;
      $f->name      = "unit_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_payment_cost = 10025
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10025;
      $f->name      = "precise_net_payment_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE customer_characteristic_value2 = 10026
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10026;
      $f->name      = "customer_characteristic_value2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE public_description = 10027
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10027;
      $f->name      = "public_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_id = 10028
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10028;
      $f->name      = "currency_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE customer_characteristic_value1 = 10029
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10029;
      $f->name      = "customer_characteristic_value1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_sum = 10030
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10030;
      $f->name      = "precise_gross_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE shipping_cost = 10031
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10031;
      $f->name      = "shipping_cost";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charac_val1_restr_by_pattern = 10032
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10032;
      $f->name      = "charac_val1_restr_by_pattern";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE payment_type_id = 10033
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10033;
      $f->name      = "payment_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_state = 10034
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10034;
      $f->name      = "order_state";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE description = 20004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20004;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_content_sum = 20005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20005;
      $f->name      = "precise_net_content_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_no = 20007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20007;
      $f->name      = "order_content_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_id = 20010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20010;
      $f->name      = "order_content_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE currency_symbol = 20012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20012;
      $f->name      = "currency_symbol";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_position = 20016
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20016;
      $f->name      = "order_content_position";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_content_sum = 20017
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20017;
      $f->name      = "net_content_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 20018
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20018;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_content_sum = 20019
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20019;
      $f->name      = "gross_content_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_order_sum = 20022
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20022;
      $f->name      = "precise_gross_order_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_gross_content_sum = 20023
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20023;
      $f->name      = "precise_gross_content_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE gross_order_sum = 20025
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20025;
      $f->name      = "gross_order_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_content_was_modified = 20027
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20027;
      $f->name      = "order_content_was_modified";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_property = 20028
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20028;
      $f->name      = "item_property";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE quantity = 20031
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20031;
      $f->name      = "quantity";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE net_order_sum = 20035
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20035;
      $f->name      = "net_order_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE item_no = 20039
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20039;
      $f->name      = "item_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE precise_net_order_sum = 20043
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20043;
      $f->name      = "precise_net_order_sum";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\decimalValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <order_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasOrderDateAndTime(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <order_date_and_time> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderDateAndTime(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <order_date_and_time> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderDateAndTime(){
      return $this->_get(10001);
    }
    
    /**
     * Set <order_date_and_time> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderDateAndTime(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPaymentCost(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPaymentCost(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPaymentCost(){
      return $this->_get(10002);
    }
    
    /**
     * Set <payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <delivery_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasDeliveryDateAndTime(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <delivery_date_and_time> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearDeliveryDateAndTime(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <delivery_date_and_time> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDeliveryDateAndTime(){
      return $this->_get(10003);
    }
    
    /**
     * Set <delivery_date_and_time> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setDeliveryDateAndTime(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasNetShippingCost(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <net_shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNetShippingCost(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetShippingCost(){
      return $this->_get(10004);
    }
    
    /**
     * Set <net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <order_no> has a value
     *
     * @return boolean
     */
    public function hasOrderNo(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <order_no> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderNo(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <order_no> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderNo(){
      return $this->_get(10005);
    }
    
    /**
     * Set <order_no> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderNo(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <last_edited_by_user_id> has a value
     *
     * @return boolean
     */
    public function hasLastEditedByUserId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <last_edited_by_user_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearLastEditedByUserId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <last_edited_by_user_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLastEditedByUserId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <last_edited_by_user_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setLastEditedByUserId(\dstore\engine\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <order_id> has a value
     *
     * @return boolean
     */
    public function hasOrderId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <order_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <order_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <order_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderId(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <precise_net_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetShippingCost(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseNetShippingCost(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <precise_net_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetShippingCost(){
      return $this->_get(10008);
    }
    
    /**
     * Set <precise_net_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseNetShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <charac_val2_restr_by_pattern> has a value
     *
     * @return boolean
     */
    public function hasCharacVal2RestrByPattern(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <charac_val2_restr_by_pattern> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCharacVal2RestrByPattern(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <charac_val2_restr_by_pattern> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCharacVal2RestrByPattern(){
      return $this->_get(10009);
    }
    
    /**
     * Set <charac_val2_restr_by_pattern> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCharacVal2RestrByPattern(\dstore\engine\values\stringValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <net_sum> has a value
     *
     * @return boolean
     */
    public function hasNetSum(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNetSum(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetSum(){
      return $this->_get(10010);
    }
    
    /**
     * Set <net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <person_id> has a value
     *
     * @return boolean
     */
    public function hasPersonId(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <person_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPersonId(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonId(){
      return $this->_get(10011);
    }
    
    /**
     * Set <person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <payment_type_description> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeDescription(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <payment_type_description> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPaymentTypeDescription(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <payment_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPaymentTypeDescription(){
      return $this->_get(10012);
    }
    
    /**
     * Set <payment_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPaymentTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10012, $value);
    }
    
    /**
     * Check if <precise_net_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetSum(){
      return $this->_has(10013);
    }
    
    /**
     * Clear <precise_net_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseNetSum(){
      return $this->_clear(10013);
    }
    
    /**
     * Get <precise_net_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetSum(){
      return $this->_get(10013);
    }
    
    /**
     * Set <precise_net_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseNetSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10013, $value);
    }
    
    /**
     * Check if <position_count> has a value
     *
     * @return boolean
     */
    public function hasPositionCount(){
      return $this->_has(10014);
    }
    
    /**
     * Clear <position_count> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPositionCount(){
      return $this->_clear(10014);
    }
    
    /**
     * Get <position_count> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPositionCount(){
      return $this->_get(10014);
    }
    
    /**
     * Set <position_count> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPositionCount(\dstore\engine\values\integerValue $value){
      return $this->_set(10014, $value);
    }
    
    /**
     * Check if <order_state_id> has a value
     *
     * @return boolean
     */
    public function hasOrderStateId(){
      return $this->_has(10015);
    }
    
    /**
     * Clear <order_state_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderStateId(){
      return $this->_clear(10015);
    }
    
    /**
     * Get <order_state_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderStateId(){
      return $this->_get(10015);
    }
    
    /**
     * Set <order_state_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderStateId(\dstore\engine\values\integerValue $value){
      return $this->_set(10015, $value);
    }
    
    /**
     * Check if <shipping_type_id> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeId(){
      return $this->_has(10016);
    }
    
    /**
     * Clear <shipping_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearShippingTypeId(){
      return $this->_clear(10016);
    }
    
    /**
     * Get <shipping_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getShippingTypeId(){
      return $this->_get(10016);
    }
    
    /**
     * Set <shipping_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setShippingTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10016, $value);
    }
    
    /**
     * Check if <person_type_id> has a value
     *
     * @return boolean
     */
    public function hasPersonTypeId(){
      return $this->_has(10017);
    }
    
    /**
     * Clear <person_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPersonTypeId(){
      return $this->_clear(10017);
    }
    
    /**
     * Get <person_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPersonTypeId(){
      return $this->_get(10017);
    }
    
    /**
     * Set <person_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPersonTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10017, $value);
    }
    
    /**
     * Check if <gross_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasGrossPaymentCost(){
      return $this->_has(10018);
    }
    
    /**
     * Clear <gross_payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearGrossPaymentCost(){
      return $this->_clear(10018);
    }
    
    /**
     * Get <gross_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossPaymentCost(){
      return $this->_get(10018);
    }
    
    /**
     * Set <gross_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setGrossPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10018, $value);
    }
    
    /**
     * Check if <net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasNetPaymentCost(){
      return $this->_has(10019);
    }
    
    /**
     * Clear <net_payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNetPaymentCost(){
      return $this->_clear(10019);
    }
    
    /**
     * Get <net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetPaymentCost(){
      return $this->_get(10019);
    }
    
    /**
     * Set <net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10019, $value);
    }
    
    /**
     * Check if <delivery_person_id> has a value
     *
     * @return boolean
     */
    public function hasDeliveryPersonId(){
      return $this->_has(10020);
    }
    
    /**
     * Clear <delivery_person_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearDeliveryPersonId(){
      return $this->_clear(10020);
    }
    
    /**
     * Get <delivery_person_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDeliveryPersonId(){
      return $this->_get(10020);
    }
    
    /**
     * Set <delivery_person_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setDeliveryPersonId(\dstore\engine\values\integerValue $value){
      return $this->_set(10020, $value);
    }
    
    /**
     * Check if <shipping_type_description> has a value
     *
     * @return boolean
     */
    public function hasShippingTypeDescription(){
      return $this->_has(10021);
    }
    
    /**
     * Clear <shipping_type_description> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearShippingTypeDescription(){
      return $this->_clear(10021);
    }
    
    /**
     * Get <shipping_type_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getShippingTypeDescription(){
      return $this->_get(10021);
    }
    
    /**
     * Set <shipping_type_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setShippingTypeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10021, $value);
    }
    
    /**
     * Check if <gross_shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasGrossShippingCost(){
      return $this->_has(10022);
    }
    
    /**
     * Clear <gross_shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearGrossShippingCost(){
      return $this->_clear(10022);
    }
    
    /**
     * Get <gross_shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossShippingCost(){
      return $this->_get(10022);
    }
    
    /**
     * Set <gross_shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setGrossShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10022, $value);
    }
    
    /**
     * Check if <gross_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossSum(){
      return $this->_has(10023);
    }
    
    /**
     * Clear <gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearGrossSum(){
      return $this->_clear(10023);
    }
    
    /**
     * Get <gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossSum(){
      return $this->_get(10023);
    }
    
    /**
     * Set <gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10023, $value);
    }
    
    /**
     * Check if <unit_symbol> has a value
     *
     * @return boolean
     */
    public function hasUnitSymbol(){
      return $this->_has(10024);
    }
    
    /**
     * Clear <unit_symbol> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearUnitSymbol(){
      return $this->_clear(10024);
    }
    
    /**
     * Get <unit_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getUnitSymbol(){
      return $this->_get(10024);
    }
    
    /**
     * Set <unit_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setUnitSymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(10024, $value);
    }
    
    /**
     * Check if <precise_net_payment_cost> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetPaymentCost(){
      return $this->_has(10025);
    }
    
    /**
     * Clear <precise_net_payment_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseNetPaymentCost(){
      return $this->_clear(10025);
    }
    
    /**
     * Get <precise_net_payment_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetPaymentCost(){
      return $this->_get(10025);
    }
    
    /**
     * Set <precise_net_payment_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseNetPaymentCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10025, $value);
    }
    
    /**
     * Check if <customer_characteristic_value2> has a value
     *
     * @return boolean
     */
    public function hasCustomerCharacteristicValue2(){
      return $this->_has(10026);
    }
    
    /**
     * Clear <customer_characteristic_value2> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCustomerCharacteristicValue2(){
      return $this->_clear(10026);
    }
    
    /**
     * Get <customer_characteristic_value2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCustomerCharacteristicValue2(){
      return $this->_get(10026);
    }
    
    /**
     * Set <customer_characteristic_value2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCustomerCharacteristicValue2(\dstore\engine\values\stringValue $value){
      return $this->_set(10026, $value);
    }
    
    /**
     * Check if <public_description> has a value
     *
     * @return boolean
     */
    public function hasPublicDescription(){
      return $this->_has(10027);
    }
    
    /**
     * Clear <public_description> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPublicDescription(){
      return $this->_clear(10027);
    }
    
    /**
     * Get <public_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPublicDescription(){
      return $this->_get(10027);
    }
    
    /**
     * Set <public_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPublicDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10027, $value);
    }
    
    /**
     * Check if <currency_id> has a value
     *
     * @return boolean
     */
    public function hasCurrencyId(){
      return $this->_has(10028);
    }
    
    /**
     * Clear <currency_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCurrencyId(){
      return $this->_clear(10028);
    }
    
    /**
     * Get <currency_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCurrencyId(){
      return $this->_get(10028);
    }
    
    /**
     * Set <currency_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCurrencyId(\dstore\engine\values\integerValue $value){
      return $this->_set(10028, $value);
    }
    
    /**
     * Check if <customer_characteristic_value1> has a value
     *
     * @return boolean
     */
    public function hasCustomerCharacteristicValue1(){
      return $this->_has(10029);
    }
    
    /**
     * Clear <customer_characteristic_value1> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCustomerCharacteristicValue1(){
      return $this->_clear(10029);
    }
    
    /**
     * Get <customer_characteristic_value1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCustomerCharacteristicValue1(){
      return $this->_get(10029);
    }
    
    /**
     * Set <customer_characteristic_value1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCustomerCharacteristicValue1(\dstore\engine\values\stringValue $value){
      return $this->_set(10029, $value);
    }
    
    /**
     * Check if <precise_gross_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossSum(){
      return $this->_has(10030);
    }
    
    /**
     * Clear <precise_gross_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseGrossSum(){
      return $this->_clear(10030);
    }
    
    /**
     * Get <precise_gross_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossSum(){
      return $this->_get(10030);
    }
    
    /**
     * Set <precise_gross_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseGrossSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(10030, $value);
    }
    
    /**
     * Check if <shipping_cost> has a value
     *
     * @return boolean
     */
    public function hasShippingCost(){
      return $this->_has(10031);
    }
    
    /**
     * Clear <shipping_cost> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearShippingCost(){
      return $this->_clear(10031);
    }
    
    /**
     * Get <shipping_cost> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getShippingCost(){
      return $this->_get(10031);
    }
    
    /**
     * Set <shipping_cost> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setShippingCost(\dstore\engine\values\decimalValue $value){
      return $this->_set(10031, $value);
    }
    
    /**
     * Check if <charac_val1_restr_by_pattern> has a value
     *
     * @return boolean
     */
    public function hasCharacVal1RestrByPattern(){
      return $this->_has(10032);
    }
    
    /**
     * Clear <charac_val1_restr_by_pattern> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCharacVal1RestrByPattern(){
      return $this->_clear(10032);
    }
    
    /**
     * Get <charac_val1_restr_by_pattern> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCharacVal1RestrByPattern(){
      return $this->_get(10032);
    }
    
    /**
     * Set <charac_val1_restr_by_pattern> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCharacVal1RestrByPattern(\dstore\engine\values\stringValue $value){
      return $this->_set(10032, $value);
    }
    
    /**
     * Check if <payment_type_id> has a value
     *
     * @return boolean
     */
    public function hasPaymentTypeId(){
      return $this->_has(10033);
    }
    
    /**
     * Clear <payment_type_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPaymentTypeId(){
      return $this->_clear(10033);
    }
    
    /**
     * Get <payment_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPaymentTypeId(){
      return $this->_get(10033);
    }
    
    /**
     * Set <payment_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPaymentTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10033, $value);
    }
    
    /**
     * Check if <order_state> has a value
     *
     * @return boolean
     */
    public function hasOrderState(){
      return $this->_has(10034);
    }
    
    /**
     * Clear <order_state> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderState(){
      return $this->_clear(10034);
    }
    
    /**
     * Get <order_state> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderState(){
      return $this->_get(10034);
    }
    
    /**
     * Set <order_state> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderState(\dstore\engine\values\stringValue $value){
      return $this->_set(10034, $value);
    }
    
    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(20004);
    }
    
    /**
     * Clear <description> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearDescription(){
      return $this->_clear(20004);
    }
    
    /**
     * Get <description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDescription(){
      return $this->_get(20004);
    }
    
    /**
     * Set <description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(20004, $value);
    }
    
    /**
     * Check if <precise_net_content_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetContentSum(){
      return $this->_has(20005);
    }
    
    /**
     * Clear <precise_net_content_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseNetContentSum(){
      return $this->_clear(20005);
    }
    
    /**
     * Get <precise_net_content_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetContentSum(){
      return $this->_get(20005);
    }
    
    /**
     * Set <precise_net_content_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseNetContentSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20005, $value);
    }
    
    /**
     * Check if <order_content_no> has a value
     *
     * @return boolean
     */
    public function hasOrderContentNo(){
      return $this->_has(20007);
    }
    
    /**
     * Clear <order_content_no> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderContentNo(){
      return $this->_clear(20007);
    }
    
    /**
     * Get <order_content_no> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOrderContentNo(){
      return $this->_get(20007);
    }
    
    /**
     * Set <order_content_no> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderContentNo(\dstore\engine\values\stringValue $value){
      return $this->_set(20007, $value);
    }
    
    /**
     * Check if <order_content_id> has a value
     *
     * @return boolean
     */
    public function hasOrderContentId(){
      return $this->_has(20010);
    }
    
    /**
     * Clear <order_content_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderContentId(){
      return $this->_clear(20010);
    }
    
    /**
     * Get <order_content_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderContentId(){
      return $this->_get(20010);
    }
    
    /**
     * Set <order_content_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderContentId(\dstore\engine\values\integerValue $value){
      return $this->_set(20010, $value);
    }
    
    /**
     * Check if <currency_symbol> has a value
     *
     * @return boolean
     */
    public function hasCurrencySymbol(){
      return $this->_has(20012);
    }
    
    /**
     * Clear <currency_symbol> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearCurrencySymbol(){
      return $this->_clear(20012);
    }
    
    /**
     * Get <currency_symbol> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCurrencySymbol(){
      return $this->_get(20012);
    }
    
    /**
     * Set <currency_symbol> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setCurrencySymbol(\dstore\engine\values\stringValue $value){
      return $this->_set(20012, $value);
    }
    
    /**
     * Check if <order_content_position> has a value
     *
     * @return boolean
     */
    public function hasOrderContentPosition(){
      return $this->_has(20016);
    }
    
    /**
     * Clear <order_content_position> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderContentPosition(){
      return $this->_clear(20016);
    }
    
    /**
     * Get <order_content_position> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOrderContentPosition(){
      return $this->_get(20016);
    }
    
    /**
     * Set <order_content_position> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderContentPosition(\dstore\engine\values\integerValue $value){
      return $this->_set(20016, $value);
    }
    
    /**
     * Check if <net_content_sum> has a value
     *
     * @return boolean
     */
    public function hasNetContentSum(){
      return $this->_has(20017);
    }
    
    /**
     * Clear <net_content_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNetContentSum(){
      return $this->_clear(20017);
    }
    
    /**
     * Get <net_content_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetContentSum(){
      return $this->_get(20017);
    }
    
    /**
     * Set <net_content_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNetContentSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20017, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(20018);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(20018);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(20018);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(20018, $value);
    }
    
    /**
     * Check if <gross_content_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossContentSum(){
      return $this->_has(20019);
    }
    
    /**
     * Clear <gross_content_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearGrossContentSum(){
      return $this->_clear(20019);
    }
    
    /**
     * Get <gross_content_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossContentSum(){
      return $this->_get(20019);
    }
    
    /**
     * Set <gross_content_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setGrossContentSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20019, $value);
    }
    
    /**
     * Check if <precise_gross_order_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossOrderSum(){
      return $this->_has(20022);
    }
    
    /**
     * Clear <precise_gross_order_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseGrossOrderSum(){
      return $this->_clear(20022);
    }
    
    /**
     * Get <precise_gross_order_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossOrderSum(){
      return $this->_get(20022);
    }
    
    /**
     * Set <precise_gross_order_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseGrossOrderSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20022, $value);
    }
    
    /**
     * Check if <precise_gross_content_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseGrossContentSum(){
      return $this->_has(20023);
    }
    
    /**
     * Clear <precise_gross_content_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseGrossContentSum(){
      return $this->_clear(20023);
    }
    
    /**
     * Get <precise_gross_content_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseGrossContentSum(){
      return $this->_get(20023);
    }
    
    /**
     * Set <precise_gross_content_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseGrossContentSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20023, $value);
    }
    
    /**
     * Check if <gross_order_sum> has a value
     *
     * @return boolean
     */
    public function hasGrossOrderSum(){
      return $this->_has(20025);
    }
    
    /**
     * Clear <gross_order_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearGrossOrderSum(){
      return $this->_clear(20025);
    }
    
    /**
     * Get <gross_order_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getGrossOrderSum(){
      return $this->_get(20025);
    }
    
    /**
     * Set <gross_order_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setGrossOrderSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20025, $value);
    }
    
    /**
     * Check if <order_content_was_modified> has a value
     *
     * @return boolean
     */
    public function hasOrderContentWasModified(){
      return $this->_has(20027);
    }
    
    /**
     * Clear <order_content_was_modified> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearOrderContentWasModified(){
      return $this->_clear(20027);
    }
    
    /**
     * Get <order_content_was_modified> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getOrderContentWasModified(){
      return $this->_get(20027);
    }
    
    /**
     * Set <order_content_was_modified> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setOrderContentWasModified(\dstore\engine\values\booleanValue $value){
      return $this->_set(20027, $value);
    }
    
    /**
     * Check if <item_property> has a value
     *
     * @return boolean
     */
    public function hasItemProperty(){
      return $this->_has(20028);
    }
    
    /**
     * Clear <item_property> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearItemProperty(){
      return $this->_clear(20028);
    }
    
    /**
     * Get <item_property> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getItemProperty(){
      return $this->_get(20028);
    }
    
    /**
     * Set <item_property> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setItemProperty(\dstore\engine\values\stringValue $value){
      return $this->_set(20028, $value);
    }
    
    /**
     * Check if <quantity> has a value
     *
     * @return boolean
     */
    public function hasQuantity(){
      return $this->_has(20031);
    }
    
    /**
     * Clear <quantity> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearQuantity(){
      return $this->_clear(20031);
    }
    
    /**
     * Get <quantity> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getQuantity(){
      return $this->_get(20031);
    }
    
    /**
     * Set <quantity> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setQuantity(\dstore\engine\values\integerValue $value){
      return $this->_set(20031, $value);
    }
    
    /**
     * Check if <net_order_sum> has a value
     *
     * @return boolean
     */
    public function hasNetOrderSum(){
      return $this->_has(20035);
    }
    
    /**
     * Clear <net_order_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearNetOrderSum(){
      return $this->_clear(20035);
    }
    
    /**
     * Get <net_order_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getNetOrderSum(){
      return $this->_get(20035);
    }
    
    /**
     * Set <net_order_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setNetOrderSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20035, $value);
    }
    
    /**
     * Check if <item_no> has a value
     *
     * @return boolean
     */
    public function hasItemNo(){
      return $this->_has(20039);
    }
    
    /**
     * Clear <item_no> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearItemNo(){
      return $this->_clear(20039);
    }
    
    /**
     * Get <item_no> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getItemNo(){
      return $this->_get(20039);
    }
    
    /**
     * Set <item_no> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setItemNo(\dstore\engine\values\stringValue $value){
      return $this->_set(20039, $value);
    }
    
    /**
     * Check if <precise_net_order_sum> has a value
     *
     * @return boolean
     */
    public function hasPreciseNetOrderSum(){
      return $this->_has(20043);
    }
    
    /**
     * Clear <precise_net_order_sum> value
     *
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function clearPreciseNetOrderSum(){
      return $this->_clear(20043);
    }
    
    /**
     * Get <precise_net_order_sum> value
     *
     * @return \dstore\engine\values\decimalValue
     */
    public function getPreciseNetOrderSum(){
      return $this->_get(20043);
    }
    
    /**
     * Set <precise_net_order_sum> value
     *
     * @param \dstore\engine\values\decimalValue $value
     * @return \dstore\engine\om_GetOrders_Pu\Response\Row
     */
    public function setPreciseNetOrderSum(\dstore\engine\values\decimalValue $value){
      return $this->_set(20043, $value);
    }
  }
}

