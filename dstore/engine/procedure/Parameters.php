<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedure.proto
//   Date: 2015-08-17 11:45:21

namespace dstore\engine\procedure {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $procedure_name = null;
    
    /**  @var \dstore\engine\procedure\Parameter[]  */
    public $parameters = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.procedure.Parameters');

      // OPTIONAL STRING procedure_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE parameters = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "parameters";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\engine\procedure\Parameter';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <procedure_name> has a value
     *
     * @return boolean
     */
    public function hasProcedureName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <procedure_name> value
     *
     * @return \dstore\engine\procedure\Parameters
     */
    public function clearProcedureName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <procedure_name> value
     *
     * @return string
     */
    public function getProcedureName(){
      return $this->_get(1);
    }
    
    /**
     * Set <procedure_name> value
     *
     * @param string $value
     * @return \dstore\engine\procedure\Parameters
     */
    public function setProcedureName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <parameters> has a value
     *
     * @return boolean
     */
    public function hasParameters(){
      return $this->_has(2);
    }
    
    /**
     * Clear <parameters> value
     *
     * @return \dstore\engine\procedure\Parameters
     */
    public function clearParameters(){
      return $this->_clear(2);
    }
    
    /**
     * Get <parameters> value
     *
     * @param int $idx
     * @return \dstore\engine\procedure\Parameter
     */
    public function getParameters($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <parameters> value
     *
     * @param \dstore\engine\procedure\Parameter $value
     * @return \dstore\engine\procedure\Parameters
     */
    public function setParameters(\dstore\engine\procedure\Parameter $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <parameters>
     *
     * @return \dstore\engine\procedure\Parameter[]
     */
    public function getParametersList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <parameters>
     *
     * @param \dstore\engine\procedure\Parameter $value
     * @return \dstore\engine\procedure\Parameters
     */
    public function addParameters(\dstore\engine\procedure\Parameter $value){
     return $this->_add(2, $value);
    }
  }
}

