<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ModifyTRITriggerConds_Ad.proto
//   Date: 2015-10-06 11:19:54

namespace dstore\engine\mi_ModifyTRITriggerConds_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $trigger_id = null;
    
    /**  @var boolean */
    public $trigger_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $work_step_no = null;
    
    /**  @var boolean */
    public $work_step_no_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $condition_number = null;
    
    /**  @var boolean */
    public $condition_number_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $str_to_compare = null;
    
    /**  @var boolean */
    public $str_to_compare_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $operator = null;
    
    /**  @var boolean */
    public $operator_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $condition = null;
    
    /**  @var boolean */
    public $condition_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $negate_condition = null;
    
    /**  @var boolean */
    public $negate_condition_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $check_each_affected_id = null;
    
    /**  @var boolean */
    public $check_each_affected_id_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete_condition = null;
    
    /**  @var boolean */
    public $delete_condition_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ModifyTRITriggerConds_Ad.Parameters');

      // OPTIONAL MESSAGE trigger_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trigger_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL trigger_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "trigger_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE work_step_no = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "work_step_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL work_step_no_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "work_step_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition_number = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "condition_number";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_number_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "condition_number_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE str_to_compare = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "str_to_compare";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL str_to_compare_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "str_to_compare_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE operator = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "operator";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL operator_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "operator_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE condition = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL condition_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "condition_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE negate_condition = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "negate_condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL negate_condition_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "negate_condition_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE check_each_affected_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "check_each_affected_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL check_each_affected_id_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "check_each_affected_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_condition = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "delete_condition";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_condition_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "delete_condition_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <trigger_id> has a value
     *
     * @return boolean
     */
    public function hasTriggerId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trigger_id> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearTriggerId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trigger_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTriggerId(){
      return $this->_get(1);
    }
    
    /**
     * Set <trigger_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setTriggerId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger_id_null> has a value
     *
     * @return boolean
     */
    public function hasTriggerIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <trigger_id_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearTriggerIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <trigger_id_null> value
     *
     * @return boolean
     */
    public function getTriggerIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <trigger_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setTriggerIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <work_step_no> has a value
     *
     * @return boolean
     */
    public function hasWorkStepNo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <work_step_no> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearWorkStepNo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <work_step_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getWorkStepNo(){
      return $this->_get(2);
    }
    
    /**
     * Set <work_step_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setWorkStepNo(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <work_step_no_null> has a value
     *
     * @return boolean
     */
    public function hasWorkStepNoNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <work_step_no_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearWorkStepNoNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <work_step_no_null> value
     *
     * @return boolean
     */
    public function getWorkStepNoNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <work_step_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setWorkStepNoNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <condition_number> has a value
     *
     * @return boolean
     */
    public function hasConditionNumber(){
      return $this->_has(3);
    }
    
    /**
     * Clear <condition_number> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearConditionNumber(){
      return $this->_clear(3);
    }
    
    /**
     * Get <condition_number> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getConditionNumber(){
      return $this->_get(3);
    }
    
    /**
     * Set <condition_number> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setConditionNumber(\dstore\engine\values\integerValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <condition_number_null> has a value
     *
     * @return boolean
     */
    public function hasConditionNumberNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <condition_number_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearConditionNumberNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <condition_number_null> value
     *
     * @return boolean
     */
    public function getConditionNumberNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <condition_number_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setConditionNumberNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <str_to_compare> has a value
     *
     * @return boolean
     */
    public function hasStrToCompare(){
      return $this->_has(4);
    }
    
    /**
     * Clear <str_to_compare> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearStrToCompare(){
      return $this->_clear(4);
    }
    
    /**
     * Get <str_to_compare> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getStrToCompare(){
      return $this->_get(4);
    }
    
    /**
     * Set <str_to_compare> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setStrToCompare(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <str_to_compare_null> has a value
     *
     * @return boolean
     */
    public function hasStrToCompareNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <str_to_compare_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearStrToCompareNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <str_to_compare_null> value
     *
     * @return boolean
     */
    public function getStrToCompareNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <str_to_compare_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setStrToCompareNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <operator> has a value
     *
     * @return boolean
     */
    public function hasOperator(){
      return $this->_has(5);
    }
    
    /**
     * Clear <operator> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearOperator(){
      return $this->_clear(5);
    }
    
    /**
     * Get <operator> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getOperator(){
      return $this->_get(5);
    }
    
    /**
     * Set <operator> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setOperator(\dstore\engine\values\stringValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <operator_null> has a value
     *
     * @return boolean
     */
    public function hasOperatorNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <operator_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearOperatorNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <operator_null> value
     *
     * @return boolean
     */
    public function getOperatorNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <operator_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setOperatorNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <condition> has a value
     *
     * @return boolean
     */
    public function hasCondition(){
      return $this->_has(6);
    }
    
    /**
     * Clear <condition> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearCondition(){
      return $this->_clear(6);
    }
    
    /**
     * Get <condition> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCondition(){
      return $this->_get(6);
    }
    
    /**
     * Set <condition> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setCondition(\dstore\engine\values\stringValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <condition_null> has a value
     *
     * @return boolean
     */
    public function hasConditionNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <condition_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearConditionNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <condition_null> value
     *
     * @return boolean
     */
    public function getConditionNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <condition_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setConditionNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <negate_condition> has a value
     *
     * @return boolean
     */
    public function hasNegateCondition(){
      return $this->_has(7);
    }
    
    /**
     * Clear <negate_condition> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearNegateCondition(){
      return $this->_clear(7);
    }
    
    /**
     * Get <negate_condition> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getNegateCondition(){
      return $this->_get(7);
    }
    
    /**
     * Set <negate_condition> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setNegateCondition(\dstore\engine\values\booleanValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <negate_condition_null> has a value
     *
     * @return boolean
     */
    public function hasNegateConditionNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <negate_condition_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearNegateConditionNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <negate_condition_null> value
     *
     * @return boolean
     */
    public function getNegateConditionNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <negate_condition_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setNegateConditionNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <check_each_affected_id> has a value
     *
     * @return boolean
     */
    public function hasCheckEachAffectedId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <check_each_affected_id> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearCheckEachAffectedId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <check_each_affected_id> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getCheckEachAffectedId(){
      return $this->_get(8);
    }
    
    /**
     * Set <check_each_affected_id> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setCheckEachAffectedId(\dstore\engine\values\booleanValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <check_each_affected_id_null> has a value
     *
     * @return boolean
     */
    public function hasCheckEachAffectedIdNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <check_each_affected_id_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearCheckEachAffectedIdNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <check_each_affected_id_null> value
     *
     * @return boolean
     */
    public function getCheckEachAffectedIdNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <check_each_affected_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setCheckEachAffectedIdNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <delete_condition> has a value
     *
     * @return boolean
     */
    public function hasDeleteCondition(){
      return $this->_has(9);
    }
    
    /**
     * Clear <delete_condition> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearDeleteCondition(){
      return $this->_clear(9);
    }
    
    /**
     * Get <delete_condition> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeleteCondition(){
      return $this->_get(9);
    }
    
    /**
     * Set <delete_condition> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setDeleteCondition(\dstore\engine\values\booleanValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <delete_condition_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteConditionNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <delete_condition_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function clearDeleteConditionNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <delete_condition_null> value
     *
     * @return boolean
     */
    public function getDeleteConditionNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <delete_condition_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITriggerConds_Ad\Parameters
     */
    public function setDeleteConditionNull( $value){
      return $this->_set(1009, $value);
    }
  }
}

