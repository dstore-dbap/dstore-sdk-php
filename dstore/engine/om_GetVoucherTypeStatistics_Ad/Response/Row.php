<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_GetVoucherTypeStatistics_Ad.proto
//   Date: 2015-10-06 11:20:01

namespace dstore\engine\om_GetVoucherTypeStatistics_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $last_code_used_at_date_and_time = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_unused_codes = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_codes = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_used_codes = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $number_of_max_used_codes = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $max_valid_until = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_GetVoucherTypeStatistics_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_code_used_at_date_and_time = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "last_code_used_at_date_and_time";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_unused_codes = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "number_of_unused_codes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_codes = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "number_of_codes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_used_codes = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "number_of_used_codes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE number_of_max_used_codes = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "number_of_max_used_codes";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE max_valid_until = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "max_valid_until";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <last_code_used_at_date_and_time> has a value
     *
     * @return boolean
     */
    public function hasLastCodeUsedAtDateAndTime(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <last_code_used_at_date_and_time> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearLastCodeUsedAtDateAndTime(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <last_code_used_at_date_and_time> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getLastCodeUsedAtDateAndTime(){
      return $this->_get(10001);
    }
    
    /**
     * Set <last_code_used_at_date_and_time> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setLastCodeUsedAtDateAndTime(\dstore\engine\values\timestampValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <number_of_unused_codes> has a value
     *
     * @return boolean
     */
    public function hasNumberOfUnusedCodes(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <number_of_unused_codes> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearNumberOfUnusedCodes(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <number_of_unused_codes> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfUnusedCodes(){
      return $this->_get(10002);
    }
    
    /**
     * Set <number_of_unused_codes> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setNumberOfUnusedCodes(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <number_of_codes> has a value
     *
     * @return boolean
     */
    public function hasNumberOfCodes(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <number_of_codes> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearNumberOfCodes(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <number_of_codes> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfCodes(){
      return $this->_get(10003);
    }
    
    /**
     * Set <number_of_codes> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setNumberOfCodes(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <number_of_used_codes> has a value
     *
     * @return boolean
     */
    public function hasNumberOfUsedCodes(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <number_of_used_codes> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearNumberOfUsedCodes(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <number_of_used_codes> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfUsedCodes(){
      return $this->_get(10004);
    }
    
    /**
     * Set <number_of_used_codes> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setNumberOfUsedCodes(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <number_of_max_used_codes> has a value
     *
     * @return boolean
     */
    public function hasNumberOfMaxUsedCodes(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <number_of_max_used_codes> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearNumberOfMaxUsedCodes(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <number_of_max_used_codes> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNumberOfMaxUsedCodes(){
      return $this->_get(10005);
    }
    
    /**
     * Set <number_of_max_used_codes> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setNumberOfMaxUsedCodes(\dstore\engine\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <max_valid_until> has a value
     *
     * @return boolean
     */
    public function hasMaxValidUntil(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <max_valid_until> value
     *
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function clearMaxValidUntil(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <max_valid_until> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getMaxValidUntil(){
      return $this->_get(10006);
    }
    
    /**
     * Set <max_valid_until> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\om_GetVoucherTypeStatistics_Ad\Response\Row
     */
    public function setMaxValidUntil(\dstore\engine\values\timestampValue $value){
      return $this->_set(10006, $value);
    }
  }
}

