<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/om_CustomerWhoBoughtAlsoBought.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\om_CustomerWhoBoughtAlsoBought\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $category = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $counter = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $product = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $domain = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $category_tree_node_id = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $active = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $level_no = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $domain_tree_node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $level_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.om_CustomerWhoBoughtAlsoBought.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE category = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "category";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE counter = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "counter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE product = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "product";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE domain = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "domain";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE category_tree_node_id = 20001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20001;
      $f->name      = "category_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 20002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20002;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_no = 20005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20005;
      $f->name      = "level_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE domain_tree_node_id = 20006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20006;
      $f->name      = "domain_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_id = 20011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20011;
      $f->name      = "level_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <category> has a value
     *
     * @return boolean
     */
    public function hasCategory(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <category> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearCategory(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <category> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getCategory(){
      return $this->_get(10001);
    }
    
    /**
     * Set <category> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setCategory(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <counter> has a value
     *
     * @return boolean
     */
    public function hasCounter(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <counter> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearCounter(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <counter> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCounter(){
      return $this->_get(10002);
    }
    
    /**
     * Set <counter> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setCounter(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearTreeNodeId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <product> has a value
     *
     * @return boolean
     */
    public function hasProduct(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <product> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearProduct(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <product> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getProduct(){
      return $this->_get(10005);
    }
    
    /**
     * Set <product> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setProduct(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <domain> has a value
     *
     * @return boolean
     */
    public function hasDomain(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <domain> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearDomain(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <domain> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getDomain(){
      return $this->_get(10006);
    }
    
    /**
     * Set <domain> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setDomain(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <category_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasCategoryTreeNodeId(){
      return $this->_has(20001);
    }
    
    /**
     * Clear <category_tree_node_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearCategoryTreeNodeId(){
      return $this->_clear(20001);
    }
    
    /**
     * Get <category_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getCategoryTreeNodeId(){
      return $this->_get(20001);
    }
    
    /**
     * Set <category_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setCategoryTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(20001, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(20002);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearActive(){
      return $this->_clear(20002);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getActive(){
      return $this->_get(20002);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setActive(\dstore\engine\values\booleanValue $value){
      return $this->_set(20002, $value);
    }
    
    /**
     * Check if <level_no> has a value
     *
     * @return boolean
     */
    public function hasLevelNo(){
      return $this->_has(20005);
    }
    
    /**
     * Clear <level_no> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearLevelNo(){
      return $this->_clear(20005);
    }
    
    /**
     * Get <level_no> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLevelNo(){
      return $this->_get(20005);
    }
    
    /**
     * Set <level_no> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setLevelNo(\dstore\engine\values\integerValue $value){
      return $this->_set(20005, $value);
    }
    
    /**
     * Check if <domain_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasDomainTreeNodeId(){
      return $this->_has(20006);
    }
    
    /**
     * Clear <domain_tree_node_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearDomainTreeNodeId(){
      return $this->_clear(20006);
    }
    
    /**
     * Get <domain_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getDomainTreeNodeId(){
      return $this->_get(20006);
    }
    
    /**
     * Set <domain_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setDomainTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(20006, $value);
    }
    
    /**
     * Check if <level_id> has a value
     *
     * @return boolean
     */
    public function hasLevelId(){
      return $this->_has(20011);
    }
    
    /**
     * Clear <level_id> value
     *
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function clearLevelId(){
      return $this->_clear(20011);
    }
    
    /**
     * Get <level_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLevelId(){
      return $this->_get(20011);
    }
    
    /**
     * Set <level_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\om_CustomerWhoBoughtAlsoBought\Response\Row
     */
    public function setLevelId(\dstore\engine\values\integerValue $value){
      return $this->_set(20011, $value);
    }
  }
}

