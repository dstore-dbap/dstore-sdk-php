<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/error.proto
//   Date: 2016-05-19 08:08:09

namespace dstore\engine\error {

  class Error extends \DrSlump\Protobuf\Message {

    /**  @var int - \dstore\engine\error\Types */
    public $type = null;
    
    /**  @var int */
    public $code = null;
    
    /**  @var string */
    public $message = null;
    
    /**  @var string */
    public $details = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.error.Error');

      // OPTIONAL ENUM type = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\error\Types';
      $descriptor->addField($f);

      // OPTIONAL INT32 code = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "code";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING message = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "message";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING details = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "details";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(1);
    }
    
    /**
     * Clear <type> value
     *
     * @return \dstore\engine\error\Error
     */
    public function clearType(){
      return $this->_clear(1);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \dstore\engine\error\Types
     */
    public function getType(){
      return $this->_get(1);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \dstore\engine\error\Types $value
     * @return \dstore\engine\error\Error
     */
    public function setType( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <code> has a value
     *
     * @return boolean
     */
    public function hasCode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <code> value
     *
     * @return \dstore\engine\error\Error
     */
    public function clearCode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <code> value
     *
     * @return int
     */
    public function getCode(){
      return $this->_get(2);
    }
    
    /**
     * Set <code> value
     *
     * @param int $value
     * @return \dstore\engine\error\Error
     */
    public function setCode( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <message> has a value
     *
     * @return boolean
     */
    public function hasMessage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <message> value
     *
     * @return \dstore\engine\error\Error
     */
    public function clearMessage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <message> value
     *
     * @return string
     */
    public function getMessage(){
      return $this->_get(3);
    }
    
    /**
     * Set <message> value
     *
     * @param string $value
     * @return \dstore\engine\error\Error
     */
    public function setMessage( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <details> has a value
     *
     * @return boolean
     */
    public function hasDetails(){
      return $this->_has(4);
    }
    
    /**
     * Clear <details> value
     *
     * @return \dstore\engine\error\Error
     */
    public function clearDetails(){
      return $this->_clear(4);
    }
    
    /**
     * Get <details> value
     *
     * @return string
     */
    public function getDetails(){
      return $this->_get(4);
    }
    
    /**
     * Set <details> value
     *
     * @param string $value
     * @return \dstore\engine\error\Error
     */
    public function setDetails( $value){
      return $this->_set(4, $value);
    }
  }
}

