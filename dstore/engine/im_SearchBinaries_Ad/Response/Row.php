<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_SearchBinaries_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\im_SearchBinaries_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $binary_code_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $chosen_tree_node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value3 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $binary_value1 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value1 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $binary_value3 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value2 = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $binary_value2 = null;
    
    /**  @var \dstore\engine\values\byteValue */
    public $thumbnail_code = null;
    
    /**  @var \dstore\engine\values\byteValue */
    public $binary_code = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_characteristic_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $value = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $value_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_SearchBinaries_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_code_id = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "binary_code_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE chosen_tree_node_id = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "chosen_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value3 = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "value3";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_value1 = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "binary_value1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value1 = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "value1";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_value3 = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "binary_value3";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value2 = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "value2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_value2 = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "binary_value2";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE thumbnail_code = 20008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20008;
      $f->name      = "thumbnail_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\byteValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_code = 20011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20011;
      $f->name      = "binary_code";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\byteValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_characteristic_id = 30002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30002;
      $f->name      = "node_characteristic_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 30003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30003;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id = 30005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 30005;
      $f->name      = "value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <binary_code_id> has a value
     *
     * @return boolean
     */
    public function hasBinaryCodeId(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <binary_code_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearBinaryCodeId(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <binary_code_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getBinaryCodeId(){
      return $this->_get(10001);
    }
    
    /**
     * Set <binary_code_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setBinaryCodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <chosen_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasChosenTreeNodeId(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <chosen_tree_node_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearChosenTreeNodeId(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <chosen_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getChosenTreeNodeId(){
      return $this->_get(10003);
    }
    
    /**
     * Set <chosen_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setChosenTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <value3> has a value
     *
     * @return boolean
     */
    public function hasValue3(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <value3> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearValue3(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <value3> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue3(){
      return $this->_get(10004);
    }
    
    /**
     * Set <value3> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setValue3(\dstore\engine\values\stringValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <binary_value1> has a value
     *
     * @return boolean
     */
    public function hasBinaryValue1(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <binary_value1> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearBinaryValue1(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <binary_value1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getBinaryValue1(){
      return $this->_get(10005);
    }
    
    /**
     * Set <binary_value1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setBinaryValue1(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <value1> has a value
     *
     * @return boolean
     */
    public function hasValue1(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <value1> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearValue1(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <value1> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue1(){
      return $this->_get(10006);
    }
    
    /**
     * Set <value1> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setValue1(\dstore\engine\values\stringValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <binary_value3> has a value
     *
     * @return boolean
     */
    public function hasBinaryValue3(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <binary_value3> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearBinaryValue3(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <binary_value3> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getBinaryValue3(){
      return $this->_get(10007);
    }
    
    /**
     * Set <binary_value3> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setBinaryValue3(\dstore\engine\values\stringValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <value2> has a value
     *
     * @return boolean
     */
    public function hasValue2(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <value2> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearValue2(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <value2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue2(){
      return $this->_get(10008);
    }
    
    /**
     * Set <value2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setValue2(\dstore\engine\values\stringValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <binary_value2> has a value
     *
     * @return boolean
     */
    public function hasBinaryValue2(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <binary_value2> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearBinaryValue2(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <binary_value2> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getBinaryValue2(){
      return $this->_get(10009);
    }
    
    /**
     * Set <binary_value2> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setBinaryValue2(\dstore\engine\values\stringValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <thumbnail_code> has a value
     *
     * @return boolean
     */
    public function hasThumbnailCode(){
      return $this->_has(20008);
    }
    
    /**
     * Clear <thumbnail_code> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearThumbnailCode(){
      return $this->_clear(20008);
    }
    
    /**
     * Get <thumbnail_code> value
     *
     * @return \dstore\engine\values\byteValue
     */
    public function getThumbnailCode(){
      return $this->_get(20008);
    }
    
    /**
     * Set <thumbnail_code> value
     *
     * @param \dstore\engine\values\byteValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setThumbnailCode(\dstore\engine\values\byteValue $value){
      return $this->_set(20008, $value);
    }
    
    /**
     * Check if <binary_code> has a value
     *
     * @return boolean
     */
    public function hasBinaryCode(){
      return $this->_has(20011);
    }
    
    /**
     * Clear <binary_code> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearBinaryCode(){
      return $this->_clear(20011);
    }
    
    /**
     * Get <binary_code> value
     *
     * @return \dstore\engine\values\byteValue
     */
    public function getBinaryCode(){
      return $this->_get(20011);
    }
    
    /**
     * Set <binary_code> value
     *
     * @param \dstore\engine\values\byteValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setBinaryCode(\dstore\engine\values\byteValue $value){
      return $this->_set(20011, $value);
    }
    
    /**
     * Check if <node_characteristic_id> has a value
     *
     * @return boolean
     */
    public function hasNodeCharacteristicId(){
      return $this->_has(30002);
    }
    
    /**
     * Clear <node_characteristic_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearNodeCharacteristicId(){
      return $this->_clear(30002);
    }
    
    /**
     * Get <node_characteristic_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeCharacteristicId(){
      return $this->_get(30002);
    }
    
    /**
     * Set <node_characteristic_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setNodeCharacteristicId(\dstore\engine\values\integerValue $value){
      return $this->_set(30002, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(30003);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearValue(){
      return $this->_clear(30003);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getValue(){
      return $this->_get(30003);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setValue(\dstore\engine\values\stringValue $value){
      return $this->_set(30003, $value);
    }
    
    /**
     * Check if <value_id> has a value
     *
     * @return boolean
     */
    public function hasValueId(){
      return $this->_has(30005);
    }
    
    /**
     * Clear <value_id> value
     *
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function clearValueId(){
      return $this->_clear(30005);
    }
    
    /**
     * Get <value_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getValueId(){
      return $this->_get(30005);
    }
    
    /**
     * Set <value_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_SearchBinaries_Ad\Response\Row
     */
    public function setValueId(\dstore\engine\values\integerValue $value){
      return $this->_set(30005, $value);
    }
  }
}

