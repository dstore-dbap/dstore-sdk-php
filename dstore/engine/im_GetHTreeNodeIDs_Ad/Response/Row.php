<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetHTreeNodeIDs_Ad.proto
//   Date: 2015-10-06 11:19:46

namespace dstore\engine\im_GetHTreeNodeIDs_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $node_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $predecessor_tree_node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $predecessor_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $h_tree_node_id = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $pre_predecessor_description = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $pre_predecessor_tree_node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $from_date = null;
    
    /**  @var \dstore\engine\values\timestampValue */
    public $to_date = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $to_date_char = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $from_date_char = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetHTreeNodeIDs_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_description = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "node_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predecessor_tree_node_id = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "predecessor_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE predecessor_description = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "predecessor_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE h_tree_node_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "h_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pre_predecessor_description = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "pre_predecessor_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE pre_predecessor_tree_node_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "pre_predecessor_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "from_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "to_date";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE to_date_char = 10011
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10011;
      $f->name      = "to_date_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE from_date_char = 10012
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10012;
      $f->name      = "from_date_char";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <node_description> has a value
     *
     * @return boolean
     */
    public function hasNodeDescription(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <node_description> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearNodeDescription(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <node_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getNodeDescription(){
      return $this->_get(10001);
    }
    
    /**
     * Set <node_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setNodeDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <predecessor_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasPredecessorTreeNodeId(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <predecessor_tree_node_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearPredecessorTreeNodeId(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <predecessor_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPredecessorTreeNodeId(){
      return $this->_get(10002);
    }
    
    /**
     * Set <predecessor_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setPredecessorTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <predecessor_description> has a value
     *
     * @return boolean
     */
    public function hasPredecessorDescription(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <predecessor_description> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearPredecessorDescription(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <predecessor_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPredecessorDescription(){
      return $this->_get(10003);
    }
    
    /**
     * Set <predecessor_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setPredecessorDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <h_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasHTreeNodeId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <h_tree_node_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearHTreeNodeId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <h_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getHTreeNodeId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <h_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setHTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <pre_predecessor_description> has a value
     *
     * @return boolean
     */
    public function hasPrePredecessorDescription(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <pre_predecessor_description> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearPrePredecessorDescription(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <pre_predecessor_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getPrePredecessorDescription(){
      return $this->_get(10005);
    }
    
    /**
     * Set <pre_predecessor_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setPrePredecessorDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <pre_predecessor_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasPrePredecessorTreeNodeId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <pre_predecessor_tree_node_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearPrePredecessorTreeNodeId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <pre_predecessor_tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getPrePredecessorTreeNodeId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <pre_predecessor_tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setPrePredecessorTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearTreeNodeId(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(10007);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10008);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <from_date> has a value
     *
     * @return boolean
     */
    public function hasFromDate(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <from_date> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearFromDate(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <from_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getFromDate(){
      return $this->_get(10009);
    }
    
    /**
     * Set <from_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setFromDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <to_date> has a value
     *
     * @return boolean
     */
    public function hasToDate(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <to_date> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearToDate(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <to_date> value
     *
     * @return \dstore\engine\values\timestampValue
     */
    public function getToDate(){
      return $this->_get(10010);
    }
    
    /**
     * Set <to_date> value
     *
     * @param \dstore\engine\values\timestampValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setToDate(\dstore\engine\values\timestampValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <to_date_char> has a value
     *
     * @return boolean
     */
    public function hasToDateChar(){
      return $this->_has(10011);
    }
    
    /**
     * Clear <to_date_char> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearToDateChar(){
      return $this->_clear(10011);
    }
    
    /**
     * Get <to_date_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getToDateChar(){
      return $this->_get(10011);
    }
    
    /**
     * Set <to_date_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setToDateChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10011, $value);
    }
    
    /**
     * Check if <from_date_char> has a value
     *
     * @return boolean
     */
    public function hasFromDateChar(){
      return $this->_has(10012);
    }
    
    /**
     * Clear <from_date_char> value
     *
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function clearFromDateChar(){
      return $this->_clear(10012);
    }
    
    /**
     * Get <from_date_char> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getFromDateChar(){
      return $this->_get(10012);
    }
    
    /**
     * Set <from_date_char> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\im_GetHTreeNodeIDs_Ad\Response\Row
     */
    public function setFromDateChar(\dstore\engine\values\stringValue $value){
      return $this->_set(10012, $value);
    }
  }
}

