<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetDirectSuccessors_Ad.proto
//   Date: 2016-05-19 08:07:42

namespace dstore\engine\im_GetDirectSuccessors_Ad\Response {

  class Row extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $row_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $node_description = null;
    
    /**  @var \dstore\values\booleanValue */
    public $active = null;
    
    /**  @var \dstore\values\integerValue */
    public $level_no = null;
    
    /**  @var \dstore\values\integerValue */
    public $binary_code_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $node_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $count_successors = null;
    
    /**  @var \dstore\values\integerValue */
    public $sort_no = null;
    
    /**  @var \dstore\values\integerValue */
    public $inherits_from = null;
    
    /**  @var \dstore\values\integerValue */
    public $symbol_id = null;
    
    /**  @var \dstore\values\integerValue */
    public $value_sort_no = null;
    
    /**  @var \dstore\values\integerValue */
    public $value_id = null;
    
    /**  @var \dstore\values\stringValue */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetDirectSuccessors_Ad.Response.Row');

      // OPTIONAL INT32 row_id = 10000
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10000;
      $f->name      = "row_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_description = 10001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10001;
      $f->name      = "node_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE active = 10002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10002;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE level_no = 10003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10003;
      $f->name      = "level_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE binary_code_id = 10004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10004;
      $f->name      = "binary_code_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE node_id = 10005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10005;
      $f->name      = "node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE tree_node_id = 10006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10006;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE count_successors = 10007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10007;
      $f->name      = "count_successors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no = 10008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10008;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE inherits_from = 10009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10009;
      $f->name      = "inherits_from";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE symbol_id = 10010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10010;
      $f->name      = "symbol_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_sort_no = 20003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20003;
      $f->name      = "value_sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value_id = 20004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20004;
      $f->name      = "value_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE value = 20010
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20010;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <row_id> has a value
     *
     * @return boolean
     */
    public function hasRowId(){
      return $this->_has(10000);
    }
    
    /**
     * Clear <row_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearRowId(){
      return $this->_clear(10000);
    }
    
    /**
     * Get <row_id> value
     *
     * @return int
     */
    public function getRowId(){
      return $this->_get(10000);
    }
    
    /**
     * Set <row_id> value
     *
     * @param int $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setRowId( $value){
      return $this->_set(10000, $value);
    }
    
    /**
     * Check if <node_description> has a value
     *
     * @return boolean
     */
    public function hasNodeDescription(){
      return $this->_has(10001);
    }
    
    /**
     * Clear <node_description> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearNodeDescription(){
      return $this->_clear(10001);
    }
    
    /**
     * Get <node_description> value
     *
     * @return \dstore\values\stringValue
     */
    public function getNodeDescription(){
      return $this->_get(10001);
    }
    
    /**
     * Set <node_description> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setNodeDescription(\dstore\values\stringValue $value){
      return $this->_set(10001, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(10002);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearActive(){
      return $this->_clear(10002);
    }
    
    /**
     * Get <active> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getActive(){
      return $this->_get(10002);
    }
    
    /**
     * Set <active> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setActive(\dstore\values\booleanValue $value){
      return $this->_set(10002, $value);
    }
    
    /**
     * Check if <level_no> has a value
     *
     * @return boolean
     */
    public function hasLevelNo(){
      return $this->_has(10003);
    }
    
    /**
     * Clear <level_no> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearLevelNo(){
      return $this->_clear(10003);
    }
    
    /**
     * Get <level_no> value
     *
     * @return \dstore\values\integerValue
     */
    public function getLevelNo(){
      return $this->_get(10003);
    }
    
    /**
     * Set <level_no> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setLevelNo(\dstore\values\integerValue $value){
      return $this->_set(10003, $value);
    }
    
    /**
     * Check if <binary_code_id> has a value
     *
     * @return boolean
     */
    public function hasBinaryCodeId(){
      return $this->_has(10004);
    }
    
    /**
     * Clear <binary_code_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearBinaryCodeId(){
      return $this->_clear(10004);
    }
    
    /**
     * Get <binary_code_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getBinaryCodeId(){
      return $this->_get(10004);
    }
    
    /**
     * Set <binary_code_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setBinaryCodeId(\dstore\values\integerValue $value){
      return $this->_set(10004, $value);
    }
    
    /**
     * Check if <node_id> has a value
     *
     * @return boolean
     */
    public function hasNodeId(){
      return $this->_has(10005);
    }
    
    /**
     * Clear <node_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearNodeId(){
      return $this->_clear(10005);
    }
    
    /**
     * Get <node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getNodeId(){
      return $this->_get(10005);
    }
    
    /**
     * Set <node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setNodeId(\dstore\values\integerValue $value){
      return $this->_set(10005, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(10006);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearTreeNodeId(){
      return $this->_clear(10006);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(10006);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setTreeNodeId(\dstore\values\integerValue $value){
      return $this->_set(10006, $value);
    }
    
    /**
     * Check if <count_successors> has a value
     *
     * @return boolean
     */
    public function hasCountSuccessors(){
      return $this->_has(10007);
    }
    
    /**
     * Clear <count_successors> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearCountSuccessors(){
      return $this->_clear(10007);
    }
    
    /**
     * Get <count_successors> value
     *
     * @return \dstore\values\integerValue
     */
    public function getCountSuccessors(){
      return $this->_get(10007);
    }
    
    /**
     * Set <count_successors> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setCountSuccessors(\dstore\values\integerValue $value){
      return $this->_set(10007, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(10008);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearSortNo(){
      return $this->_clear(10008);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSortNo(){
      return $this->_get(10008);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setSortNo(\dstore\values\integerValue $value){
      return $this->_set(10008, $value);
    }
    
    /**
     * Check if <inherits_from> has a value
     *
     * @return boolean
     */
    public function hasInheritsFrom(){
      return $this->_has(10009);
    }
    
    /**
     * Clear <inherits_from> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearInheritsFrom(){
      return $this->_clear(10009);
    }
    
    /**
     * Get <inherits_from> value
     *
     * @return \dstore\values\integerValue
     */
    public function getInheritsFrom(){
      return $this->_get(10009);
    }
    
    /**
     * Set <inherits_from> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setInheritsFrom(\dstore\values\integerValue $value){
      return $this->_set(10009, $value);
    }
    
    /**
     * Check if <symbol_id> has a value
     *
     * @return boolean
     */
    public function hasSymbolId(){
      return $this->_has(10010);
    }
    
    /**
     * Clear <symbol_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearSymbolId(){
      return $this->_clear(10010);
    }
    
    /**
     * Get <symbol_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getSymbolId(){
      return $this->_get(10010);
    }
    
    /**
     * Set <symbol_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setSymbolId(\dstore\values\integerValue $value){
      return $this->_set(10010, $value);
    }
    
    /**
     * Check if <value_sort_no> has a value
     *
     * @return boolean
     */
    public function hasValueSortNo(){
      return $this->_has(20003);
    }
    
    /**
     * Clear <value_sort_no> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearValueSortNo(){
      return $this->_clear(20003);
    }
    
    /**
     * Get <value_sort_no> value
     *
     * @return \dstore\values\integerValue
     */
    public function getValueSortNo(){
      return $this->_get(20003);
    }
    
    /**
     * Set <value_sort_no> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setValueSortNo(\dstore\values\integerValue $value){
      return $this->_set(20003, $value);
    }
    
    /**
     * Check if <value_id> has a value
     *
     * @return boolean
     */
    public function hasValueId(){
      return $this->_has(20004);
    }
    
    /**
     * Clear <value_id> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearValueId(){
      return $this->_clear(20004);
    }
    
    /**
     * Get <value_id> value
     *
     * @return \dstore\values\integerValue
     */
    public function getValueId(){
      return $this->_get(20004);
    }
    
    /**
     * Set <value_id> value
     *
     * @param \dstore\values\integerValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setValueId(\dstore\values\integerValue $value){
      return $this->_set(20004, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(20010);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function clearValue(){
      return $this->_clear(20010);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\values\stringValue
     */
    public function getValue(){
      return $this->_get(20010);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_GetDirectSuccessors_Ad\Response\Row
     */
    public function setValue(\dstore\values\stringValue $value){
      return $this->_set(20010, $value);
    }
  }
}

