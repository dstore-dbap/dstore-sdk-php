<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_DeleteTreeNodes_Ad.proto
//   Date: 2016-05-19 08:07:41

namespace dstore\engine\im_DeleteTreeNodes_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\stringValue */
    public $tree_node_list = null;
    
    /**  @var boolean */
    public $tree_node_list_null = null;
    
    /**  @var \dstore\values\booleanValue */
    public $cascade_clones = null;
    
    /**  @var boolean */
    public $cascade_clones_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_DeleteTreeNodes_Ad.Parameters');

      // OPTIONAL MESSAGE tree_node_list = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tree_node_list";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_list_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tree_node_list_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE cascade_clones = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cascade_clones";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL cascade_clones_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "cascade_clones_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tree_node_list> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeList(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tree_node_list> value
     *
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function clearTreeNodeList(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tree_node_list> value
     *
     * @return \dstore\values\stringValue
     */
    public function getTreeNodeList(){
      return $this->_get(1);
    }
    
    /**
     * Set <tree_node_list> value
     *
     * @param \dstore\values\stringValue $value
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function setTreeNodeList(\dstore\values\stringValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_list_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeListNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tree_node_list_null> value
     *
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function clearTreeNodeListNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tree_node_list_null> value
     *
     * @return boolean
     */
    public function getTreeNodeListNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tree_node_list_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function setTreeNodeListNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <cascade_clones> has a value
     *
     * @return boolean
     */
    public function hasCascadeClones(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cascade_clones> value
     *
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function clearCascadeClones(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cascade_clones> value
     *
     * @return \dstore\values\booleanValue
     */
    public function getCascadeClones(){
      return $this->_get(2);
    }
    
    /**
     * Set <cascade_clones> value
     *
     * @param \dstore\values\booleanValue $value
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function setCascadeClones(\dstore\values\booleanValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <cascade_clones_null> has a value
     *
     * @return boolean
     */
    public function hasCascadeClonesNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <cascade_clones_null> value
     *
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function clearCascadeClonesNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <cascade_clones_null> value
     *
     * @return boolean
     */
    public function getCascadeClonesNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <cascade_clones_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_DeleteTreeNodes_Ad\Parameters
     */
    public function setCascadeClonesNull( $value){
      return $this->_set(1002, $value);
    }
  }
}

