<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/mi_ModifyTRITrigger_Ad.proto
//   Date: 2015-08-17 11:45:22

namespace dstore\engine\mi_ModifyTRITrigger_Ad {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $trigger_type_id = null;
    
    /**  @var boolean */
    public $trigger_type_id_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $trigger_name = null;
    
    /**  @var boolean */
    public $trigger_name_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $trigger_description = null;
    
    /**  @var boolean */
    public $trigger_description_null = null;
    
    /**  @var \dstore\engine\values\stringValue */
    public $execute_procedure_name = null;
    
    /**  @var boolean */
    public $execute_procedure_name_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $delete_trigger = null;
    
    /**  @var boolean */
    public $delete_trigger_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.mi_ModifyTRITrigger_Ad.Parameters');

      // OPTIONAL MESSAGE trigger_type_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "trigger_type_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL trigger_type_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "trigger_type_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trigger_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "trigger_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL trigger_name_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "trigger_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE trigger_description = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "trigger_description";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL trigger_description_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "trigger_description_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE execute_procedure_name = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "execute_procedure_name";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\stringValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL execute_procedure_name_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "execute_procedure_name_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE delete_trigger = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "delete_trigger";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL delete_trigger_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "delete_trigger_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <trigger_type_id> has a value
     *
     * @return boolean
     */
    public function hasTriggerTypeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <trigger_type_id> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerTypeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <trigger_type_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTriggerTypeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <trigger_type_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerTypeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <trigger_type_id_null> has a value
     *
     * @return boolean
     */
    public function hasTriggerTypeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <trigger_type_id_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerTypeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <trigger_type_id_null> value
     *
     * @return boolean
     */
    public function getTriggerTypeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <trigger_type_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerTypeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <trigger_name> has a value
     *
     * @return boolean
     */
    public function hasTriggerName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <trigger_name> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <trigger_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTriggerName(){
      return $this->_get(2);
    }
    
    /**
     * Set <trigger_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerName(\dstore\engine\values\stringValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <trigger_name_null> has a value
     *
     * @return boolean
     */
    public function hasTriggerNameNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <trigger_name_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerNameNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <trigger_name_null> value
     *
     * @return boolean
     */
    public function getTriggerNameNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <trigger_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerNameNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <trigger_description> has a value
     *
     * @return boolean
     */
    public function hasTriggerDescription(){
      return $this->_has(3);
    }
    
    /**
     * Clear <trigger_description> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerDescription(){
      return $this->_clear(3);
    }
    
    /**
     * Get <trigger_description> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getTriggerDescription(){
      return $this->_get(3);
    }
    
    /**
     * Set <trigger_description> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerDescription(\dstore\engine\values\stringValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <trigger_description_null> has a value
     *
     * @return boolean
     */
    public function hasTriggerDescriptionNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <trigger_description_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearTriggerDescriptionNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <trigger_description_null> value
     *
     * @return boolean
     */
    public function getTriggerDescriptionNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <trigger_description_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setTriggerDescriptionNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <execute_procedure_name> has a value
     *
     * @return boolean
     */
    public function hasExecuteProcedureName(){
      return $this->_has(4);
    }
    
    /**
     * Clear <execute_procedure_name> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearExecuteProcedureName(){
      return $this->_clear(4);
    }
    
    /**
     * Get <execute_procedure_name> value
     *
     * @return \dstore\engine\values\stringValue
     */
    public function getExecuteProcedureName(){
      return $this->_get(4);
    }
    
    /**
     * Set <execute_procedure_name> value
     *
     * @param \dstore\engine\values\stringValue $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setExecuteProcedureName(\dstore\engine\values\stringValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <execute_procedure_name_null> has a value
     *
     * @return boolean
     */
    public function hasExecuteProcedureNameNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <execute_procedure_name_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearExecuteProcedureNameNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <execute_procedure_name_null> value
     *
     * @return boolean
     */
    public function getExecuteProcedureNameNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <execute_procedure_name_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setExecuteProcedureNameNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <delete_trigger> has a value
     *
     * @return boolean
     */
    public function hasDeleteTrigger(){
      return $this->_has(5);
    }
    
    /**
     * Clear <delete_trigger> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearDeleteTrigger(){
      return $this->_clear(5);
    }
    
    /**
     * Get <delete_trigger> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getDeleteTrigger(){
      return $this->_get(5);
    }
    
    /**
     * Set <delete_trigger> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setDeleteTrigger(\dstore\engine\values\booleanValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <delete_trigger_null> has a value
     *
     * @return boolean
     */
    public function hasDeleteTriggerNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <delete_trigger_null> value
     *
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function clearDeleteTriggerNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <delete_trigger_null> value
     *
     * @return boolean
     */
    public function getDeleteTriggerNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <delete_trigger_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\mi_ModifyTRITrigger_Ad\Parameters
     */
    public function setDeleteTriggerNull( $value){
      return $this->_set(1005, $value);
    }
  }
}

