<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/engine/procedures/im_GetPredecessors.proto
//   Date: 2015-10-06 11:19:47

namespace dstore\engine\im_GetPredecessors {

  class Parameters extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\engine\values\integerValue */
    public $tree_node_id = null;
    
    /**  @var boolean */
    public $tree_node_id_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $language_id = null;
    
    /**  @var boolean */
    public $language_id_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $include_root_level = null;
    
    /**  @var boolean */
    public $include_root_level_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $include_my_level = null;
    
    /**  @var boolean */
    public $include_my_level_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $get_node_descriptions = null;
    
    /**  @var boolean */
    public $get_node_descriptions_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $only_predecessor_on_level = null;
    
    /**  @var boolean */
    public $only_predecessor_on_level_null = null;
    
    /**  @var \dstore\engine\values\integerValue */
    public $how_many_levels = null;
    
    /**  @var boolean */
    public $how_many_levels_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $get_level_no_info = null;
    
    /**  @var boolean */
    public $get_level_no_info_null = null;
    
    /**  @var \dstore\engine\values\booleanValue */
    public $order_desc_by_level_no = null;
    
    /**  @var boolean */
    public $order_desc_by_level_no_null = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.engine.im_GetPredecessors.Parameters');

      // OPTIONAL MESSAGE tree_node_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL tree_node_id_null = 1001
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1001;
      $f->name      = "tree_node_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE language_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "language_id";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL language_id_null = 1002
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1002;
      $f->name      = "language_id_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_root_level = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "include_root_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_root_level_null = 1003
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1003;
      $f->name      = "include_root_level_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE include_my_level = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "include_my_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL include_my_level_null = 1004
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1004;
      $f->name      = "include_my_level_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE get_node_descriptions = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "get_node_descriptions";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL get_node_descriptions_null = 1005
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1005;
      $f->name      = "get_node_descriptions_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE only_predecessor_on_level = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "only_predecessor_on_level";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL only_predecessor_on_level_null = 1006
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1006;
      $f->name      = "only_predecessor_on_level_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE how_many_levels = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "how_many_levels";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\integerValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL how_many_levels_null = 1007
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1007;
      $f->name      = "how_many_levels_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE get_level_no_info = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "get_level_no_info";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL get_level_no_info_null = 1008
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1008;
      $f->name      = "get_level_no_info_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE order_desc_by_level_no = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "order_desc_by_level_no";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\engine\values\booleanValue';
      $descriptor->addField($f);

      // OPTIONAL BOOL order_desc_by_level_no_null = 1009
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1009;
      $f->name      = "order_desc_by_level_no_null";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearTreeNodeId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getTreeNodeId(){
      return $this->_get(1);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setTreeNodeId(\dstore\engine\values\integerValue $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_id_null> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeIdNull(){
      return $this->_has(1001);
    }
    
    /**
     * Clear <tree_node_id_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearTreeNodeIdNull(){
      return $this->_clear(1001);
    }
    
    /**
     * Get <tree_node_id_null> value
     *
     * @return boolean
     */
    public function getTreeNodeIdNull(){
      return $this->_get(1001);
    }
    
    /**
     * Set <tree_node_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setTreeNodeIdNull( $value){
      return $this->_set(1001, $value);
    }
    
    /**
     * Check if <language_id> has a value
     *
     * @return boolean
     */
    public function hasLanguageId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <language_id> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearLanguageId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <language_id> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getLanguageId(){
      return $this->_get(2);
    }
    
    /**
     * Set <language_id> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setLanguageId(\dstore\engine\values\integerValue $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <language_id_null> has a value
     *
     * @return boolean
     */
    public function hasLanguageIdNull(){
      return $this->_has(1002);
    }
    
    /**
     * Clear <language_id_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearLanguageIdNull(){
      return $this->_clear(1002);
    }
    
    /**
     * Get <language_id_null> value
     *
     * @return boolean
     */
    public function getLanguageIdNull(){
      return $this->_get(1002);
    }
    
    /**
     * Set <language_id_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setLanguageIdNull( $value){
      return $this->_set(1002, $value);
    }
    
    /**
     * Check if <include_root_level> has a value
     *
     * @return boolean
     */
    public function hasIncludeRootLevel(){
      return $this->_has(3);
    }
    
    /**
     * Clear <include_root_level> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearIncludeRootLevel(){
      return $this->_clear(3);
    }
    
    /**
     * Get <include_root_level> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIncludeRootLevel(){
      return $this->_get(3);
    }
    
    /**
     * Set <include_root_level> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setIncludeRootLevel(\dstore\engine\values\booleanValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <include_root_level_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeRootLevelNull(){
      return $this->_has(1003);
    }
    
    /**
     * Clear <include_root_level_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearIncludeRootLevelNull(){
      return $this->_clear(1003);
    }
    
    /**
     * Get <include_root_level_null> value
     *
     * @return boolean
     */
    public function getIncludeRootLevelNull(){
      return $this->_get(1003);
    }
    
    /**
     * Set <include_root_level_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setIncludeRootLevelNull( $value){
      return $this->_set(1003, $value);
    }
    
    /**
     * Check if <include_my_level> has a value
     *
     * @return boolean
     */
    public function hasIncludeMyLevel(){
      return $this->_has(4);
    }
    
    /**
     * Clear <include_my_level> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearIncludeMyLevel(){
      return $this->_clear(4);
    }
    
    /**
     * Get <include_my_level> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getIncludeMyLevel(){
      return $this->_get(4);
    }
    
    /**
     * Set <include_my_level> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setIncludeMyLevel(\dstore\engine\values\booleanValue $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <include_my_level_null> has a value
     *
     * @return boolean
     */
    public function hasIncludeMyLevelNull(){
      return $this->_has(1004);
    }
    
    /**
     * Clear <include_my_level_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearIncludeMyLevelNull(){
      return $this->_clear(1004);
    }
    
    /**
     * Get <include_my_level_null> value
     *
     * @return boolean
     */
    public function getIncludeMyLevelNull(){
      return $this->_get(1004);
    }
    
    /**
     * Set <include_my_level_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setIncludeMyLevelNull( $value){
      return $this->_set(1004, $value);
    }
    
    /**
     * Check if <get_node_descriptions> has a value
     *
     * @return boolean
     */
    public function hasGetNodeDescriptions(){
      return $this->_has(5);
    }
    
    /**
     * Clear <get_node_descriptions> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearGetNodeDescriptions(){
      return $this->_clear(5);
    }
    
    /**
     * Get <get_node_descriptions> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getGetNodeDescriptions(){
      return $this->_get(5);
    }
    
    /**
     * Set <get_node_descriptions> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setGetNodeDescriptions(\dstore\engine\values\integerValue $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <get_node_descriptions_null> has a value
     *
     * @return boolean
     */
    public function hasGetNodeDescriptionsNull(){
      return $this->_has(1005);
    }
    
    /**
     * Clear <get_node_descriptions_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearGetNodeDescriptionsNull(){
      return $this->_clear(1005);
    }
    
    /**
     * Get <get_node_descriptions_null> value
     *
     * @return boolean
     */
    public function getGetNodeDescriptionsNull(){
      return $this->_get(1005);
    }
    
    /**
     * Set <get_node_descriptions_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setGetNodeDescriptionsNull( $value){
      return $this->_set(1005, $value);
    }
    
    /**
     * Check if <only_predecessor_on_level> has a value
     *
     * @return boolean
     */
    public function hasOnlyPredecessorOnLevel(){
      return $this->_has(6);
    }
    
    /**
     * Clear <only_predecessor_on_level> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearOnlyPredecessorOnLevel(){
      return $this->_clear(6);
    }
    
    /**
     * Get <only_predecessor_on_level> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getOnlyPredecessorOnLevel(){
      return $this->_get(6);
    }
    
    /**
     * Set <only_predecessor_on_level> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setOnlyPredecessorOnLevel(\dstore\engine\values\integerValue $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <only_predecessor_on_level_null> has a value
     *
     * @return boolean
     */
    public function hasOnlyPredecessorOnLevelNull(){
      return $this->_has(1006);
    }
    
    /**
     * Clear <only_predecessor_on_level_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearOnlyPredecessorOnLevelNull(){
      return $this->_clear(1006);
    }
    
    /**
     * Get <only_predecessor_on_level_null> value
     *
     * @return boolean
     */
    public function getOnlyPredecessorOnLevelNull(){
      return $this->_get(1006);
    }
    
    /**
     * Set <only_predecessor_on_level_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setOnlyPredecessorOnLevelNull( $value){
      return $this->_set(1006, $value);
    }
    
    /**
     * Check if <how_many_levels> has a value
     *
     * @return boolean
     */
    public function hasHowManyLevels(){
      return $this->_has(7);
    }
    
    /**
     * Clear <how_many_levels> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearHowManyLevels(){
      return $this->_clear(7);
    }
    
    /**
     * Get <how_many_levels> value
     *
     * @return \dstore\engine\values\integerValue
     */
    public function getHowManyLevels(){
      return $this->_get(7);
    }
    
    /**
     * Set <how_many_levels> value
     *
     * @param \dstore\engine\values\integerValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setHowManyLevels(\dstore\engine\values\integerValue $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <how_many_levels_null> has a value
     *
     * @return boolean
     */
    public function hasHowManyLevelsNull(){
      return $this->_has(1007);
    }
    
    /**
     * Clear <how_many_levels_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearHowManyLevelsNull(){
      return $this->_clear(1007);
    }
    
    /**
     * Get <how_many_levels_null> value
     *
     * @return boolean
     */
    public function getHowManyLevelsNull(){
      return $this->_get(1007);
    }
    
    /**
     * Set <how_many_levels_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setHowManyLevelsNull( $value){
      return $this->_set(1007, $value);
    }
    
    /**
     * Check if <get_level_no_info> has a value
     *
     * @return boolean
     */
    public function hasGetLevelNoInfo(){
      return $this->_has(8);
    }
    
    /**
     * Clear <get_level_no_info> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearGetLevelNoInfo(){
      return $this->_clear(8);
    }
    
    /**
     * Get <get_level_no_info> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getGetLevelNoInfo(){
      return $this->_get(8);
    }
    
    /**
     * Set <get_level_no_info> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setGetLevelNoInfo(\dstore\engine\values\booleanValue $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <get_level_no_info_null> has a value
     *
     * @return boolean
     */
    public function hasGetLevelNoInfoNull(){
      return $this->_has(1008);
    }
    
    /**
     * Clear <get_level_no_info_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearGetLevelNoInfoNull(){
      return $this->_clear(1008);
    }
    
    /**
     * Get <get_level_no_info_null> value
     *
     * @return boolean
     */
    public function getGetLevelNoInfoNull(){
      return $this->_get(1008);
    }
    
    /**
     * Set <get_level_no_info_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setGetLevelNoInfoNull( $value){
      return $this->_set(1008, $value);
    }
    
    /**
     * Check if <order_desc_by_level_no> has a value
     *
     * @return boolean
     */
    public function hasOrderDescByLevelNo(){
      return $this->_has(9);
    }
    
    /**
     * Clear <order_desc_by_level_no> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearOrderDescByLevelNo(){
      return $this->_clear(9);
    }
    
    /**
     * Get <order_desc_by_level_no> value
     *
     * @return \dstore\engine\values\booleanValue
     */
    public function getOrderDescByLevelNo(){
      return $this->_get(9);
    }
    
    /**
     * Set <order_desc_by_level_no> value
     *
     * @param \dstore\engine\values\booleanValue $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setOrderDescByLevelNo(\dstore\engine\values\booleanValue $value){
      return $this->_set(9, $value);
    }
    
    /**
     * Check if <order_desc_by_level_no_null> has a value
     *
     * @return boolean
     */
    public function hasOrderDescByLevelNoNull(){
      return $this->_has(1009);
    }
    
    /**
     * Clear <order_desc_by_level_no_null> value
     *
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function clearOrderDescByLevelNoNull(){
      return $this->_clear(1009);
    }
    
    /**
     * Get <order_desc_by_level_no_null> value
     *
     * @return boolean
     */
    public function getOrderDescByLevelNoNull(){
      return $this->_get(1009);
    }
    
    /**
     * Set <order_desc_by_level_no_null> value
     *
     * @param boolean $value
     * @return \dstore\engine\im_GetPredecessors\Parameters
     */
    public function setOrderDescByLevelNoNull( $value){
      return $this->_set(1009, $value);
    }
  }
}

