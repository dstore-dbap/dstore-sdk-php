<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic {

  class BoolQuery extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\elastic\Query[]  */
    public $filter = array();
    
    /**  @var \dstore\elastic\Query[]  */
    public $must = array();
    
    /**  @var \dstore\elastic\Query[]  */
    public $should = array();
    
    /**  @var \dstore\elastic\Query[]  */
    public $must_not = array();
    
    /**  @var string */
    public $minimum_should_match = null;
    
    /**  @var float */
    public $boost = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.BoolQuery');

      // REPEATED MESSAGE filter = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Query';
      $descriptor->addField($f);

      // REPEATED MESSAGE must = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "must";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Query';
      $descriptor->addField($f);

      // REPEATED MESSAGE should = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "should";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Query';
      $descriptor->addField($f);

      // REPEATED MESSAGE must_not = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "must_not";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Query';
      $descriptor->addField($f);

      // OPTIONAL STRING minimum_should_match = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "minimum_should_match";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE boost = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "boost";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <filter> has a value
     *
     * @return boolean
     */
    public function hasFilter(){
      return $this->_has(1);
    }
    
    /**
     * Clear <filter> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearFilter(){
      return $this->_clear(1);
    }
    
    /**
     * Get <filter> value
     *
     * @param int $idx
     * @return \dstore\elastic\Query
     */
    public function getFilter($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <filter> value
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setFilter(\dstore\elastic\Query $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <filter>
     *
     * @return \dstore\elastic\Query[]
     */
    public function getFilterList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <filter>
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function addFilter(\dstore\elastic\Query $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <must> has a value
     *
     * @return boolean
     */
    public function hasMust(){
      return $this->_has(2);
    }
    
    /**
     * Clear <must> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearMust(){
      return $this->_clear(2);
    }
    
    /**
     * Get <must> value
     *
     * @param int $idx
     * @return \dstore\elastic\Query
     */
    public function getMust($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <must> value
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setMust(\dstore\elastic\Query $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <must>
     *
     * @return \dstore\elastic\Query[]
     */
    public function getMustList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <must>
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function addMust(\dstore\elastic\Query $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <should> has a value
     *
     * @return boolean
     */
    public function hasShould(){
      return $this->_has(3);
    }
    
    /**
     * Clear <should> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearShould(){
      return $this->_clear(3);
    }
    
    /**
     * Get <should> value
     *
     * @param int $idx
     * @return \dstore\elastic\Query
     */
    public function getShould($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <should> value
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setShould(\dstore\elastic\Query $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <should>
     *
     * @return \dstore\elastic\Query[]
     */
    public function getShouldList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <should>
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function addShould(\dstore\elastic\Query $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <must_not> has a value
     *
     * @return boolean
     */
    public function hasMustNot(){
      return $this->_has(4);
    }
    
    /**
     * Clear <must_not> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearMustNot(){
      return $this->_clear(4);
    }
    
    /**
     * Get <must_not> value
     *
     * @param int $idx
     * @return \dstore\elastic\Query
     */
    public function getMustNot($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <must_not> value
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setMustNot(\dstore\elastic\Query $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <must_not>
     *
     * @return \dstore\elastic\Query[]
     */
    public function getMustNotList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <must_not>
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\BoolQuery
     */
    public function addMustNot(\dstore\elastic\Query $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <minimum_should_match> has a value
     *
     * @return boolean
     */
    public function hasMinimumShouldMatch(){
      return $this->_has(5);
    }
    
    /**
     * Clear <minimum_should_match> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearMinimumShouldMatch(){
      return $this->_clear(5);
    }
    
    /**
     * Get <minimum_should_match> value
     *
     * @return string
     */
    public function getMinimumShouldMatch(){
      return $this->_get(5);
    }
    
    /**
     * Set <minimum_should_match> value
     *
     * @param string $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setMinimumShouldMatch( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <boost> has a value
     *
     * @return boolean
     */
    public function hasBoost(){
      return $this->_has(6);
    }
    
    /**
     * Clear <boost> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function clearBoost(){
      return $this->_clear(6);
    }
    
    /**
     * Get <boost> value
     *
     * @return float
     */
    public function getBoost(){
      return $this->_get(6);
    }
    
    /**
     * Set <boost> value
     *
     * @param float $value
     * @return \dstore\elastic\BoolQuery
     */
    public function setBoost( $value){
      return $this->_set(6, $value);
    }
  }
}

