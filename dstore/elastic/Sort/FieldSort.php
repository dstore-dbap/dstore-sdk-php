<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\Sort {

  class FieldSort extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_name = null;
    
    /**  @var int - \dstore\elastic\Sort\Order */
    public $sort_order = null;
    
    /**  @var int - \dstore\elastic\Sort\Missing */
    public $missing_treatment = null;
    
    /**  @var int - \dstore\elastic\Sort\Mode */
    public $sort_mode = null;
    
    /**  @var \dstore\elastic\Query[]  */
    public $nested_filter = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.Sort.FieldSort');

      // OPTIONAL STRING field_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM sort_order = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sort_order";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Sort\Order';
      $descriptor->addField($f);

      // OPTIONAL ENUM missing_treatment = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "missing_treatment";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Sort\Missing';
      $descriptor->addField($f);

      // OPTIONAL ENUM sort_mode = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sort_mode";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Sort\Mode';
      $descriptor->addField($f);

      // REPEATED MESSAGE nested_filter = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "nested_filter";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Query';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function clearFieldName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_name> value
     *
     * @return string
     */
    public function getFieldName(){
      return $this->_get(1);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function setFieldName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sort_order> has a value
     *
     * @return boolean
     */
    public function hasSortOrder(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sort_order> value
     *
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function clearSortOrder(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sort_order> value
     *
     * @return int - \dstore\elastic\Sort\Order
     */
    public function getSortOrder(){
      return $this->_get(2);
    }
    
    /**
     * Set <sort_order> value
     *
     * @param int - \dstore\elastic\Sort\Order $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function setSortOrder( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <missing_treatment> has a value
     *
     * @return boolean
     */
    public function hasMissingTreatment(){
      return $this->_has(3);
    }
    
    /**
     * Clear <missing_treatment> value
     *
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function clearMissingTreatment(){
      return $this->_clear(3);
    }
    
    /**
     * Get <missing_treatment> value
     *
     * @return int - \dstore\elastic\Sort\Missing
     */
    public function getMissingTreatment(){
      return $this->_get(3);
    }
    
    /**
     * Set <missing_treatment> value
     *
     * @param int - \dstore\elastic\Sort\Missing $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function setMissingTreatment( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sort_mode> has a value
     *
     * @return boolean
     */
    public function hasSortMode(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sort_mode> value
     *
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function clearSortMode(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sort_mode> value
     *
     * @return int - \dstore\elastic\Sort\Mode
     */
    public function getSortMode(){
      return $this->_get(4);
    }
    
    /**
     * Set <sort_mode> value
     *
     * @param int - \dstore\elastic\Sort\Mode $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function setSortMode( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <nested_filter> has a value
     *
     * @return boolean
     */
    public function hasNestedFilter(){
      return $this->_has(5);
    }
    
    /**
     * Clear <nested_filter> value
     *
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function clearNestedFilter(){
      return $this->_clear(5);
    }
    
    /**
     * Get <nested_filter> value
     *
     * @param int $idx
     * @return \dstore\elastic\Query
     */
    public function getNestedFilter($idx = NULL){
      return $this->_get(5, $idx);
    }
    
    /**
     * Set <nested_filter> value
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function setNestedFilter(\dstore\elastic\Query $value, $idx = NULL){
      return $this->_set(5, $value, $idx);
    }
    
    /**
     * Get all elements of <nested_filter>
     *
     * @return \dstore\elastic\Query[]
     */
    public function getNestedFilterList(){
     return $this->_get(5);
    }
    
    /**
     * Add a new element to <nested_filter>
     *
     * @param \dstore\elastic\Query $value
     * @return \dstore\elastic\Sort\FieldSort
     */
    public function addNestedFilter(\dstore\elastic\Query $value){
     return $this->_add(5, $value);
    }
  }
}

