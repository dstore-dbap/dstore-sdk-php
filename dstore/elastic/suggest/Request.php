<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/suggest.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\suggest {

  class Request extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $input = null;
    
    /**  @var string[]  */
    public $field_name = array();
    
    /**  @var \dstore\elastic\BoolQuery */
    public $base_query = null;
    
    /**  @var int */
    public $max_items = null;
    
    /**  @var int */
    public $max_suggests = null;
    
    /**  @var boolean */
    public $fuzzy = null;
    
    /**  @var boolean */
    public $use_and_operator = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.suggest.Request');

      // OPTIONAL STRING input = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "input";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING field_name = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE base_query = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "base_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\BoolQuery';
      $descriptor->addField($f);

      // OPTIONAL INT32 max_items = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "max_items";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 max_suggests = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "max_suggests";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL fuzzy = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "fuzzy";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL use_and_operator = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "use_and_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <input> has a value
     *
     * @return boolean
     */
    public function hasInput(){
      return $this->_has(1);
    }
    
    /**
     * Clear <input> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearInput(){
      return $this->_clear(1);
    }
    
    /**
     * Get <input> value
     *
     * @return string
     */
    public function getInput(){
      return $this->_get(1);
    }
    
    /**
     * Set <input> value
     *
     * @param string $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setInput( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(2);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearFieldName(){
      return $this->_clear(2);
    }
    
    /**
     * Get <field_name> value
     *
     * @param int $idx
     * @return string
     */
    public function getFieldName($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setFieldName( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <field_name>
     *
     * @return string[]
     */
    public function getFieldNameList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <field_name>
     *
     * @param string $value
     * @return \dstore\elastic\suggest\Request
     */
    public function addFieldName( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <base_query> has a value
     *
     * @return boolean
     */
    public function hasBaseQuery(){
      return $this->_has(3);
    }
    
    /**
     * Clear <base_query> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearBaseQuery(){
      return $this->_clear(3);
    }
    
    /**
     * Get <base_query> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function getBaseQuery(){
      return $this->_get(3);
    }
    
    /**
     * Set <base_query> value
     *
     * @param \dstore\elastic\BoolQuery $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setBaseQuery(\dstore\elastic\BoolQuery $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <max_items> has a value
     *
     * @return boolean
     */
    public function hasMaxItems(){
      return $this->_has(5);
    }
    
    /**
     * Clear <max_items> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearMaxItems(){
      return $this->_clear(5);
    }
    
    /**
     * Get <max_items> value
     *
     * @return int
     */
    public function getMaxItems(){
      return $this->_get(5);
    }
    
    /**
     * Set <max_items> value
     *
     * @param int $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setMaxItems( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <max_suggests> has a value
     *
     * @return boolean
     */
    public function hasMaxSuggests(){
      return $this->_has(6);
    }
    
    /**
     * Clear <max_suggests> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearMaxSuggests(){
      return $this->_clear(6);
    }
    
    /**
     * Get <max_suggests> value
     *
     * @return int
     */
    public function getMaxSuggests(){
      return $this->_get(6);
    }
    
    /**
     * Set <max_suggests> value
     *
     * @param int $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setMaxSuggests( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <fuzzy> has a value
     *
     * @return boolean
     */
    public function hasFuzzy(){
      return $this->_has(7);
    }
    
    /**
     * Clear <fuzzy> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearFuzzy(){
      return $this->_clear(7);
    }
    
    /**
     * Get <fuzzy> value
     *
     * @return boolean
     */
    public function getFuzzy(){
      return $this->_get(7);
    }
    
    /**
     * Set <fuzzy> value
     *
     * @param boolean $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setFuzzy( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <use_and_operator> has a value
     *
     * @return boolean
     */
    public function hasUseAndOperator(){
      return $this->_has(8);
    }
    
    /**
     * Clear <use_and_operator> value
     *
     * @return \dstore\elastic\suggest\Request
     */
    public function clearUseAndOperator(){
      return $this->_clear(8);
    }
    
    /**
     * Get <use_and_operator> value
     *
     * @return boolean
     */
    public function getUseAndOperator(){
      return $this->_get(8);
    }
    
    /**
     * Set <use_and_operator> value
     *
     * @param boolean $value
     * @return \dstore\elastic\suggest\Request
     */
    public function setUseAndOperator( $value){
      return $this->_set(8, $value);
    }
  }
}

