<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic {

  class Query extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\elastic\Query\Terms */
    public $terms_query = null;
    
    /**  @var \dstore\elastic\Query\Type */
    public $type_query = null;
    
    /**  @var \dstore\elastic\Query\SimpleQueryString */
    public $simple_query_string_query = null;
    
    /**  @var \dstore\elastic\Query\Range */
    public $range_query = null;
    
    /**  @var \dstore\elastic\BoolQuery */
    public $bool_query = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.Query');

      // OPTIONAL MESSAGE terms_query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "terms_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Query\Terms';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE type_query = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "type_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Query\Type';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE simple_query_string_query = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "simple_query_string_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Query\SimpleQueryString';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE range_query = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "range_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\Query\Range';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE bool_query = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "bool_query";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\BoolQuery';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <terms_query> has a value
     *
     * @return boolean
     */
    public function hasTermsQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <terms_query> value
     *
     * @return \dstore\elastic\Query
     */
    public function clearTermsQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <terms_query> value
     *
     * @return \dstore\elastic\Query\Terms
     */
    public function getTermsQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <terms_query> value
     *
     * @param \dstore\elastic\Query\Terms $value
     * @return \dstore\elastic\Query
     */
    public function setTermsQuery(\dstore\elastic\Query\Terms $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <type_query> has a value
     *
     * @return boolean
     */
    public function hasTypeQuery(){
      return $this->_has(2);
    }
    
    /**
     * Clear <type_query> value
     *
     * @return \dstore\elastic\Query
     */
    public function clearTypeQuery(){
      return $this->_clear(2);
    }
    
    /**
     * Get <type_query> value
     *
     * @return \dstore\elastic\Query\Type
     */
    public function getTypeQuery(){
      return $this->_get(2);
    }
    
    /**
     * Set <type_query> value
     *
     * @param \dstore\elastic\Query\Type $value
     * @return \dstore\elastic\Query
     */
    public function setTypeQuery(\dstore\elastic\Query\Type $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <simple_query_string_query> has a value
     *
     * @return boolean
     */
    public function hasSimpleQueryStringQuery(){
      return $this->_has(3);
    }
    
    /**
     * Clear <simple_query_string_query> value
     *
     * @return \dstore\elastic\Query
     */
    public function clearSimpleQueryStringQuery(){
      return $this->_clear(3);
    }
    
    /**
     * Get <simple_query_string_query> value
     *
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function getSimpleQueryStringQuery(){
      return $this->_get(3);
    }
    
    /**
     * Set <simple_query_string_query> value
     *
     * @param \dstore\elastic\Query\SimpleQueryString $value
     * @return \dstore\elastic\Query
     */
    public function setSimpleQueryStringQuery(\dstore\elastic\Query\SimpleQueryString $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <range_query> has a value
     *
     * @return boolean
     */
    public function hasRangeQuery(){
      return $this->_has(4);
    }
    
    /**
     * Clear <range_query> value
     *
     * @return \dstore\elastic\Query
     */
    public function clearRangeQuery(){
      return $this->_clear(4);
    }
    
    /**
     * Get <range_query> value
     *
     * @return \dstore\elastic\Query\Range
     */
    public function getRangeQuery(){
      return $this->_get(4);
    }
    
    /**
     * Set <range_query> value
     *
     * @param \dstore\elastic\Query\Range $value
     * @return \dstore\elastic\Query
     */
    public function setRangeQuery(\dstore\elastic\Query\Range $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <bool_query> has a value
     *
     * @return boolean
     */
    public function hasBoolQuery(){
      return $this->_has(20);
    }
    
    /**
     * Clear <bool_query> value
     *
     * @return \dstore\elastic\Query
     */
    public function clearBoolQuery(){
      return $this->_clear(20);
    }
    
    /**
     * Get <bool_query> value
     *
     * @return \dstore\elastic\BoolQuery
     */
    public function getBoolQuery(){
      return $this->_get(20);
    }
    
    /**
     * Set <bool_query> value
     *
     * @param \dstore\elastic\BoolQuery $value
     * @return \dstore\elastic\Query
     */
    public function setBoolQuery(\dstore\elastic\BoolQuery $value){
      return $this->_set(20, $value);
    }
  }
}

