<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\Query {

  class Terms extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_name = null;
    
    /**  @var string[]  */
    public $value = array();
    
    /**  @var boolean */
    public $allow_partial_matches = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.Query.Terms');

      // OPTIONAL STRING field_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL allow_partial_matches = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "allow_partial_matches";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\Query\Terms
     */
    public function clearFieldName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_name> value
     *
     * @return string
     */
    public function getFieldName(){
      return $this->_get(1);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\Query\Terms
     */
    public function setFieldName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\elastic\Query\Terms
     */
    public function clearValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <value> value
     *
     * @param int $idx
     * @return string
     */
    public function getValue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \dstore\elastic\Query\Terms
     */
    public function setValue( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <value>
     *
     * @return string[]
     */
    public function getValueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <value>
     *
     * @param string $value
     * @return \dstore\elastic\Query\Terms
     */
    public function addValue( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <allow_partial_matches> has a value
     *
     * @return boolean
     */
    public function hasAllowPartialMatches(){
      return $this->_has(3);
    }
    
    /**
     * Clear <allow_partial_matches> value
     *
     * @return \dstore\elastic\Query\Terms
     */
    public function clearAllowPartialMatches(){
      return $this->_clear(3);
    }
    
    /**
     * Get <allow_partial_matches> value
     *
     * @return boolean
     */
    public function getAllowPartialMatches(){
      return $this->_get(3);
    }
    
    /**
     * Set <allow_partial_matches> value
     *
     * @param boolean $value
     * @return \dstore\elastic\Query\Terms
     */
    public function setAllowPartialMatches( $value){
      return $this->_set(3, $value);
    }
  }
}

