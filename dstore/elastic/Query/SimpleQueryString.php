<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\Query {

  class SimpleQueryString extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $query = null;
    
    /**  @var string[]  */
    public $field = array();
    
    /**  @var boolean */
    public $use_and_as_default_operator = null;
    
    /**  @var string */
    public $minimum_should_match = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.Query.SimpleQueryString');

      // OPTIONAL STRING query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED STRING field = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "field";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL BOOL use_and_as_default_operator = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "use_and_as_default_operator";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING minimum_should_match = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "minimum_should_match";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <query> value
     *
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function clearQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <query> value
     *
     * @return string
     */
    public function getQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <query> value
     *
     * @param string $value
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function setQuery( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <field> has a value
     *
     * @return boolean
     */
    public function hasField(){
      return $this->_has(2);
    }
    
    /**
     * Clear <field> value
     *
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function clearField(){
      return $this->_clear(2);
    }
    
    /**
     * Get <field> value
     *
     * @param int $idx
     * @return string
     */
    public function getField($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <field> value
     *
     * @param string $value
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function setField( $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <field>
     *
     * @return string[]
     */
    public function getFieldList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <field>
     *
     * @param string $value
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function addField( $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <use_and_as_default_operator> has a value
     *
     * @return boolean
     */
    public function hasUseAndAsDefaultOperator(){
      return $this->_has(3);
    }
    
    /**
     * Clear <use_and_as_default_operator> value
     *
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function clearUseAndAsDefaultOperator(){
      return $this->_clear(3);
    }
    
    /**
     * Get <use_and_as_default_operator> value
     *
     * @return boolean
     */
    public function getUseAndAsDefaultOperator(){
      return $this->_get(3);
    }
    
    /**
     * Set <use_and_as_default_operator> value
     *
     * @param boolean $value
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function setUseAndAsDefaultOperator( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <minimum_should_match> has a value
     *
     * @return boolean
     */
    public function hasMinimumShouldMatch(){
      return $this->_has(4);
    }
    
    /**
     * Clear <minimum_should_match> value
     *
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function clearMinimumShouldMatch(){
      return $this->_clear(4);
    }
    
    /**
     * Get <minimum_should_match> value
     *
     * @return string
     */
    public function getMinimumShouldMatch(){
      return $this->_get(4);
    }
    
    /**
     * Set <minimum_should_match> value
     *
     * @param string $value
     * @return \dstore\elastic\Query\SimpleQueryString
     */
    public function setMinimumShouldMatch( $value){
      return $this->_set(4, $value);
    }
  }
}

