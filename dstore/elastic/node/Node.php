<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/node.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\node {

  class Node extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $description = null;
    
    /**  @var int */
    public $tree_node_id = null;
    
    /**  @var boolean */
    public $active = null;
    
    /**  @var int */
    public $level_id = null;
    
    /**  @var int */
    public $sort_no = null;
    
    /**  @var int[]  */
    public $predecessor_tree_node_id = array();
    
    /**  @var \dstore\elastic\node\Node\FieldsEntry[]  */
    public $fields = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.node.Node');

      // OPTIONAL STRING description = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "description";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 tree_node_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL active = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 level_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "level_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 sort_no = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "sort_no";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 predecessor_tree_node_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "predecessor_tree_node_id";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // REPEATED MESSAGE fields = 20
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 20;
      $f->name      = "fields";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\node\Node\FieldsEntry';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <description> has a value
     *
     * @return boolean
     */
    public function hasDescription(){
      return $this->_has(1);
    }
    
    /**
     * Clear <description> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearDescription(){
      return $this->_clear(1);
    }
    
    /**
     * Get <description> value
     *
     * @return string
     */
    public function getDescription(){
      return $this->_get(1);
    }
    
    /**
     * Set <description> value
     *
     * @param string $value
     * @return \dstore\elastic\node\Node
     */
    public function setDescription( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasTreeNodeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <tree_node_id> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearTreeNodeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <tree_node_id> value
     *
     * @return int
     */
    public function getTreeNodeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <tree_node_id> value
     *
     * @param int $value
     * @return \dstore\elastic\node\Node
     */
    public function setTreeNodeId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(3);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearActive(){
      return $this->_clear(3);
    }
    
    /**
     * Get <active> value
     *
     * @return boolean
     */
    public function getActive(){
      return $this->_get(3);
    }
    
    /**
     * Set <active> value
     *
     * @param boolean $value
     * @return \dstore\elastic\node\Node
     */
    public function setActive( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <level_id> has a value
     *
     * @return boolean
     */
    public function hasLevelId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <level_id> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearLevelId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <level_id> value
     *
     * @return int
     */
    public function getLevelId(){
      return $this->_get(4);
    }
    
    /**
     * Set <level_id> value
     *
     * @param int $value
     * @return \dstore\elastic\node\Node
     */
    public function setLevelId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <sort_no> has a value
     *
     * @return boolean
     */
    public function hasSortNo(){
      return $this->_has(5);
    }
    
    /**
     * Clear <sort_no> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearSortNo(){
      return $this->_clear(5);
    }
    
    /**
     * Get <sort_no> value
     *
     * @return int
     */
    public function getSortNo(){
      return $this->_get(5);
    }
    
    /**
     * Set <sort_no> value
     *
     * @param int $value
     * @return \dstore\elastic\node\Node
     */
    public function setSortNo( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <predecessor_tree_node_id> has a value
     *
     * @return boolean
     */
    public function hasPredecessorTreeNodeId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <predecessor_tree_node_id> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearPredecessorTreeNodeId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <predecessor_tree_node_id> value
     *
     * @param int $idx
     * @return int
     */
    public function getPredecessorTreeNodeId($idx = NULL){
      return $this->_get(6, $idx);
    }
    
    /**
     * Set <predecessor_tree_node_id> value
     *
     * @param int $value
     * @return \dstore\elastic\node\Node
     */
    public function setPredecessorTreeNodeId( $value, $idx = NULL){
      return $this->_set(6, $value, $idx);
    }
    
    /**
     * Get all elements of <predecessor_tree_node_id>
     *
     * @return int[]
     */
    public function getPredecessorTreeNodeIdList(){
     return $this->_get(6);
    }
    
    /**
     * Add a new element to <predecessor_tree_node_id>
     *
     * @param int $value
     * @return \dstore\elastic\node\Node
     */
    public function addPredecessorTreeNodeId( $value){
     return $this->_add(6, $value);
    }
    
    /**
     * Check if <fields> has a value
     *
     * @return boolean
     */
    public function hasFields(){
      return $this->_has(20);
    }
    
    /**
     * Clear <fields> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function clearFields(){
      return $this->_clear(20);
    }
    
    /**
     * Get <fields> value
     *
     * @param int $idx
     * @return \dstore\elastic\node\Node\FieldsEntry
     */
    public function getFields($idx = NULL){
      return $this->_get(20, $idx);
    }
    
    /**
     * Set <fields> value
     *
     * @param \dstore\elastic\node\Node\FieldsEntry $value
     * @return \dstore\elastic\node\Node
     */
    public function setFields(\dstore\elastic\node\Node\FieldsEntry $value, $idx = NULL){
      return $this->_set(20, $value, $idx);
    }
    
    /**
     * Get all elements of <fields>
     *
     * @return \dstore\elastic\node\Node\FieldsEntry[]
     */
    public function getFieldsList(){
     return $this->_get(20);
    }
    
    /**
     * Add a new element to <fields>
     *
     * @param \dstore\elastic\node\Node\FieldsEntry $value
     * @return \dstore\elastic\node\Node
     */
    public function addFields(\dstore\elastic\node\Node\FieldsEntry $value){
     return $this->_add(20, $value);
    }
  }
}

