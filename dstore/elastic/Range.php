<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/elastic.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic {

  class Range extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $from = null;
    
    /**  @var string */
    public $to = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.Range');

      // OPTIONAL STRING from = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "from";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING to = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "to";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <from> has a value
     *
     * @return boolean
     */
    public function hasFrom(){
      return $this->_has(1);
    }
    
    /**
     * Clear <from> value
     *
     * @return \dstore\elastic\Range
     */
    public function clearFrom(){
      return $this->_clear(1);
    }
    
    /**
     * Get <from> value
     *
     * @return string
     */
    public function getFrom(){
      return $this->_get(1);
    }
    
    /**
     * Set <from> value
     *
     * @param string $value
     * @return \dstore\elastic\Range
     */
    public function setFrom( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <to> has a value
     *
     * @return boolean
     */
    public function hasTo(){
      return $this->_has(2);
    }
    
    /**
     * Clear <to> value
     *
     * @return \dstore\elastic\Range
     */
    public function clearTo(){
      return $this->_clear(2);
    }
    
    /**
     * Get <to> value
     *
     * @return string
     */
    public function getTo(){
      return $this->_get(2);
    }
    
    /**
     * Set <to> value
     *
     * @param string $value
     * @return \dstore\elastic\Range
     */
    public function setTo( $value){
      return $this->_set(2, $value);
    }
  }
}

