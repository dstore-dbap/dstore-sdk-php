<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/facetednavigation.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\facetednavigation {

  class Response extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\elastic\error\Error */
    public $error = null;
    
    /**  @var int */
    public $total_hits = null;
    
    /**  @var \dstore\elastic\item\Item[]  */
    public $item = array();
    
    /**  @var \dstore\elastic\item\Facet[]  */
    public $facet = array();
    
    /**  @var string */
    public $elastic_query_string = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.facetednavigation.Response');

      // OPTIONAL MESSAGE error = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "error";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\error\Error';
      $descriptor->addField($f);

      // OPTIONAL INT32 total_hits = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total_hits";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE item = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "item";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\item\Item';
      $descriptor->addField($f);

      // REPEATED MESSAGE facet = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "facet";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\item\Facet';
      $descriptor->addField($f);

      // OPTIONAL STRING elastic_query_string = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "elastic_query_string";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <error> has a value
     *
     * @return boolean
     */
    public function hasError(){
      return $this->_has(1);
    }
    
    /**
     * Clear <error> value
     *
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function clearError(){
      return $this->_clear(1);
    }
    
    /**
     * Get <error> value
     *
     * @return \dstore\elastic\error\Error
     */
    public function getError(){
      return $this->_get(1);
    }
    
    /**
     * Set <error> value
     *
     * @param \dstore\elastic\error\Error $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function setError(\dstore\elastic\error\Error $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <total_hits> has a value
     *
     * @return boolean
     */
    public function hasTotalHits(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total_hits> value
     *
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function clearTotalHits(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total_hits> value
     *
     * @return int
     */
    public function getTotalHits(){
      return $this->_get(2);
    }
    
    /**
     * Set <total_hits> value
     *
     * @param int $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function setTotalHits( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <item> has a value
     *
     * @return boolean
     */
    public function hasItem(){
      return $this->_has(3);
    }
    
    /**
     * Clear <item> value
     *
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function clearItem(){
      return $this->_clear(3);
    }
    
    /**
     * Get <item> value
     *
     * @param int $idx
     * @return \dstore\elastic\item\Item
     */
    public function getItem($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <item> value
     *
     * @param \dstore\elastic\item\Item $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function setItem(\dstore\elastic\item\Item $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <item>
     *
     * @return \dstore\elastic\item\Item[]
     */
    public function getItemList(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <item>
     *
     * @param \dstore\elastic\item\Item $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function addItem(\dstore\elastic\item\Item $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <facet> has a value
     *
     * @return boolean
     */
    public function hasFacet(){
      return $this->_has(4);
    }
    
    /**
     * Clear <facet> value
     *
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function clearFacet(){
      return $this->_clear(4);
    }
    
    /**
     * Get <facet> value
     *
     * @param int $idx
     * @return \dstore\elastic\item\Facet
     */
    public function getFacet($idx = NULL){
      return $this->_get(4, $idx);
    }
    
    /**
     * Set <facet> value
     *
     * @param \dstore\elastic\item\Facet $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function setFacet(\dstore\elastic\item\Facet $value, $idx = NULL){
      return $this->_set(4, $value, $idx);
    }
    
    /**
     * Get all elements of <facet>
     *
     * @return \dstore\elastic\item\Facet[]
     */
    public function getFacetList(){
     return $this->_get(4);
    }
    
    /**
     * Add a new element to <facet>
     *
     * @param \dstore\elastic\item\Facet $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function addFacet(\dstore\elastic\item\Facet $value){
     return $this->_add(4, $value);
    }
    
    /**
     * Check if <elastic_query_string> has a value
     *
     * @return boolean
     */
    public function hasElasticQueryString(){
      return $this->_has(5);
    }
    
    /**
     * Clear <elastic_query_string> value
     *
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function clearElasticQueryString(){
      return $this->_clear(5);
    }
    
    /**
     * Get <elastic_query_string> value
     *
     * @return string
     */
    public function getElasticQueryString(){
      return $this->_get(5);
    }
    
    /**
     * Set <elastic_query_string> value
     *
     * @param string $value
     * @return \dstore\elastic\facetednavigation\Response
     */
    public function setElasticQueryString( $value){
      return $this->_set(5, $value);
    }
  }
}

