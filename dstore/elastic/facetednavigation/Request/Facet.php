<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/facetednavigation.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\facetednavigation\Request {

  class Facet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_name = null;
    
    /**  @var \dstore\elastic\facetednavigation\Request\Facet\SortNoSort */
    public $sort_no_sort = null;
    
    /**  @var \dstore\elastic\facetednavigation\Request\Facet\FieldSort */
    public $field_sort = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.facetednavigation.Request.Facet');

      // OPTIONAL STRING field_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE sort_no_sort = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "sort_no_sort";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\facetednavigation\Request\Facet\SortNoSort';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE field_sort = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "field_sort";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\facetednavigation\Request\Facet\FieldSort';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function clearFieldName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_name> value
     *
     * @return string
     */
    public function getFieldName(){
      return $this->_get(1);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function setFieldName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <sort_no_sort> has a value
     *
     * @return boolean
     */
    public function hasSortNoSort(){
      return $this->_has(2);
    }
    
    /**
     * Clear <sort_no_sort> value
     *
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function clearSortNoSort(){
      return $this->_clear(2);
    }
    
    /**
     * Get <sort_no_sort> value
     *
     * @return \dstore\elastic\facetednavigation\Request\Facet\SortNoSort
     */
    public function getSortNoSort(){
      return $this->_get(2);
    }
    
    /**
     * Set <sort_no_sort> value
     *
     * @param \dstore\elastic\facetednavigation\Request\Facet\SortNoSort $value
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function setSortNoSort(\dstore\elastic\facetednavigation\Request\Facet\SortNoSort $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <field_sort> has a value
     *
     * @return boolean
     */
    public function hasFieldSort(){
      return $this->_has(3);
    }
    
    /**
     * Clear <field_sort> value
     *
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function clearFieldSort(){
      return $this->_clear(3);
    }
    
    /**
     * Get <field_sort> value
     *
     * @return \dstore\elastic\facetednavigation\Request\Facet\FieldSort
     */
    public function getFieldSort(){
      return $this->_get(3);
    }
    
    /**
     * Set <field_sort> value
     *
     * @param \dstore\elastic\facetednavigation\Request\Facet\FieldSort $value
     * @return \dstore\elastic\facetednavigation\Request\Facet
     */
    public function setFieldSort(\dstore\elastic\facetednavigation\Request\Facet\FieldSort $value){
      return $this->_set(3, $value);
    }
  }
}

