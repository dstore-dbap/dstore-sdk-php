<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/facetednavigation.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\facetednavigation\Request {

  class RangeFacet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_name = null;
    
    /**  @var \dstore\elastic\Range[]  */
    public $range = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.facetednavigation.Request.RangeFacet');

      // OPTIONAL STRING field_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\Range';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\facetednavigation\Request\RangeFacet
     */
    public function clearFieldName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_name> value
     *
     * @return string
     */
    public function getFieldName(){
      return $this->_get(1);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\facetednavigation\Request\RangeFacet
     */
    public function setFieldName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <range> has a value
     *
     * @return boolean
     */
    public function hasRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <range> value
     *
     * @return \dstore\elastic\facetednavigation\Request\RangeFacet
     */
    public function clearRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <range> value
     *
     * @param int $idx
     * @return \dstore\elastic\Range
     */
    public function getRange($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <range> value
     *
     * @param \dstore\elastic\Range $value
     * @return \dstore\elastic\facetednavigation\Request\RangeFacet
     */
    public function setRange(\dstore\elastic\Range $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <range>
     *
     * @return \dstore\elastic\Range[]
     */
    public function getRangeList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <range>
     *
     * @param \dstore\elastic\Range $value
     * @return \dstore\elastic\facetednavigation\Request\RangeFacet
     */
    public function addRange(\dstore\elastic\Range $value){
     return $this->_add(2, $value);
    }
  }
}

