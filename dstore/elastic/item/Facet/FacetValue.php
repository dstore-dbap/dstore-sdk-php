<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/item.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\item\Facet {

  class FacetValue extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\values\Value */
    public $value = null;
    
    /**  @var int */
    public $total_item_count = null;
    
    /**  @var int */
    public $matching_item_count = null;
    
    /**  @var boolean */
    public $active = null;
    
    /**  @var float */
    public $min_value = null;
    
    /**  @var float */
    public $max_value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.item.Facet.FacetValue');

      // OPTIONAL MESSAGE value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\Value';
      $descriptor->addField($f);

      // OPTIONAL INT32 total_item_count = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "total_item_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 matching_item_count = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "matching_item_count";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL active = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "active";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE min_value = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "min_value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE max_value = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "max_value";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return \dstore\values\Value
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param \dstore\values\Value $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setValue(\dstore\values\Value $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <total_item_count> has a value
     *
     * @return boolean
     */
    public function hasTotalItemCount(){
      return $this->_has(2);
    }
    
    /**
     * Clear <total_item_count> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearTotalItemCount(){
      return $this->_clear(2);
    }
    
    /**
     * Get <total_item_count> value
     *
     * @return int
     */
    public function getTotalItemCount(){
      return $this->_get(2);
    }
    
    /**
     * Set <total_item_count> value
     *
     * @param int $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setTotalItemCount( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <matching_item_count> has a value
     *
     * @return boolean
     */
    public function hasMatchingItemCount(){
      return $this->_has(3);
    }
    
    /**
     * Clear <matching_item_count> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearMatchingItemCount(){
      return $this->_clear(3);
    }
    
    /**
     * Get <matching_item_count> value
     *
     * @return int
     */
    public function getMatchingItemCount(){
      return $this->_get(3);
    }
    
    /**
     * Set <matching_item_count> value
     *
     * @param int $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setMatchingItemCount( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <active> has a value
     *
     * @return boolean
     */
    public function hasActive(){
      return $this->_has(4);
    }
    
    /**
     * Clear <active> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearActive(){
      return $this->_clear(4);
    }
    
    /**
     * Get <active> value
     *
     * @return boolean
     */
    public function getActive(){
      return $this->_get(4);
    }
    
    /**
     * Set <active> value
     *
     * @param boolean $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setActive( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <min_value> has a value
     *
     * @return boolean
     */
    public function hasMinValue(){
      return $this->_has(5);
    }
    
    /**
     * Clear <min_value> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearMinValue(){
      return $this->_clear(5);
    }
    
    /**
     * Get <min_value> value
     *
     * @return float
     */
    public function getMinValue(){
      return $this->_get(5);
    }
    
    /**
     * Set <min_value> value
     *
     * @param float $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setMinValue( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <max_value> has a value
     *
     * @return boolean
     */
    public function hasMaxValue(){
      return $this->_has(6);
    }
    
    /**
     * Clear <max_value> value
     *
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function clearMaxValue(){
      return $this->_clear(6);
    }
    
    /**
     * Get <max_value> value
     *
     * @return float
     */
    public function getMaxValue(){
      return $this->_get(6);
    }
    
    /**
     * Set <max_value> value
     *
     * @param float $value
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function setMaxValue( $value){
      return $this->_set(6, $value);
    }
  }
}

