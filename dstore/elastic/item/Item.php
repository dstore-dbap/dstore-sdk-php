<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/item.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\item {

  class Item extends \DrSlump\Protobuf\Message {

    /**  @var \dstore\elastic\node\Node */
    public $node = null;
    
    /**  @var \dstore\elastic\node\Node[]  */
    public $variant_node = array();
    
    /**  @var \dstore\values\timestampValue */
    public $last_updated = null;
    
    /**  @var float */
    public $score = null;
    
    /**  @var string */
    public $index_name = null;
    
    /**  @var string */
    public $document_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.item.Item');

      // OPTIONAL MESSAGE node = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "node";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\elastic\node\Node';
      $descriptor->addField($f);

      // REPEATED MESSAGE variant_node = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "variant_node";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\node\Node';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE last_updated = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "last_updated";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\dstore\values\timestampValue';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE score = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "score";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING index_name = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "index_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING document_id = 12
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 12;
      $f->name      = "document_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <node> has a value
     *
     * @return boolean
     */
    public function hasNode(){
      return $this->_has(1);
    }
    
    /**
     * Clear <node> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearNode(){
      return $this->_clear(1);
    }
    
    /**
     * Get <node> value
     *
     * @return \dstore\elastic\node\Node
     */
    public function getNode(){
      return $this->_get(1);
    }
    
    /**
     * Set <node> value
     *
     * @param \dstore\elastic\node\Node $value
     * @return \dstore\elastic\item\Item
     */
    public function setNode(\dstore\elastic\node\Node $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <variant_node> has a value
     *
     * @return boolean
     */
    public function hasVariantNode(){
      return $this->_has(2);
    }
    
    /**
     * Clear <variant_node> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearVariantNode(){
      return $this->_clear(2);
    }
    
    /**
     * Get <variant_node> value
     *
     * @param int $idx
     * @return \dstore\elastic\node\Node
     */
    public function getVariantNode($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <variant_node> value
     *
     * @param \dstore\elastic\node\Node $value
     * @return \dstore\elastic\item\Item
     */
    public function setVariantNode(\dstore\elastic\node\Node $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <variant_node>
     *
     * @return \dstore\elastic\node\Node[]
     */
    public function getVariantNodeList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <variant_node>
     *
     * @param \dstore\elastic\node\Node $value
     * @return \dstore\elastic\item\Item
     */
    public function addVariantNode(\dstore\elastic\node\Node $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <last_updated> has a value
     *
     * @return boolean
     */
    public function hasLastUpdated(){
      return $this->_has(3);
    }
    
    /**
     * Clear <last_updated> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearLastUpdated(){
      return $this->_clear(3);
    }
    
    /**
     * Get <last_updated> value
     *
     * @return \dstore\values\timestampValue
     */
    public function getLastUpdated(){
      return $this->_get(3);
    }
    
    /**
     * Set <last_updated> value
     *
     * @param \dstore\values\timestampValue $value
     * @return \dstore\elastic\item\Item
     */
    public function setLastUpdated(\dstore\values\timestampValue $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <score> has a value
     *
     * @return boolean
     */
    public function hasScore(){
      return $this->_has(10);
    }
    
    /**
     * Clear <score> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearScore(){
      return $this->_clear(10);
    }
    
    /**
     * Get <score> value
     *
     * @return float
     */
    public function getScore(){
      return $this->_get(10);
    }
    
    /**
     * Set <score> value
     *
     * @param float $value
     * @return \dstore\elastic\item\Item
     */
    public function setScore( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <index_name> has a value
     *
     * @return boolean
     */
    public function hasIndexName(){
      return $this->_has(11);
    }
    
    /**
     * Clear <index_name> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearIndexName(){
      return $this->_clear(11);
    }
    
    /**
     * Get <index_name> value
     *
     * @return string
     */
    public function getIndexName(){
      return $this->_get(11);
    }
    
    /**
     * Set <index_name> value
     *
     * @param string $value
     * @return \dstore\elastic\item\Item
     */
    public function setIndexName( $value){
      return $this->_set(11, $value);
    }
    
    /**
     * Check if <document_id> has a value
     *
     * @return boolean
     */
    public function hasDocumentId(){
      return $this->_has(12);
    }
    
    /**
     * Clear <document_id> value
     *
     * @return \dstore\elastic\item\Item
     */
    public function clearDocumentId(){
      return $this->_clear(12);
    }
    
    /**
     * Get <document_id> value
     *
     * @return string
     */
    public function getDocumentId(){
      return $this->_get(12);
    }
    
    /**
     * Set <document_id> value
     *
     * @param string $value
     * @return \dstore\elastic\item\Item
     */
    public function setDocumentId( $value){
      return $this->_set(12, $value);
    }
  }
}

