<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: dstore/elastic/item/item.proto
//   Date: 2016-05-19 08:08:10

namespace dstore\elastic\item {

  class Facet extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $field_name = null;
    
    /**  @var \dstore\elastic\item\Facet\FacetValue[]  */
    public $facet_value = array();
    
    /**  @var float */
    public $range_from = null;
    
    /**  @var float */
    public $range_to = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'dstore.elastic.item.Facet');

      // OPTIONAL STRING field_name = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "field_name";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE facet_value = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "facet_value";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\dstore\elastic\item\Facet\FacetValue';
      $descriptor->addField($f);

      // OPTIONAL DOUBLE range_from = 10
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 10;
      $f->name      = "range_from";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL DOUBLE range_to = 11
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 11;
      $f->name      = "range_to";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <field_name> has a value
     *
     * @return boolean
     */
    public function hasFieldName(){
      return $this->_has(1);
    }
    
    /**
     * Clear <field_name> value
     *
     * @return \dstore\elastic\item\Facet
     */
    public function clearFieldName(){
      return $this->_clear(1);
    }
    
    /**
     * Get <field_name> value
     *
     * @return string
     */
    public function getFieldName(){
      return $this->_get(1);
    }
    
    /**
     * Set <field_name> value
     *
     * @param string $value
     * @return \dstore\elastic\item\Facet
     */
    public function setFieldName( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <facet_value> has a value
     *
     * @return boolean
     */
    public function hasFacetValue(){
      return $this->_has(2);
    }
    
    /**
     * Clear <facet_value> value
     *
     * @return \dstore\elastic\item\Facet
     */
    public function clearFacetValue(){
      return $this->_clear(2);
    }
    
    /**
     * Get <facet_value> value
     *
     * @param int $idx
     * @return \dstore\elastic\item\Facet\FacetValue
     */
    public function getFacetValue($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <facet_value> value
     *
     * @param \dstore\elastic\item\Facet\FacetValue $value
     * @return \dstore\elastic\item\Facet
     */
    public function setFacetValue(\dstore\elastic\item\Facet\FacetValue $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <facet_value>
     *
     * @return \dstore\elastic\item\Facet\FacetValue[]
     */
    public function getFacetValueList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <facet_value>
     *
     * @param \dstore\elastic\item\Facet\FacetValue $value
     * @return \dstore\elastic\item\Facet
     */
    public function addFacetValue(\dstore\elastic\item\Facet\FacetValue $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <range_from> has a value
     *
     * @return boolean
     */
    public function hasRangeFrom(){
      return $this->_has(10);
    }
    
    /**
     * Clear <range_from> value
     *
     * @return \dstore\elastic\item\Facet
     */
    public function clearRangeFrom(){
      return $this->_clear(10);
    }
    
    /**
     * Get <range_from> value
     *
     * @return float
     */
    public function getRangeFrom(){
      return $this->_get(10);
    }
    
    /**
     * Set <range_from> value
     *
     * @param float $value
     * @return \dstore\elastic\item\Facet
     */
    public function setRangeFrom( $value){
      return $this->_set(10, $value);
    }
    
    /**
     * Check if <range_to> has a value
     *
     * @return boolean
     */
    public function hasRangeTo(){
      return $this->_has(11);
    }
    
    /**
     * Clear <range_to> value
     *
     * @return \dstore\elastic\item\Facet
     */
    public function clearRangeTo(){
      return $this->_clear(11);
    }
    
    /**
     * Get <range_to> value
     *
     * @return float
     */
    public function getRangeTo(){
      return $this->_get(11);
    }
    
    /**
     * Set <range_to> value
     *
     * @param float $value
     * @return \dstore\elastic\item\Facet
     */
    public function setRangeTo( $value){
      return $this->_set(11, $value);
    }
  }
}

